
F401_TEST_OLED_1.8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b28  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e04  08003cbc  08003cbc  00013cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ac0  08004ac0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ac8  08004ac8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ac8  08004ac8  00014ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004acc  08004acc  00014acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000014  08004ae4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08004ae4  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095ae  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a2a  00000000  00000000  000295f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0002b020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c0  00000000  00000000  0002b7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015805  00000000  00000000  0002be90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096f1  00000000  00000000  00041695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083de1  00000000  00000000  0004ad86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ceb67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d70  00000000  00000000  000cebbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003ca4 	.word	0x08003ca4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08003ca4 	.word	0x08003ca4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
 80004d6:	460b      	mov	r3, r1
 80004d8:	80bb      	strh	r3, [r7, #4]
 80004da:	4613      	mov	r3, r2
 80004dc:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	88b9      	ldrh	r1, [r7, #4]
 80004e2:	887a      	ldrh	r2, [r7, #2]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f001 fdd3 	bl	8002090 <ST7735_DrawPixel>
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80004f2:	b590      	push	{r4, r7, lr}
 80004f4:	b085      	sub	sp, #20
 80004f6:	af02      	add	r7, sp, #8
 80004f8:	4604      	mov	r4, r0
 80004fa:	4608      	mov	r0, r1
 80004fc:	4611      	mov	r1, r2
 80004fe:	461a      	mov	r2, r3
 8000500:	4623      	mov	r3, r4
 8000502:	80fb      	strh	r3, [r7, #6]
 8000504:	4603      	mov	r3, r0
 8000506:	80bb      	strh	r3, [r7, #4]
 8000508:	460b      	mov	r3, r1
 800050a:	807b      	strh	r3, [r7, #2]
 800050c:	4613      	mov	r3, r2
 800050e:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000510:	88f8      	ldrh	r0, [r7, #6]
 8000512:	88b9      	ldrh	r1, [r7, #4]
 8000514:	887a      	ldrh	r2, [r7, #2]
 8000516:	883c      	ldrh	r4, [r7, #0]
 8000518:	8b3b      	ldrh	r3, [r7, #24]
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	4623      	mov	r3, r4
 800051e:	f001 fec1 	bl	80022a4 <ST7735_FillRectangle>
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	bd90      	pop	{r4, r7, pc}

0800052a <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
 8000530:	4603      	mov	r3, r0
 8000532:	80fb      	strh	r3, [r7, #6]
 8000534:	460b      	mov	r3, r1
 8000536:	80bb      	strh	r3, [r7, #4]
 8000538:	4613      	mov	r3, r2
 800053a:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 800053c:	887a      	ldrh	r2, [r7, #2]
 800053e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff ffc0 	bl	80004cc <drawPixel>
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b089      	sub	sp, #36	; 0x24
 8000558:	af00      	add	r7, sp, #0
 800055a:	4604      	mov	r4, r0
 800055c:	4608      	mov	r0, r1
 800055e:	4611      	mov	r1, r2
 8000560:	461a      	mov	r2, r3
 8000562:	4623      	mov	r3, r4
 8000564:	80fb      	strh	r3, [r7, #6]
 8000566:	4603      	mov	r3, r0
 8000568:	80bb      	strh	r3, [r7, #4]
 800056a:	460b      	mov	r3, r1
 800056c:	807b      	strh	r3, [r7, #2]
 800056e:	4613      	mov	r3, r2
 8000570:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000572:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000576:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000580:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000584:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000588:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800058c:	1acb      	subs	r3, r1, r3
 800058e:	2b00      	cmp	r3, #0
 8000590:	bfb8      	it	lt
 8000592:	425b      	neglt	r3, r3
 8000594:	429a      	cmp	r2, r3
 8000596:	bfcc      	ite	gt
 8000598:	2301      	movgt	r3, #1
 800059a:	2300      	movle	r3, #0
 800059c:	b2db      	uxtb	r3, r3
 800059e:	837b      	strh	r3, [r7, #26]
    if (steep) {
 80005a0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00b      	beq.n	80005c0 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	833b      	strh	r3, [r7, #24]
 80005ac:	88bb      	ldrh	r3, [r7, #4]
 80005ae:	80fb      	strh	r3, [r7, #6]
 80005b0:	8b3b      	ldrh	r3, [r7, #24]
 80005b2:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 80005b4:	887b      	ldrh	r3, [r7, #2]
 80005b6:	82fb      	strh	r3, [r7, #22]
 80005b8:	883b      	ldrh	r3, [r7, #0]
 80005ba:	807b      	strh	r3, [r7, #2]
 80005bc:	8afb      	ldrh	r3, [r7, #22]
 80005be:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 80005c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80005c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	dd0b      	ble.n	80005e4 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 80005cc:	88fb      	ldrh	r3, [r7, #6]
 80005ce:	82bb      	strh	r3, [r7, #20]
 80005d0:	887b      	ldrh	r3, [r7, #2]
 80005d2:	80fb      	strh	r3, [r7, #6]
 80005d4:	8abb      	ldrh	r3, [r7, #20]
 80005d6:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 80005d8:	88bb      	ldrh	r3, [r7, #4]
 80005da:	827b      	strh	r3, [r7, #18]
 80005dc:	883b      	ldrh	r3, [r7, #0]
 80005de:	80bb      	strh	r3, [r7, #4]
 80005e0:	8a7b      	ldrh	r3, [r7, #18]
 80005e2:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80005e4:	887a      	ldrh	r2, [r7, #2]
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 80005ee:	f9b7 2000 	ldrsh.w	r2, [r7]
 80005f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	bfb8      	it	lt
 80005fc:	425b      	neglt	r3, r3
 80005fe:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 8000600:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000604:	0fda      	lsrs	r2, r3, #31
 8000606:	4413      	add	r3, r2
 8000608:	105b      	asrs	r3, r3, #1
 800060a:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 800060c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000610:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000614:	429a      	cmp	r2, r3
 8000616:	da02      	bge.n	800061e <writeLine+0xca>
        ystep = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	83bb      	strh	r3, [r7, #28]
 800061c:	e031      	b.n	8000682 <writeLine+0x12e>
    } else {
        ystep = -1;
 800061e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000622:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 8000624:	e02d      	b.n	8000682 <writeLine+0x12e>
        if (steep) {
 8000626:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d008      	beq.n	8000640 <writeLine+0xec>
            writePixel(y0, x0, color);
 800062e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000630:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000634:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff76 	bl	800052a <writePixel>
 800063e:	e007      	b.n	8000650 <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 8000640:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000642:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ff6d 	bl	800052a <writePixel>
        }
        err -= dy;
 8000650:	8bfa      	ldrh	r2, [r7, #30]
 8000652:	89fb      	ldrh	r3, [r7, #14]
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	b29b      	uxth	r3, r3
 8000658:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 800065a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800065e:	2b00      	cmp	r3, #0
 8000660:	da09      	bge.n	8000676 <writeLine+0x122>
            y0 += ystep;
 8000662:	88ba      	ldrh	r2, [r7, #4]
 8000664:	8bbb      	ldrh	r3, [r7, #28]
 8000666:	4413      	add	r3, r2
 8000668:	b29b      	uxth	r3, r3
 800066a:	80bb      	strh	r3, [r7, #4]
            err += dx;
 800066c:	8bfa      	ldrh	r2, [r7, #30]
 800066e:	8a3b      	ldrh	r3, [r7, #16]
 8000670:	4413      	add	r3, r2
 8000672:	b29b      	uxth	r3, r3
 8000674:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 8000676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800067a:	b29b      	uxth	r3, r3
 800067c:	3301      	adds	r3, #1
 800067e:	b29b      	uxth	r3, r3
 8000680:	80fb      	strh	r3, [r7, #6]
 8000682:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000686:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800068a:	429a      	cmp	r2, r3
 800068c:	ddcb      	ble.n	8000626 <writeLine+0xd2>
        }
    }
}
 800068e:	bf00      	nop
 8000690:	bf00      	nop
 8000692:	3724      	adds	r7, #36	; 0x24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd90      	pop	{r4, r7, pc}

08000698 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b085      	sub	sp, #20
 800069c:	af02      	add	r7, sp, #8
 800069e:	4604      	mov	r4, r0
 80006a0:	4608      	mov	r0, r1
 80006a2:	4611      	mov	r1, r2
 80006a4:	461a      	mov	r2, r3
 80006a6:	4623      	mov	r3, r4
 80006a8:	80fb      	strh	r3, [r7, #6]
 80006aa:	4603      	mov	r3, r0
 80006ac:	80bb      	strh	r3, [r7, #4]
 80006ae:	460b      	mov	r3, r1
 80006b0:	807b      	strh	r3, [r7, #2]
 80006b2:	4613      	mov	r3, r2
 80006b4:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 80006b6:	88ba      	ldrh	r2, [r7, #4]
 80006b8:	887b      	ldrh	r3, [r7, #2]
 80006ba:	4413      	add	r3, r2
 80006bc:	b29b      	uxth	r3, r3
 80006be:	3b01      	subs	r3, #1
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	b21c      	sxth	r4, r3
 80006c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006c8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80006cc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80006d0:	883b      	ldrh	r3, [r7, #0]
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	4623      	mov	r3, r4
 80006d6:	f7ff ff3d 	bl	8000554 <writeLine>
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd90      	pop	{r4, r7, pc}

080006e2 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80006e2:	b590      	push	{r4, r7, lr}
 80006e4:	b085      	sub	sp, #20
 80006e6:	af02      	add	r7, sp, #8
 80006e8:	4604      	mov	r4, r0
 80006ea:	4608      	mov	r0, r1
 80006ec:	4611      	mov	r1, r2
 80006ee:	461a      	mov	r2, r3
 80006f0:	4623      	mov	r3, r4
 80006f2:	80fb      	strh	r3, [r7, #6]
 80006f4:	4603      	mov	r3, r0
 80006f6:	80bb      	strh	r3, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	807b      	strh	r3, [r7, #2]
 80006fc:	4613      	mov	r3, r2
 80006fe:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 8000700:	88fa      	ldrh	r2, [r7, #6]
 8000702:	887b      	ldrh	r3, [r7, #2]
 8000704:	4413      	add	r3, r2
 8000706:	b29b      	uxth	r3, r3
 8000708:	3b01      	subs	r3, #1
 800070a:	b29b      	uxth	r3, r3
 800070c:	b21a      	sxth	r2, r3
 800070e:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000712:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000716:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800071a:	883b      	ldrh	r3, [r7, #0]
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	4623      	mov	r3, r4
 8000720:	f7ff ff18 	bl	8000554 <writeLine>
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	bd90      	pop	{r4, r7, pc}

0800072c <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b087      	sub	sp, #28
 8000730:	af02      	add	r7, sp, #8
 8000732:	4604      	mov	r4, r0
 8000734:	4608      	mov	r0, r1
 8000736:	4611      	mov	r1, r2
 8000738:	461a      	mov	r2, r3
 800073a:	4623      	mov	r3, r4
 800073c:	80fb      	strh	r3, [r7, #6]
 800073e:	4603      	mov	r3, r0
 8000740:	80bb      	strh	r3, [r7, #4]
 8000742:	460b      	mov	r3, r1
 8000744:	807b      	strh	r3, [r7, #2]
 8000746:	4613      	mov	r3, r2
 8000748:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 800074a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800074e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000752:	429a      	cmp	r2, r3
 8000754:	d11a      	bne.n	800078c <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8000756:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800075a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800075e:	429a      	cmp	r2, r3
 8000760:	dd05      	ble.n	800076e <drawLine+0x42>
 8000762:	88bb      	ldrh	r3, [r7, #4]
 8000764:	81bb      	strh	r3, [r7, #12]
 8000766:	883b      	ldrh	r3, [r7, #0]
 8000768:	80bb      	strh	r3, [r7, #4]
 800076a:	89bb      	ldrh	r3, [r7, #12]
 800076c:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 800076e:	883a      	ldrh	r2, [r7, #0]
 8000770:	88bb      	ldrh	r3, [r7, #4]
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	b29b      	uxth	r3, r3
 8000776:	3301      	adds	r3, #1
 8000778:	b29b      	uxth	r3, r3
 800077a:	b21a      	sxth	r2, r3
 800077c:	8c3b      	ldrh	r3, [r7, #32]
 800077e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000782:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000786:	f7ff ff87 	bl	8000698 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 800078a:	e02d      	b.n	80007e8 <drawLine+0xbc>
    } else if(y0 == y1){
 800078c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000790:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000794:	429a      	cmp	r2, r3
 8000796:	d11a      	bne.n	80007ce <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8000798:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800079c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	dd05      	ble.n	80007b0 <drawLine+0x84>
 80007a4:	88fb      	ldrh	r3, [r7, #6]
 80007a6:	81fb      	strh	r3, [r7, #14]
 80007a8:	887b      	ldrh	r3, [r7, #2]
 80007aa:	80fb      	strh	r3, [r7, #6]
 80007ac:	89fb      	ldrh	r3, [r7, #14]
 80007ae:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80007b0:	887a      	ldrh	r2, [r7, #2]
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	3301      	adds	r3, #1
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	b21a      	sxth	r2, r3
 80007be:	8c3b      	ldrh	r3, [r7, #32]
 80007c0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007c4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80007c8:	f7ff ff8b 	bl	80006e2 <drawFastHLine>
}
 80007cc:	e00c      	b.n	80007e8 <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 80007ce:	f9b7 4000 	ldrsh.w	r4, [r7]
 80007d2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80007d6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007da:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80007de:	8c3b      	ldrh	r3, [r7, #32]
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	4623      	mov	r3, r4
 80007e4:	f7ff feb6 	bl	8000554 <writeLine>
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd90      	pop	{r4, r7, pc}

080007f0 <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b087      	sub	sp, #28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4604      	mov	r4, r0
 80007f8:	4608      	mov	r0, r1
 80007fa:	4611      	mov	r1, r2
 80007fc:	461a      	mov	r2, r3
 80007fe:	4623      	mov	r3, r4
 8000800:	80fb      	strh	r3, [r7, #6]
 8000802:	4603      	mov	r3, r0
 8000804:	80bb      	strh	r3, [r7, #4]
 8000806:	460b      	mov	r3, r1
 8000808:	807b      	strh	r3, [r7, #2]
 800080a:	4613      	mov	r3, r2
 800080c:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 800080e:	887b      	ldrh	r3, [r7, #2]
 8000810:	f1c3 0301 	rsb	r3, r3, #1
 8000814:	b29b      	uxth	r3, r3
 8000816:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000818:	2301      	movs	r3, #1
 800081a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800081c:	887b      	ldrh	r3, [r7, #2]
 800081e:	461a      	mov	r2, r3
 8000820:	03d2      	lsls	r2, r2, #15
 8000822:	1ad3      	subs	r3, r2, r3
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	b29b      	uxth	r3, r3
 8000828:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 800082e:	887b      	ldrh	r3, [r7, #2]
 8000830:	81fb      	strh	r3, [r7, #14]

    writePixel(x0  , y0+r, color);
 8000832:	88ba      	ldrh	r2, [r7, #4]
 8000834:	887b      	ldrh	r3, [r7, #2]
 8000836:	4413      	add	r3, r2
 8000838:	b29b      	uxth	r3, r3
 800083a:	b219      	sxth	r1, r3
 800083c:	883a      	ldrh	r2, [r7, #0]
 800083e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fe71 	bl	800052a <writePixel>
    writePixel(x0  , y0-r, color);
 8000848:	88ba      	ldrh	r2, [r7, #4]
 800084a:	887b      	ldrh	r3, [r7, #2]
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	b29b      	uxth	r3, r3
 8000850:	b219      	sxth	r1, r3
 8000852:	883a      	ldrh	r2, [r7, #0]
 8000854:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fe66 	bl	800052a <writePixel>
    writePixel(x0+r, y0  , color);
 800085e:	88fa      	ldrh	r2, [r7, #6]
 8000860:	887b      	ldrh	r3, [r7, #2]
 8000862:	4413      	add	r3, r2
 8000864:	b29b      	uxth	r3, r3
 8000866:	b21b      	sxth	r3, r3
 8000868:	883a      	ldrh	r2, [r7, #0]
 800086a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fe5b 	bl	800052a <writePixel>
    writePixel(x0-r, y0  , color);
 8000874:	88fa      	ldrh	r2, [r7, #6]
 8000876:	887b      	ldrh	r3, [r7, #2]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	b29b      	uxth	r3, r3
 800087c:	b21b      	sxth	r3, r3
 800087e:	883a      	ldrh	r2, [r7, #0]
 8000880:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fe50 	bl	800052a <writePixel>

    while (x<y) {
 800088a:	e091      	b.n	80009b0 <drawCircle+0x1c0>
        if (f >= 0) {
 800088c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000890:	2b00      	cmp	r3, #0
 8000892:	db0e      	blt.n	80008b2 <drawCircle+0xc2>
            y--;
 8000894:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000898:	b29b      	uxth	r3, r3
 800089a:	3b01      	subs	r3, #1
 800089c:	b29b      	uxth	r3, r3
 800089e:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80008a0:	8a7b      	ldrh	r3, [r7, #18]
 80008a2:	3302      	adds	r3, #2
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80008a8:	8afa      	ldrh	r2, [r7, #22]
 80008aa:	8a7b      	ldrh	r3, [r7, #18]
 80008ac:	4413      	add	r3, r2
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80008b2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	3301      	adds	r3, #1
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80008be:	8abb      	ldrh	r3, [r7, #20]
 80008c0:	3302      	adds	r3, #2
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80008c6:	8afa      	ldrh	r2, [r7, #22]
 80008c8:	8abb      	ldrh	r3, [r7, #20]
 80008ca:	4413      	add	r3, r2
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	82fb      	strh	r3, [r7, #22]

        writePixel(x0 + x, y0 + y, color);
 80008d0:	88fa      	ldrh	r2, [r7, #6]
 80008d2:	8a3b      	ldrh	r3, [r7, #16]
 80008d4:	4413      	add	r3, r2
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	b218      	sxth	r0, r3
 80008da:	88ba      	ldrh	r2, [r7, #4]
 80008dc:	89fb      	ldrh	r3, [r7, #14]
 80008de:	4413      	add	r3, r2
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	883a      	ldrh	r2, [r7, #0]
 80008e6:	4619      	mov	r1, r3
 80008e8:	f7ff fe1f 	bl	800052a <writePixel>
        writePixel(x0 - x, y0 + y, color);
 80008ec:	88fa      	ldrh	r2, [r7, #6]
 80008ee:	8a3b      	ldrh	r3, [r7, #16]
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	b218      	sxth	r0, r3
 80008f6:	88ba      	ldrh	r2, [r7, #4]
 80008f8:	89fb      	ldrh	r3, [r7, #14]
 80008fa:	4413      	add	r3, r2
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	b21b      	sxth	r3, r3
 8000900:	883a      	ldrh	r2, [r7, #0]
 8000902:	4619      	mov	r1, r3
 8000904:	f7ff fe11 	bl	800052a <writePixel>
        writePixel(x0 + x, y0 - y, color);
 8000908:	88fa      	ldrh	r2, [r7, #6]
 800090a:	8a3b      	ldrh	r3, [r7, #16]
 800090c:	4413      	add	r3, r2
 800090e:	b29b      	uxth	r3, r3
 8000910:	b218      	sxth	r0, r3
 8000912:	88ba      	ldrh	r2, [r7, #4]
 8000914:	89fb      	ldrh	r3, [r7, #14]
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	b29b      	uxth	r3, r3
 800091a:	b21b      	sxth	r3, r3
 800091c:	883a      	ldrh	r2, [r7, #0]
 800091e:	4619      	mov	r1, r3
 8000920:	f7ff fe03 	bl	800052a <writePixel>
        writePixel(x0 - x, y0 - y, color);
 8000924:	88fa      	ldrh	r2, [r7, #6]
 8000926:	8a3b      	ldrh	r3, [r7, #16]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	b29b      	uxth	r3, r3
 800092c:	b218      	sxth	r0, r3
 800092e:	88ba      	ldrh	r2, [r7, #4]
 8000930:	89fb      	ldrh	r3, [r7, #14]
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	b29b      	uxth	r3, r3
 8000936:	b21b      	sxth	r3, r3
 8000938:	883a      	ldrh	r2, [r7, #0]
 800093a:	4619      	mov	r1, r3
 800093c:	f7ff fdf5 	bl	800052a <writePixel>
        writePixel(x0 + y, y0 + x, color);
 8000940:	88fa      	ldrh	r2, [r7, #6]
 8000942:	89fb      	ldrh	r3, [r7, #14]
 8000944:	4413      	add	r3, r2
 8000946:	b29b      	uxth	r3, r3
 8000948:	b218      	sxth	r0, r3
 800094a:	88ba      	ldrh	r2, [r7, #4]
 800094c:	8a3b      	ldrh	r3, [r7, #16]
 800094e:	4413      	add	r3, r2
 8000950:	b29b      	uxth	r3, r3
 8000952:	b21b      	sxth	r3, r3
 8000954:	883a      	ldrh	r2, [r7, #0]
 8000956:	4619      	mov	r1, r3
 8000958:	f7ff fde7 	bl	800052a <writePixel>
        writePixel(x0 - y, y0 + x, color);
 800095c:	88fa      	ldrh	r2, [r7, #6]
 800095e:	89fb      	ldrh	r3, [r7, #14]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	b29b      	uxth	r3, r3
 8000964:	b218      	sxth	r0, r3
 8000966:	88ba      	ldrh	r2, [r7, #4]
 8000968:	8a3b      	ldrh	r3, [r7, #16]
 800096a:	4413      	add	r3, r2
 800096c:	b29b      	uxth	r3, r3
 800096e:	b21b      	sxth	r3, r3
 8000970:	883a      	ldrh	r2, [r7, #0]
 8000972:	4619      	mov	r1, r3
 8000974:	f7ff fdd9 	bl	800052a <writePixel>
        writePixel(x0 + y, y0 - x, color);
 8000978:	88fa      	ldrh	r2, [r7, #6]
 800097a:	89fb      	ldrh	r3, [r7, #14]
 800097c:	4413      	add	r3, r2
 800097e:	b29b      	uxth	r3, r3
 8000980:	b218      	sxth	r0, r3
 8000982:	88ba      	ldrh	r2, [r7, #4]
 8000984:	8a3b      	ldrh	r3, [r7, #16]
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	b29b      	uxth	r3, r3
 800098a:	b21b      	sxth	r3, r3
 800098c:	883a      	ldrh	r2, [r7, #0]
 800098e:	4619      	mov	r1, r3
 8000990:	f7ff fdcb 	bl	800052a <writePixel>
        writePixel(x0 - y, y0 - x, color);
 8000994:	88fa      	ldrh	r2, [r7, #6]
 8000996:	89fb      	ldrh	r3, [r7, #14]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	b29b      	uxth	r3, r3
 800099c:	b218      	sxth	r0, r3
 800099e:	88ba      	ldrh	r2, [r7, #4]
 80009a0:	8a3b      	ldrh	r3, [r7, #16]
 80009a2:	1ad3      	subs	r3, r2, r3
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	883a      	ldrh	r2, [r7, #0]
 80009aa:	4619      	mov	r1, r3
 80009ac:	f7ff fdbd 	bl	800052a <writePixel>
    while (x<y) {
 80009b0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80009b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	f6ff af67 	blt.w	800088c <drawCircle+0x9c>
    }
}
 80009be:	bf00      	nop
 80009c0:	bf00      	nop
 80009c2:	371c      	adds	r7, #28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd90      	pop	{r4, r7, pc}

080009c8 <drawCircleHelper>:

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b087      	sub	sp, #28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4604      	mov	r4, r0
 80009d0:	4608      	mov	r0, r1
 80009d2:	4611      	mov	r1, r2
 80009d4:	461a      	mov	r2, r3
 80009d6:	4623      	mov	r3, r4
 80009d8:	80fb      	strh	r3, [r7, #6]
 80009da:	4603      	mov	r3, r0
 80009dc:	80bb      	strh	r3, [r7, #4]
 80009de:	460b      	mov	r3, r1
 80009e0:	807b      	strh	r3, [r7, #2]
 80009e2:	4613      	mov	r3, r2
 80009e4:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 80009e6:	887b      	ldrh	r3, [r7, #2]
 80009e8:	f1c3 0301 	rsb	r3, r3, #1
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80009f4:	887b      	ldrh	r3, [r7, #2]
 80009f6:	461a      	mov	r2, r3
 80009f8:	03d2      	lsls	r2, r2, #15
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8000a06:	887b      	ldrh	r3, [r7, #2]
 8000a08:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8000a0a:	e0a5      	b.n	8000b58 <drawCircleHelper+0x190>
        if (f >= 0) {
 8000a0c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db0e      	blt.n	8000a32 <drawCircleHelper+0x6a>
            y--;
 8000a14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000a20:	8a7b      	ldrh	r3, [r7, #18]
 8000a22:	3302      	adds	r3, #2
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8000a28:	8afa      	ldrh	r2, [r7, #22]
 8000a2a:	8a7b      	ldrh	r3, [r7, #18]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000a32:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	3301      	adds	r3, #1
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000a3e:	8abb      	ldrh	r3, [r7, #20]
 8000a40:	3302      	adds	r3, #2
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8000a46:	8afa      	ldrh	r2, [r7, #22]
 8000a48:	8abb      	ldrh	r3, [r7, #20]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 8000a50:	787b      	ldrb	r3, [r7, #1]
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d01b      	beq.n	8000a92 <drawCircleHelper+0xca>
            writePixel(x0 + x, y0 + y, color);
 8000a5a:	88fa      	ldrh	r2, [r7, #6]
 8000a5c:	8a3b      	ldrh	r3, [r7, #16]
 8000a5e:	4413      	add	r3, r2
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	b218      	sxth	r0, r3
 8000a64:	88ba      	ldrh	r2, [r7, #4]
 8000a66:	89fb      	ldrh	r3, [r7, #14]
 8000a68:	4413      	add	r3, r2
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	b21b      	sxth	r3, r3
 8000a6e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000a70:	4619      	mov	r1, r3
 8000a72:	f7ff fd5a 	bl	800052a <writePixel>
            writePixel(x0 + y, y0 + x, color);
 8000a76:	88fa      	ldrh	r2, [r7, #6]
 8000a78:	89fb      	ldrh	r3, [r7, #14]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	b218      	sxth	r0, r3
 8000a80:	88ba      	ldrh	r2, [r7, #4]
 8000a82:	8a3b      	ldrh	r3, [r7, #16]
 8000a84:	4413      	add	r3, r2
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	b21b      	sxth	r3, r3
 8000a8a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f7ff fd4c 	bl	800052a <writePixel>
        }
        if (cornername & 0x2) {
 8000a92:	787b      	ldrb	r3, [r7, #1]
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d01b      	beq.n	8000ad4 <drawCircleHelper+0x10c>
            writePixel(x0 + x, y0 - y, color);
 8000a9c:	88fa      	ldrh	r2, [r7, #6]
 8000a9e:	8a3b      	ldrh	r3, [r7, #16]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	b218      	sxth	r0, r3
 8000aa6:	88ba      	ldrh	r2, [r7, #4]
 8000aa8:	89fb      	ldrh	r3, [r7, #14]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	b21b      	sxth	r3, r3
 8000ab0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f7ff fd39 	bl	800052a <writePixel>
            writePixel(x0 + y, y0 - x, color);
 8000ab8:	88fa      	ldrh	r2, [r7, #6]
 8000aba:	89fb      	ldrh	r3, [r7, #14]
 8000abc:	4413      	add	r3, r2
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	b218      	sxth	r0, r3
 8000ac2:	88ba      	ldrh	r2, [r7, #4]
 8000ac4:	8a3b      	ldrh	r3, [r7, #16]
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f7ff fd2b 	bl	800052a <writePixel>
        }
        if (cornername & 0x8) {
 8000ad4:	787b      	ldrb	r3, [r7, #1]
 8000ad6:	f003 0308 	and.w	r3, r3, #8
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d01b      	beq.n	8000b16 <drawCircleHelper+0x14e>
            writePixel(x0 - y, y0 + x, color);
 8000ade:	88fa      	ldrh	r2, [r7, #6]
 8000ae0:	89fb      	ldrh	r3, [r7, #14]
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b218      	sxth	r0, r3
 8000ae8:	88ba      	ldrh	r2, [r7, #4]
 8000aea:	8a3b      	ldrh	r3, [r7, #16]
 8000aec:	4413      	add	r3, r2
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	b21b      	sxth	r3, r3
 8000af2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000af4:	4619      	mov	r1, r3
 8000af6:	f7ff fd18 	bl	800052a <writePixel>
            writePixel(x0 - x, y0 + y, color);
 8000afa:	88fa      	ldrh	r2, [r7, #6]
 8000afc:	8a3b      	ldrh	r3, [r7, #16]
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	b218      	sxth	r0, r3
 8000b04:	88ba      	ldrh	r2, [r7, #4]
 8000b06:	89fb      	ldrh	r3, [r7, #14]
 8000b08:	4413      	add	r3, r2
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	b21b      	sxth	r3, r3
 8000b0e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000b10:	4619      	mov	r1, r3
 8000b12:	f7ff fd0a 	bl	800052a <writePixel>
        }
        if (cornername & 0x1) {
 8000b16:	787b      	ldrb	r3, [r7, #1]
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d01b      	beq.n	8000b58 <drawCircleHelper+0x190>
            writePixel(x0 - y, y0 - x, color);
 8000b20:	88fa      	ldrh	r2, [r7, #6]
 8000b22:	89fb      	ldrh	r3, [r7, #14]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	b218      	sxth	r0, r3
 8000b2a:	88ba      	ldrh	r2, [r7, #4]
 8000b2c:	8a3b      	ldrh	r3, [r7, #16]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	b21b      	sxth	r3, r3
 8000b34:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000b36:	4619      	mov	r1, r3
 8000b38:	f7ff fcf7 	bl	800052a <writePixel>
            writePixel(x0 - x, y0 - y, color);
 8000b3c:	88fa      	ldrh	r2, [r7, #6]
 8000b3e:	8a3b      	ldrh	r3, [r7, #16]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	b218      	sxth	r0, r3
 8000b46:	88ba      	ldrh	r2, [r7, #4]
 8000b48:	89fb      	ldrh	r3, [r7, #14]
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	b21b      	sxth	r3, r3
 8000b50:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000b52:	4619      	mov	r1, r3
 8000b54:	f7ff fce9 	bl	800052a <writePixel>
    while (x<y) {
 8000b58:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000b5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	f6ff af53 	blt.w	8000a0c <drawCircleHelper+0x44>
        }
    }
}
 8000b66:	bf00      	nop
 8000b68:	bf00      	nop
 8000b6a:	371c      	adds	r7, #28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd90      	pop	{r4, r7, pc}

08000b70 <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b087      	sub	sp, #28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4604      	mov	r4, r0
 8000b78:	4608      	mov	r0, r1
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4623      	mov	r3, r4
 8000b80:	80fb      	strh	r3, [r7, #6]
 8000b82:	4603      	mov	r3, r0
 8000b84:	80bb      	strh	r3, [r7, #4]
 8000b86:	460b      	mov	r3, r1
 8000b88:	807b      	strh	r3, [r7, #2]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 8000b8e:	887b      	ldrh	r3, [r7, #2]
 8000b90:	f1c3 0301 	rsb	r3, r3, #1
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8000b9c:	887b      	ldrh	r3, [r7, #2]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	03d2      	lsls	r2, r2, #15
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8000bae:	887b      	ldrh	r3, [r7, #2]
 8000bb0:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 8000bb2:	8a3b      	ldrh	r3, [r7, #16]
 8000bb4:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 8000bb6:	89fb      	ldrh	r3, [r7, #14]
 8000bb8:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 8000bba:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	853b      	strh	r3, [r7, #40]	; 0x28

    while(x < y) {
 8000bc6:	e095      	b.n	8000cf4 <fillCircleHelper+0x184>
        if (f >= 0) {
 8000bc8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	db0e      	blt.n	8000bee <fillCircleHelper+0x7e>
            y--;
 8000bd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000bdc:	8a7b      	ldrh	r3, [r7, #18]
 8000bde:	3302      	adds	r3, #2
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8000be4:	8afa      	ldrh	r2, [r7, #22]
 8000be6:	8a7b      	ldrh	r3, [r7, #18]
 8000be8:	4413      	add	r3, r2
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000bee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000bfa:	8abb      	ldrh	r3, [r7, #20]
 8000bfc:	3302      	adds	r3, #2
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8000c02:	8afa      	ldrh	r2, [r7, #22]
 8000c04:	8abb      	ldrh	r3, [r7, #20]
 8000c06:	4413      	add	r3, r2
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8000c0c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c10:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	db31      	blt.n	8000c7c <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8000c18:	787b      	ldrb	r3, [r7, #1]
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d013      	beq.n	8000c4a <fillCircleHelper+0xda>
 8000c22:	88fa      	ldrh	r2, [r7, #6]
 8000c24:	8a3b      	ldrh	r3, [r7, #16]
 8000c26:	4413      	add	r3, r2
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	b218      	sxth	r0, r3
 8000c2c:	88ba      	ldrh	r2, [r7, #4]
 8000c2e:	89fb      	ldrh	r3, [r7, #14]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	b219      	sxth	r1, r3
 8000c36:	89fb      	ldrh	r3, [r7, #14]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c3e:	4413      	add	r3, r2
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	b21a      	sxth	r2, r3
 8000c44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c46:	f7ff fd27 	bl	8000698 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8000c4a:	787b      	ldrb	r3, [r7, #1]
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d013      	beq.n	8000c7c <fillCircleHelper+0x10c>
 8000c54:	88fa      	ldrh	r2, [r7, #6]
 8000c56:	8a3b      	ldrh	r3, [r7, #16]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	b218      	sxth	r0, r3
 8000c5e:	88ba      	ldrh	r2, [r7, #4]
 8000c60:	89fb      	ldrh	r3, [r7, #14]
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	b219      	sxth	r1, r3
 8000c68:	89fb      	ldrh	r3, [r7, #14]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c70:	4413      	add	r3, r2
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	b21a      	sxth	r2, r3
 8000c76:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c78:	f7ff fd0e 	bl	8000698 <drawFastVLine>
        }
        if(y != py) {
 8000c7c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c80:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d033      	beq.n	8000cf0 <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8000c88:	787b      	ldrb	r3, [r7, #1]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d013      	beq.n	8000cba <fillCircleHelper+0x14a>
 8000c92:	88fa      	ldrh	r2, [r7, #6]
 8000c94:	897b      	ldrh	r3, [r7, #10]
 8000c96:	4413      	add	r3, r2
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	b218      	sxth	r0, r3
 8000c9c:	88ba      	ldrh	r2, [r7, #4]
 8000c9e:	89bb      	ldrh	r3, [r7, #12]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	b219      	sxth	r1, r3
 8000ca6:	89bb      	ldrh	r3, [r7, #12]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000cae:	4413      	add	r3, r2
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	b21a      	sxth	r2, r3
 8000cb4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000cb6:	f7ff fcef 	bl	8000698 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 8000cba:	787b      	ldrb	r3, [r7, #1]
 8000cbc:	f003 0302 	and.w	r3, r3, #2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d013      	beq.n	8000cec <fillCircleHelper+0x17c>
 8000cc4:	88fa      	ldrh	r2, [r7, #6]
 8000cc6:	897b      	ldrh	r3, [r7, #10]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	b218      	sxth	r0, r3
 8000cce:	88ba      	ldrh	r2, [r7, #4]
 8000cd0:	89bb      	ldrh	r3, [r7, #12]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	b219      	sxth	r1, r3
 8000cd8:	89bb      	ldrh	r3, [r7, #12]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ce0:	4413      	add	r3, r2
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	b21a      	sxth	r2, r3
 8000ce6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000ce8:	f7ff fcd6 	bl	8000698 <drawFastVLine>
            py = y;
 8000cec:	89fb      	ldrh	r3, [r7, #14]
 8000cee:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 8000cf0:	8a3b      	ldrh	r3, [r7, #16]
 8000cf2:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8000cf4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000cf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	f6ff af63 	blt.w	8000bc8 <fillCircleHelper+0x58>
    }
}
 8000d02:	bf00      	nop
 8000d04:	bf00      	nop
 8000d06:	371c      	adds	r7, #28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd90      	pop	{r4, r7, pc}

08000d0c <fillCircle>:

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af02      	add	r7, sp, #8
 8000d12:	4604      	mov	r4, r0
 8000d14:	4608      	mov	r0, r1
 8000d16:	4611      	mov	r1, r2
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4623      	mov	r3, r4
 8000d1c:	80fb      	strh	r3, [r7, #6]
 8000d1e:	4603      	mov	r3, r0
 8000d20:	80bb      	strh	r3, [r7, #4]
 8000d22:	460b      	mov	r3, r1
 8000d24:	807b      	strh	r3, [r7, #2]
 8000d26:	4613      	mov	r3, r2
 8000d28:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8000d2a:	88ba      	ldrh	r2, [r7, #4]
 8000d2c:	887b      	ldrh	r3, [r7, #2]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	b219      	sxth	r1, r3
 8000d34:	887b      	ldrh	r3, [r7, #2]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	b21a      	sxth	r2, r3
 8000d40:	883b      	ldrh	r3, [r7, #0]
 8000d42:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d46:	f7ff fca7 	bl	8000698 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8000d4a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d4e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d52:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d56:	883b      	ldrh	r3, [r7, #0]
 8000d58:	9301      	str	r3, [sp, #4]
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2303      	movs	r3, #3
 8000d60:	f7ff ff06 	bl	8000b70 <fillCircleHelper>
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd90      	pop	{r4, r7, pc}

08000d6c <drawRect>:



void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	4608      	mov	r0, r1
 8000d76:	4611      	mov	r1, r2
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4623      	mov	r3, r4
 8000d7c:	80fb      	strh	r3, [r7, #6]
 8000d7e:	4603      	mov	r3, r0
 8000d80:	80bb      	strh	r3, [r7, #4]
 8000d82:	460b      	mov	r3, r1
 8000d84:	807b      	strh	r3, [r7, #2]
 8000d86:	4613      	mov	r3, r2
 8000d88:	803b      	strh	r3, [r7, #0]
    drawFastHLine(x, y, w, color);
 8000d8a:	8b3b      	ldrh	r3, [r7, #24]
 8000d8c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d90:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d94:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d98:	f7ff fca3 	bl	80006e2 <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 8000d9c:	88ba      	ldrh	r2, [r7, #4]
 8000d9e:	883b      	ldrh	r3, [r7, #0]
 8000da0:	4413      	add	r3, r2
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	3b01      	subs	r3, #1
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	b219      	sxth	r1, r3
 8000daa:	8b3b      	ldrh	r3, [r7, #24]
 8000dac:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000db0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000db4:	f7ff fc95 	bl	80006e2 <drawFastHLine>
    drawFastVLine(x, y, h, color);
 8000db8:	8b3b      	ldrh	r3, [r7, #24]
 8000dba:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000dbe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000dc2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000dc6:	f7ff fc67 	bl	8000698 <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 8000dca:	88fa      	ldrh	r2, [r7, #6]
 8000dcc:	887b      	ldrh	r3, [r7, #2]
 8000dce:	4413      	add	r3, r2
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	b218      	sxth	r0, r3
 8000dd8:	8b3b      	ldrh	r3, [r7, #24]
 8000dda:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000dde:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000de2:	f7ff fc59 	bl	8000698 <drawFastVLine>
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd90      	pop	{r4, r7, pc}

08000dee <drawRoundRect>:

void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000dee:	b590      	push	{r4, r7, lr}
 8000df0:	b087      	sub	sp, #28
 8000df2:	af02      	add	r7, sp, #8
 8000df4:	4604      	mov	r4, r0
 8000df6:	4608      	mov	r0, r1
 8000df8:	4611      	mov	r1, r2
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4623      	mov	r3, r4
 8000dfe:	80fb      	strh	r3, [r7, #6]
 8000e00:	4603      	mov	r3, r0
 8000e02:	80bb      	strh	r3, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8000e0c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000e10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e14:	4293      	cmp	r3, r2
 8000e16:	bfa8      	it	ge
 8000e18:	4613      	movge	r3, r2
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	0fda      	lsrs	r2, r3, #31
 8000e1e:	4413      	add	r3, r2
 8000e20:	105b      	asrs	r3, r3, #1
 8000e22:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8000e24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000e28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	dd01      	ble.n	8000e34 <drawRoundRect+0x46>
 8000e30:	89fb      	ldrh	r3, [r7, #14]
 8000e32:	843b      	strh	r3, [r7, #32]
    // smarter version
    drawFastHLine(x+r  , y    , w-2*r, color); // Top
 8000e34:	88fa      	ldrh	r2, [r7, #6]
 8000e36:	8c3b      	ldrh	r3, [r7, #32]
 8000e38:	4413      	add	r3, r2
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	b218      	sxth	r0, r3
 8000e3e:	887a      	ldrh	r2, [r7, #2]
 8000e40:	8c3b      	ldrh	r3, [r7, #32]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	b21a      	sxth	r2, r3
 8000e4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e4e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e52:	f7ff fc46 	bl	80006e2 <drawFastHLine>
    drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8000e56:	88fa      	ldrh	r2, [r7, #6]
 8000e58:	8c3b      	ldrh	r3, [r7, #32]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	b218      	sxth	r0, r3
 8000e60:	88ba      	ldrh	r2, [r7, #4]
 8000e62:	883b      	ldrh	r3, [r7, #0]
 8000e64:	4413      	add	r3, r2
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	b219      	sxth	r1, r3
 8000e6e:	887a      	ldrh	r2, [r7, #2]
 8000e70:	8c3b      	ldrh	r3, [r7, #32]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e7e:	f7ff fc30 	bl	80006e2 <drawFastHLine>
    drawFastVLine(x    , y+r  , h-2*r, color); // Left
 8000e82:	88ba      	ldrh	r2, [r7, #4]
 8000e84:	8c3b      	ldrh	r3, [r7, #32]
 8000e86:	4413      	add	r3, r2
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	b219      	sxth	r1, r3
 8000e8c:	883a      	ldrh	r2, [r7, #0]
 8000e8e:	8c3b      	ldrh	r3, [r7, #32]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	b21a      	sxth	r2, r3
 8000e9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e9c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000ea0:	f7ff fbfa 	bl	8000698 <drawFastVLine>
    drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 8000ea4:	88fa      	ldrh	r2, [r7, #6]
 8000ea6:	887b      	ldrh	r3, [r7, #2]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	3b01      	subs	r3, #1
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	b218      	sxth	r0, r3
 8000eb2:	88ba      	ldrh	r2, [r7, #4]
 8000eb4:	8c3b      	ldrh	r3, [r7, #32]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	b219      	sxth	r1, r3
 8000ebc:	883a      	ldrh	r2, [r7, #0]
 8000ebe:	8c3b      	ldrh	r3, [r7, #32]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	b21a      	sxth	r2, r3
 8000eca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ecc:	f7ff fbe4 	bl	8000698 <drawFastVLine>
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8000ed0:	88fa      	ldrh	r2, [r7, #6]
 8000ed2:	8c3b      	ldrh	r3, [r7, #32]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	b218      	sxth	r0, r3
 8000eda:	88ba      	ldrh	r2, [r7, #4]
 8000edc:	8c3b      	ldrh	r3, [r7, #32]
 8000ede:	4413      	add	r3, r2
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	b219      	sxth	r1, r3
 8000ee4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000ee8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2301      	movs	r3, #1
 8000eee:	f7ff fd6b 	bl	80009c8 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8000ef2:	88fa      	ldrh	r2, [r7, #6]
 8000ef4:	887b      	ldrh	r3, [r7, #2]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	8c3b      	ldrh	r3, [r7, #32]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	3b01      	subs	r3, #1
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	b218      	sxth	r0, r3
 8000f06:	88ba      	ldrh	r2, [r7, #4]
 8000f08:	8c3b      	ldrh	r3, [r7, #32]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	b219      	sxth	r1, r3
 8000f10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000f14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2302      	movs	r3, #2
 8000f1a:	f7ff fd55 	bl	80009c8 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8000f1e:	88fa      	ldrh	r2, [r7, #6]
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	4413      	add	r3, r2
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	8c3b      	ldrh	r3, [r7, #32]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	b218      	sxth	r0, r3
 8000f32:	88ba      	ldrh	r2, [r7, #4]
 8000f34:	883b      	ldrh	r3, [r7, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	8c3b      	ldrh	r3, [r7, #32]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	3b01      	subs	r3, #1
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	b219      	sxth	r1, r3
 8000f46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000f4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	2304      	movs	r3, #4
 8000f50:	f7ff fd3a 	bl	80009c8 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8000f54:	88fa      	ldrh	r2, [r7, #6]
 8000f56:	8c3b      	ldrh	r3, [r7, #32]
 8000f58:	4413      	add	r3, r2
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	b218      	sxth	r0, r3
 8000f5e:	88ba      	ldrh	r2, [r7, #4]
 8000f60:	883b      	ldrh	r3, [r7, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	8c3b      	ldrh	r3, [r7, #32]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	b219      	sxth	r1, r3
 8000f72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2308      	movs	r3, #8
 8000f7c:	f7ff fd24 	bl	80009c8 <drawCircleHelper>
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd90      	pop	{r4, r7, pc}

08000f88 <fillRoundRect>:


void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	4604      	mov	r4, r0
 8000f90:	4608      	mov	r0, r1
 8000f92:	4611      	mov	r1, r2
 8000f94:	461a      	mov	r2, r3
 8000f96:	4623      	mov	r3, r4
 8000f98:	80fb      	strh	r3, [r7, #6]
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80bb      	strh	r3, [r7, #4]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	807b      	strh	r3, [r7, #2]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8000fa6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000faa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	bfa8      	it	ge
 8000fb2:	4613      	movge	r3, r2
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	0fda      	lsrs	r2, r3, #31
 8000fb8:	4413      	add	r3, r2
 8000fba:	105b      	asrs	r3, r3, #1
 8000fbc:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8000fbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000fc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	dd01      	ble.n	8000fce <fillRoundRect+0x46>
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	843b      	strh	r3, [r7, #32]
    // smarter version
    fillRect(x+r, y, w-2*r, h, color);
 8000fce:	88fa      	ldrh	r2, [r7, #6]
 8000fd0:	8c3b      	ldrh	r3, [r7, #32]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	b218      	sxth	r0, r3
 8000fd8:	887a      	ldrh	r2, [r7, #2]
 8000fda:	8c3b      	ldrh	r3, [r7, #32]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000fea:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000fee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	f7ff fa7d 	bl	80004f2 <fillRect>
    // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8000ff8:	88fa      	ldrh	r2, [r7, #6]
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	8c3b      	ldrh	r3, [r7, #32]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	b29b      	uxth	r3, r3
 8001006:	3b01      	subs	r3, #1
 8001008:	b29b      	uxth	r3, r3
 800100a:	b218      	sxth	r0, r3
 800100c:	88ba      	ldrh	r2, [r7, #4]
 800100e:	8c3b      	ldrh	r3, [r7, #32]
 8001010:	4413      	add	r3, r2
 8001012:	b29b      	uxth	r3, r3
 8001014:	b219      	sxth	r1, r3
 8001016:	883a      	ldrh	r2, [r7, #0]
 8001018:	8c3b      	ldrh	r3, [r7, #32]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	b29b      	uxth	r3, r3
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	b29b      	uxth	r3, r3
 8001022:	3b01      	subs	r3, #1
 8001024:	b29b      	uxth	r3, r3
 8001026:	b21b      	sxth	r3, r3
 8001028:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800102c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800102e:	9201      	str	r2, [sp, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	4622      	mov	r2, r4
 8001036:	f7ff fd9b 	bl	8000b70 <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 800103a:	88fa      	ldrh	r2, [r7, #6]
 800103c:	8c3b      	ldrh	r3, [r7, #32]
 800103e:	4413      	add	r3, r2
 8001040:	b29b      	uxth	r3, r3
 8001042:	b218      	sxth	r0, r3
 8001044:	88ba      	ldrh	r2, [r7, #4]
 8001046:	8c3b      	ldrh	r3, [r7, #32]
 8001048:	4413      	add	r3, r2
 800104a:	b29b      	uxth	r3, r3
 800104c:	b219      	sxth	r1, r3
 800104e:	883a      	ldrh	r2, [r7, #0]
 8001050:	8c3b      	ldrh	r3, [r7, #32]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	b29b      	uxth	r3, r3
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	b29b      	uxth	r3, r3
 800105a:	3b01      	subs	r3, #1
 800105c:	b29b      	uxth	r3, r3
 800105e:	b21b      	sxth	r3, r3
 8001060:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8001064:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001066:	9201      	str	r2, [sp, #4]
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2302      	movs	r3, #2
 800106c:	4622      	mov	r2, r4
 800106e:	f7ff fd7f 	bl	8000b70 <fillCircleHelper>
}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	bd90      	pop	{r4, r7, pc}

0800107a <drawTriangle>:


void drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800107a:	b590      	push	{r4, r7, lr}
 800107c:	b085      	sub	sp, #20
 800107e:	af02      	add	r7, sp, #8
 8001080:	4604      	mov	r4, r0
 8001082:	4608      	mov	r0, r1
 8001084:	4611      	mov	r1, r2
 8001086:	461a      	mov	r2, r3
 8001088:	4623      	mov	r3, r4
 800108a:	80fb      	strh	r3, [r7, #6]
 800108c:	4603      	mov	r3, r0
 800108e:	80bb      	strh	r3, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]
 8001094:	4613      	mov	r3, r2
 8001096:	803b      	strh	r3, [r7, #0]
    drawLine(x0, y0, x1, y1, color);
 8001098:	f9b7 4000 	ldrsh.w	r4, [r7]
 800109c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80010a0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80010a4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80010a8:	8c3b      	ldrh	r3, [r7, #32]
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	4623      	mov	r3, r4
 80010ae:	f7ff fb3d 	bl	800072c <drawLine>
    drawLine(x1, y1, x2, y2, color);
 80010b2:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 80010b6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80010ba:	f9b7 1000 	ldrsh.w	r1, [r7]
 80010be:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80010c2:	8c3b      	ldrh	r3, [r7, #32]
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	4623      	mov	r3, r4
 80010c8:	f7ff fb30 	bl	800072c <drawLine>
    drawLine(x2, y2, x0, y0, color);
 80010cc:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80010d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010d4:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 80010d8:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80010dc:	8c3b      	ldrh	r3, [r7, #32]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	4623      	mov	r3, r4
 80010e2:	f7ff fb23 	bl	800072c <drawLine>
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd90      	pop	{r4, r7, pc}

080010ee <fillTriangle>:


void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80010ee:	b590      	push	{r4, r7, lr}
 80010f0:	b08f      	sub	sp, #60	; 0x3c
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4604      	mov	r4, r0
 80010f6:	4608      	mov	r0, r1
 80010f8:	4611      	mov	r1, r2
 80010fa:	461a      	mov	r2, r3
 80010fc:	4623      	mov	r3, r4
 80010fe:	80fb      	strh	r3, [r7, #6]
 8001100:	4603      	mov	r3, r0
 8001102:	80bb      	strh	r3, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 800110c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001110:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001114:	429a      	cmp	r2, r3
 8001116:	dd0b      	ble.n	8001130 <fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8001118:	88bb      	ldrh	r3, [r7, #4]
 800111a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800111c:	883b      	ldrh	r3, [r7, #0]
 800111e:	80bb      	strh	r3, [r7, #4]
 8001120:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001122:	803b      	strh	r3, [r7, #0]
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001128:	887b      	ldrh	r3, [r7, #2]
 800112a:	80fb      	strh	r3, [r7, #6]
 800112c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800112e:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8001130:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001134:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001138:	429a      	cmp	r2, r3
 800113a:	dd0f      	ble.n	800115c <fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 800113c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001140:	847b      	strh	r3, [r7, #34]	; 0x22
 8001142:	883b      	ldrh	r3, [r7, #0]
 8001144:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001148:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800114a:	803b      	strh	r3, [r7, #0]
 800114c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001150:	843b      	strh	r3, [r7, #32]
 8001152:	887b      	ldrh	r3, [r7, #2]
 8001154:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001158:	8c3b      	ldrh	r3, [r7, #32]
 800115a:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 800115c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001160:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001164:	429a      	cmp	r2, r3
 8001166:	dd0b      	ble.n	8001180 <fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8001168:	88bb      	ldrh	r3, [r7, #4]
 800116a:	83fb      	strh	r3, [r7, #30]
 800116c:	883b      	ldrh	r3, [r7, #0]
 800116e:	80bb      	strh	r3, [r7, #4]
 8001170:	8bfb      	ldrh	r3, [r7, #30]
 8001172:	803b      	strh	r3, [r7, #0]
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	83bb      	strh	r3, [r7, #28]
 8001178:	887b      	ldrh	r3, [r7, #2]
 800117a:	80fb      	strh	r3, [r7, #6]
 800117c:	8bbb      	ldrh	r3, [r7, #28]
 800117e:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8001180:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001184:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001188:	429a      	cmp	r2, r3
 800118a:	d137      	bne.n	80011fc <fillTriangle+0x10e>
        a = b = x0;
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001190:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001192:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8001194:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001198:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800119c:	429a      	cmp	r2, r3
 800119e:	da02      	bge.n	80011a6 <fillTriangle+0xb8>
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80011a4:	e007      	b.n	80011b6 <fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 80011a6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80011aa:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80011ae:	429a      	cmp	r2, r3
 80011b0:	dd01      	ble.n	80011b6 <fillTriangle+0xc8>
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 80011b6:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80011ba:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80011be:	429a      	cmp	r2, r3
 80011c0:	da03      	bge.n	80011ca <fillTriangle+0xdc>
 80011c2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80011c6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80011c8:	e008      	b.n	80011dc <fillTriangle+0xee>
        else if(x2 > b) b = x2;
 80011ca:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80011ce:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80011d2:	429a      	cmp	r2, r3
 80011d4:	dd02      	ble.n	80011dc <fillTriangle+0xee>
 80011d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80011da:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y0, b-a+1, color);
 80011dc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80011de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	3301      	adds	r3, #1
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80011ee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80011f2:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80011f6:	f7ff fa74 	bl	80006e2 <drawFastHLine>
        return;
 80011fa:	e0d4      	b.n	80013a6 <fillTriangle+0x2b8>
    }

    int16_t
    dx01 = x1 - x0,
 80011fc:	887a      	ldrh	r2, [r7, #2]
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	b29b      	uxth	r3, r3
 8001204:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8001206:	883a      	ldrh	r2, [r7, #0]
 8001208:	88bb      	ldrh	r3, [r7, #4]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	b29b      	uxth	r3, r3
 800120e:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8001210:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	b29b      	uxth	r3, r3
 800121a:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 800121c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001220:	88bb      	ldrh	r3, [r7, #4]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	b29b      	uxth	r3, r3
 8001226:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8001228:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	b29b      	uxth	r3, r3
 8001232:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8001234:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001238:	883b      	ldrh	r3, [r7, #0]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	b29b      	uxth	r3, r3
 800123e:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8001248:	f9b7 2000 	ldrsh.w	r2, [r7]
 800124c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001250:	429a      	cmp	r2, r3
 8001252:	d102      	bne.n	800125a <fillTriangle+0x16c>
 8001254:	883b      	ldrh	r3, [r7, #0]
 8001256:	863b      	strh	r3, [r7, #48]	; 0x30
 8001258:	e003      	b.n	8001262 <fillTriangle+0x174>
    else         last = y1-1; // Skip it
 800125a:	883b      	ldrh	r3, [r7, #0]
 800125c:	3b01      	subs	r3, #1
 800125e:	b29b      	uxth	r3, r3
 8001260:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8001262:	88bb      	ldrh	r3, [r7, #4]
 8001264:	867b      	strh	r3, [r7, #50]	; 0x32
 8001266:	e03e      	b.n	80012e6 <fillTriangle+0x1f8>
        a   = x0 + sa / dy01;
 8001268:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800126c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800126e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001272:	b29a      	uxth	r2, r3
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	4413      	add	r3, r2
 8001278:	b29b      	uxth	r3, r3
 800127a:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 800127c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001282:	fb92 f3f3 	sdiv	r3, r2, r3
 8001286:	b29a      	uxth	r2, r3
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	4413      	add	r3, r2
 800128c:	b29b      	uxth	r3, r3
 800128e:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8001290:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001296:	4413      	add	r3, r2
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 800129a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800129e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012a0:	4413      	add	r3, r2
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80012a4:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80012a8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dd05      	ble.n	80012bc <fillTriangle+0x1ce>
 80012b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80012b2:	81bb      	strh	r3, [r7, #12]
 80012b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012b6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80012b8:	89bb      	ldrh	r3, [r7, #12]
 80012ba:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y, b-a+1, color);
 80012bc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80012be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	3301      	adds	r3, #1
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80012ce:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80012d2:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80012d6:	f7ff fa04 	bl	80006e2 <drawFastHLine>
    for(y=y0; y<=last; y++) {
 80012da:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80012de:	b29b      	uxth	r3, r3
 80012e0:	3301      	adds	r3, #1
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	867b      	strh	r3, [r7, #50]	; 0x32
 80012e6:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80012ea:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80012ee:	429a      	cmp	r2, r3
 80012f0:	ddba      	ble.n	8001268 <fillTriangle+0x17a>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 80012f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012f6:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80012fa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80012fe:	1a8a      	subs	r2, r1, r2
 8001300:	fb02 f303 	mul.w	r3, r2, r3
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8001306:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800130a:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800130e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001312:	1a8a      	subs	r2, r1, r2
 8001314:	fb02 f303 	mul.w	r3, r2, r3
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 800131a:	e03e      	b.n	800139a <fillTriangle+0x2ac>
        a   = x1 + sa / dy12;
 800131c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001322:	fb92 f3f3 	sdiv	r3, r2, r3
 8001326:	b29a      	uxth	r2, r3
 8001328:	887b      	ldrh	r3, [r7, #2]
 800132a:	4413      	add	r3, r2
 800132c:	b29b      	uxth	r3, r3
 800132e:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8001330:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001336:	fb92 f3f3 	sdiv	r3, r2, r3
 800133a:	b29a      	uxth	r2, r3
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	4413      	add	r3, r2
 8001340:	b29b      	uxth	r3, r3
 8001342:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8001344:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800134a:	4413      	add	r3, r2
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 800134e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001354:	4413      	add	r3, r2
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8001358:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800135c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001360:	429a      	cmp	r2, r3
 8001362:	dd05      	ble.n	8001370 <fillTriangle+0x282>
 8001364:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001366:	81fb      	strh	r3, [r7, #14]
 8001368:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800136a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800136c:	89fb      	ldrh	r3, [r7, #14]
 800136e:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y, b-a+1, color);
 8001370:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001372:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	b29b      	uxth	r3, r3
 8001378:	3301      	adds	r3, #1
 800137a:	b29b      	uxth	r3, r3
 800137c:	b21a      	sxth	r2, r3
 800137e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001382:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8001386:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 800138a:	f7ff f9aa 	bl	80006e2 <drawFastHLine>
    for(; y<=y2; y++) {
 800138e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001392:	b29b      	uxth	r3, r3
 8001394:	3301      	adds	r3, #1
 8001396:	b29b      	uxth	r3, r3
 8001398:	867b      	strh	r3, [r7, #50]	; 0x32
 800139a:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800139e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80013a2:	429a      	cmp	r2, r3
 80013a4:	ddba      	ble.n	800131c <fillTriangle+0x22e>
    }
}
 80013a6:	373c      	adds	r7, #60	; 0x3c
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd90      	pop	{r4, r7, pc}

080013ac <fillScreen>:

void fillScreen(uint16_t color) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	4603      	mov	r3, r0
 80013b4:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <fillScreen+0x2c>)
 80013b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <fillScreen+0x30>)
 80013be:	f9b3 1000 	ldrsh.w	r1, [r3]
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	460b      	mov	r3, r1
 80013c8:	2100      	movs	r1, #0
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff f891 	bl	80004f2 <fillRect>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000038 	.word	0x20000038
 80013dc:	2000003c 	.word	0x2000003c

080013e0 <testLines>:



void testLines(uint16_t color)
{
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b08b      	sub	sp, #44	; 0x2c
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	4603      	mov	r3, r0
 80013e8:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 80013ea:	4b7c      	ldr	r3, [pc, #496]	; (80015dc <testLines+0x1fc>)
 80013ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f0:	617b      	str	r3, [r7, #20]
                  h = _height;
 80013f2:	4b7b      	ldr	r3, [pc, #492]	; (80015e0 <testLines+0x200>)
 80013f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f8:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f7ff ffd6 	bl	80013ac <fillScreen>

    x1 = y1 = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	3b01      	subs	r3, #1
 800140c:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
 8001412:	e00f      	b.n	8001434 <testLines+0x54>
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	b218      	sxth	r0, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	b219      	sxth	r1, r3
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	b21a      	sxth	r2, r3
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	b21c      	sxth	r4, r3
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	4623      	mov	r3, r4
 800142a:	f7ff f97f 	bl	800072c <drawLine>
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3306      	adds	r3, #6
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	429a      	cmp	r2, r3
 800143a:	dbeb      	blt.n	8001414 <testLines+0x34>
    x2    = w - 1;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	3b01      	subs	r3, #1
 8001440:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	e00f      	b.n	8001468 <testLines+0x88>
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	b218      	sxth	r0, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	b219      	sxth	r1, r3
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	b21a      	sxth	r2, r3
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	b21c      	sxth	r4, r3
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	4623      	mov	r3, r4
 800145e:	f7ff f965 	bl	800072c <drawLine>
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	3306      	adds	r3, #6
 8001466:	61bb      	str	r3, [r7, #24]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	429a      	cmp	r2, r3
 800146e:	dbeb      	blt.n	8001448 <testLines+0x68>

    fillScreen(BLACK);
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff ff9b 	bl	80013ac <fillScreen>

    x1    = w - 1;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3b01      	subs	r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	3b01      	subs	r3, #1
 8001484:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
 800148a:	e00f      	b.n	80014ac <testLines+0xcc>
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	b218      	sxth	r0, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	b219      	sxth	r1, r3
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	b21a      	sxth	r2, r3
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	b21c      	sxth	r4, r3
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	4623      	mov	r3, r4
 80014a2:	f7ff f943 	bl	800072c <drawLine>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3306      	adds	r3, #6
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	69fa      	ldr	r2, [r7, #28]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	dbeb      	blt.n	800148c <testLines+0xac>
    x2    = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
 80014bc:	e00f      	b.n	80014de <testLines+0xfe>
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	b218      	sxth	r0, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	b219      	sxth	r1, r3
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	b21c      	sxth	r4, r3
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	4623      	mov	r3, r4
 80014d4:	f7ff f92a 	bl	800072c <drawLine>
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	3306      	adds	r3, #6
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dbeb      	blt.n	80014be <testLines+0xde>

    fillScreen(BLACK);
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff ff60 	bl	80013ac <fillScreen>

    x1    = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
 80014fe:	e00f      	b.n	8001520 <testLines+0x140>
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	b218      	sxth	r0, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	b219      	sxth	r1, r3
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	b21a      	sxth	r2, r3
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	b21c      	sxth	r4, r3
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	4623      	mov	r3, r4
 8001516:	f7ff f909 	bl	800072c <drawLine>
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3306      	adds	r3, #6
 800151e:	61fb      	str	r3, [r7, #28]
 8001520:	69fa      	ldr	r2, [r7, #28]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	429a      	cmp	r2, r3
 8001526:	dbeb      	blt.n	8001500 <testLines+0x120>
    x2    = w - 1;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	3b01      	subs	r3, #1
 800152c:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	e00f      	b.n	8001554 <testLines+0x174>
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	b218      	sxth	r0, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	b219      	sxth	r1, r3
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	b21a      	sxth	r2, r3
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	b21c      	sxth	r4, r3
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	4623      	mov	r3, r4
 800154a:	f7ff f8ef 	bl	800072c <drawLine>
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	3306      	adds	r3, #6
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	429a      	cmp	r2, r3
 800155a:	dbeb      	blt.n	8001534 <testLines+0x154>

    fillScreen(BLACK);
 800155c:	2000      	movs	r0, #0
 800155e:	f7ff ff25 	bl	80013ac <fillScreen>

    x1    = w - 1;
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3b01      	subs	r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	3b01      	subs	r3, #1
 800156c:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	e00f      	b.n	8001598 <testLines+0x1b8>
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	b218      	sxth	r0, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	b219      	sxth	r1, r3
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	b21a      	sxth	r2, r3
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	b21c      	sxth	r4, r3
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	4623      	mov	r3, r4
 800158e:	f7ff f8cd 	bl	800072c <drawLine>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3306      	adds	r3, #6
 8001596:	61fb      	str	r3, [r7, #28]
 8001598:	69fa      	ldr	r2, [r7, #28]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	429a      	cmp	r2, r3
 800159e:	dbeb      	blt.n	8001578 <testLines+0x198>
    x2    = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 80015a4:	2300      	movs	r3, #0
 80015a6:	61bb      	str	r3, [r7, #24]
 80015a8:	e00f      	b.n	80015ca <testLines+0x1ea>
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	b218      	sxth	r0, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	b219      	sxth	r1, r3
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	b21c      	sxth	r4, r3
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	4623      	mov	r3, r4
 80015c0:	f7ff f8b4 	bl	800072c <drawLine>
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	3306      	adds	r3, #6
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	dbeb      	blt.n	80015aa <testLines+0x1ca>

}
 80015d2:	bf00      	nop
 80015d4:	bf00      	nop
 80015d6:	3724      	adds	r7, #36	; 0x24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd90      	pop	{r4, r7, pc}
 80015dc:	20000038 	.word	0x20000038
 80015e0:	2000003c 	.word	0x2000003c

080015e4 <testFastLines>:

void testFastLines(uint16_t color1, uint16_t color2)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	460a      	mov	r2, r1
 80015ee:	80fb      	strh	r3, [r7, #6]
 80015f0:	4613      	mov	r3, r2
 80015f2:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <testFastLines+0x78>)
 80015f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <testFastLines+0x7c>)
 80015fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001602:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 8001604:	2000      	movs	r0, #0
 8001606:	f7ff fed1 	bl	80013ac <fillScreen>
    for (y = 0; y < h; y += 5) drawFastHLine(0, y, w, color1);
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	e00a      	b.n	8001626 <testFastLines+0x42>
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	b219      	sxth	r1, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	b21a      	sxth	r2, r3
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	2000      	movs	r0, #0
 800161c:	f7ff f861 	bl	80006e2 <drawFastHLine>
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	3305      	adds	r3, #5
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	429a      	cmp	r2, r3
 800162c:	dbf0      	blt.n	8001610 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) drawFastVLine(x, 0, h, color2);
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	e00a      	b.n	800164a <testFastLines+0x66>
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	b218      	sxth	r0, r3
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	b21a      	sxth	r2, r3
 800163c:	88bb      	ldrh	r3, [r7, #4]
 800163e:	2100      	movs	r1, #0
 8001640:	f7ff f82a 	bl	8000698 <drawFastVLine>
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3305      	adds	r3, #5
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	429a      	cmp	r2, r3
 8001650:	dbf0      	blt.n	8001634 <testFastLines+0x50>
}
 8001652:	bf00      	nop
 8001654:	bf00      	nop
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000038 	.word	0x20000038
 8001660:	2000003c 	.word	0x2000003c

08001664 <testRects>:

void testRects(uint16_t color)
{
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b08b      	sub	sp, #44	; 0x2c
 8001668:	af02      	add	r7, sp, #8
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]
    int           n, i, i2,
                  cx = _width  / 2,
 800166e:	4b24      	ldr	r3, [pc, #144]	; (8001700 <testRects+0x9c>)
 8001670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001674:	0fda      	lsrs	r2, r3, #31
 8001676:	4413      	add	r3, r2
 8001678:	105b      	asrs	r3, r3, #1
 800167a:	b21b      	sxth	r3, r3
 800167c:	61bb      	str	r3, [r7, #24]
                  cy = _height / 2;
 800167e:	4b21      	ldr	r3, [pc, #132]	; (8001704 <testRects+0xa0>)
 8001680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001684:	0fda      	lsrs	r2, r3, #31
 8001686:	4413      	add	r3, r2
 8001688:	105b      	asrs	r3, r3, #1
 800168a:	b21b      	sxth	r3, r3
 800168c:	617b      	str	r3, [r7, #20]

    fillScreen(BLACK);
 800168e:	2000      	movs	r0, #0
 8001690:	f7ff fe8c 	bl	80013ac <fillScreen>
    n     = min(_width, _height);
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <testRects+0xa0>)
 8001696:	f9b3 2000 	ldrsh.w	r2, [r3]
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <testRects+0x9c>)
 800169c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a0:	4293      	cmp	r3, r2
 80016a2:	bfa8      	it	ge
 80016a4:	4613      	movge	r3, r2
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	613b      	str	r3, [r7, #16]
    for (i = 2; i < n; i += 6) {
 80016aa:	2302      	movs	r3, #2
 80016ac:	61fb      	str	r3, [r7, #28]
 80016ae:	e01e      	b.n	80016ee <testRects+0x8a>
        i2 = i / 2;
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	0fda      	lsrs	r2, r3, #31
 80016b4:	4413      	add	r3, r2
 80016b6:	105b      	asrs	r3, r3, #1
 80016b8:	60fb      	str	r3, [r7, #12]
        drawRect(cx - i2, cy - i2, i, i, color);
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	b29a      	uxth	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	b218      	sxth	r0, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	b219      	sxth	r1, r3
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	b21a      	sxth	r2, r3
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	b21c      	sxth	r4, r3
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	4623      	mov	r3, r4
 80016e4:	f7ff fb42 	bl	8000d6c <drawRect>
    for (i = 2; i < n; i += 6) {
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	3306      	adds	r3, #6
 80016ec:	61fb      	str	r3, [r7, #28]
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	dbdc      	blt.n	80016b0 <testRects+0x4c>
    }

}
 80016f6:	bf00      	nop
 80016f8:	bf00      	nop
 80016fa:	3724      	adds	r7, #36	; 0x24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd90      	pop	{r4, r7, pc}
 8001700:	20000038 	.word	0x20000038
 8001704:	2000003c 	.word	0x2000003c

08001708 <testFilledRects>:

void testFilledRects(uint16_t color1, uint16_t color2)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b08b      	sub	sp, #44	; 0x2c
 800170c:	af02      	add	r7, sp, #8
 800170e:	4603      	mov	r3, r0
 8001710:	460a      	mov	r2, r1
 8001712:	80fb      	strh	r3, [r7, #6]
 8001714:	4613      	mov	r3, r2
 8001716:	80bb      	strh	r3, [r7, #4]
    int           n, i, i2,
                  cx = _width  / 2 - 1,
 8001718:	4b30      	ldr	r3, [pc, #192]	; (80017dc <testFilledRects+0xd4>)
 800171a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171e:	0fda      	lsrs	r2, r3, #31
 8001720:	4413      	add	r3, r2
 8001722:	105b      	asrs	r3, r3, #1
 8001724:	b21b      	sxth	r3, r3
 8001726:	3b01      	subs	r3, #1
 8001728:	61bb      	str	r3, [r7, #24]
                  cy = _height / 2 - 1;
 800172a:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <testFilledRects+0xd8>)
 800172c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001730:	0fda      	lsrs	r2, r3, #31
 8001732:	4413      	add	r3, r2
 8001734:	105b      	asrs	r3, r3, #1
 8001736:	b21b      	sxth	r3, r3
 8001738:	3b01      	subs	r3, #1
 800173a:	617b      	str	r3, [r7, #20]

    fillScreen(BLACK);
 800173c:	2000      	movs	r0, #0
 800173e:	f7ff fe35 	bl	80013ac <fillScreen>
    n = min(_width, _height);
 8001742:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <testFilledRects+0xd8>)
 8001744:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001748:	4b24      	ldr	r3, [pc, #144]	; (80017dc <testFilledRects+0xd4>)
 800174a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800174e:	4293      	cmp	r3, r2
 8001750:	bfa8      	it	ge
 8001752:	4613      	movge	r3, r2
 8001754:	b21b      	sxth	r3, r3
 8001756:	613b      	str	r3, [r7, #16]
    for (i = n; i > 0; i -= 6) {
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	61fb      	str	r3, [r7, #28]
 800175c:	e035      	b.n	80017ca <testFilledRects+0xc2>
        i2    = i / 2;
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	0fda      	lsrs	r2, r3, #31
 8001762:	4413      	add	r3, r2
 8001764:	105b      	asrs	r3, r3, #1
 8001766:	60fb      	str	r3, [r7, #12]

        fillRect(cx - i2, cy - i2, i, i, color1);
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	b29a      	uxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	b29b      	uxth	r3, r3
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	b29b      	uxth	r3, r3
 8001774:	b218      	sxth	r0, r3
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	b29a      	uxth	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	b29b      	uxth	r3, r3
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	b29b      	uxth	r3, r3
 8001782:	b219      	sxth	r1, r3
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	b21a      	sxth	r2, r3
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	b21c      	sxth	r4, r3
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	4623      	mov	r3, r4
 8001792:	f7fe feae 	bl	80004f2 <fillRect>

        drawRect(cx - i2, cy - i2, i, i, color2);
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	b29a      	uxth	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	b29b      	uxth	r3, r3
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	b218      	sxth	r0, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	b219      	sxth	r1, r3
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	b21c      	sxth	r4, r3
 80017ba:	88bb      	ldrh	r3, [r7, #4]
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	4623      	mov	r3, r4
 80017c0:	f7ff fad4 	bl	8000d6c <drawRect>
    for (i = n; i > 0; i -= 6) {
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	3b06      	subs	r3, #6
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	dcc6      	bgt.n	800175e <testFilledRects+0x56>
    }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd90      	pop	{r4, r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000038 	.word	0x20000038
 80017e0:	2000003c 	.word	0x2000003c

080017e4 <testFilledCircles>:

void testFilledCircles(uint8_t radius, uint16_t color)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	460a      	mov	r2, r1
 80017ee:	71fb      	strb	r3, [r7, #7]
 80017f0:	4613      	mov	r3, r2
 80017f2:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <testFilledCircles+0x74>)
 80017f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <testFilledCircles+0x78>)
 80017fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	60fb      	str	r3, [r7, #12]

    fillScreen(BLACK);
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff fdce 	bl	80013ac <fillScreen>
    for (x = radius; x < w; x += r2) {
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	61fb      	str	r3, [r7, #28]
 8001814:	e017      	b.n	8001846 <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	61bb      	str	r3, [r7, #24]
 800181a:	e00c      	b.n	8001836 <testFilledCircles+0x52>
            fillCircle(x, y, radius, color);
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	b218      	sxth	r0, r3
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	b219      	sxth	r1, r3
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	b21a      	sxth	r2, r3
 8001828:	88bb      	ldrh	r3, [r7, #4]
 800182a:	f7ff fa6f 	bl	8000d0c <fillCircle>
        for (y = radius; y < h; y += r2) {
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	429a      	cmp	r2, r3
 800183c:	dbee      	blt.n	800181c <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	69fa      	ldr	r2, [r7, #28]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	429a      	cmp	r2, r3
 800184c:	dbe3      	blt.n	8001816 <testFilledCircles+0x32>
        }
    }

}
 800184e:	bf00      	nop
 8001850:	bf00      	nop
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000038 	.word	0x20000038
 800185c:	2000003c 	.word	0x2000003c

08001860 <testCircles>:

void testCircles(uint8_t radius, uint16_t color)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	460a      	mov	r2, r1
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	4613      	mov	r3, r2
 800186e:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <testCircles+0x7c>)
 8001878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187c:	461a      	mov	r2, r3
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	4413      	add	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 8001884:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <testCircles+0x80>)
 8001886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188a:	461a      	mov	r2, r3
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	4413      	add	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]

    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	e017      	b.n	80018c8 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
 800189c:	e00c      	b.n	80018b8 <testCircles+0x58>
            drawCircle(x, y, radius, color);
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	b218      	sxth	r0, r3
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	b219      	sxth	r1, r3
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	88bb      	ldrh	r3, [r7, #4]
 80018ac:	f7fe ffa0 	bl	80007f0 <drawCircle>
        for (y = 0; y < h; y += r2) {
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	4413      	add	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	429a      	cmp	r2, r3
 80018be:	dbee      	blt.n	800189e <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 80018c0:	69fa      	ldr	r2, [r7, #28]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	4413      	add	r3, r2
 80018c6:	61fb      	str	r3, [r7, #28]
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dbe3      	blt.n	8001898 <testCircles+0x38>
        }
    }

}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000038 	.word	0x20000038
 80018e0:	2000003c 	.word	0x2000003c

080018e4 <testTriangles>:

void testTriangles()
{
 80018e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 80018ea:	4b2e      	ldr	r3, [pc, #184]	; (80019a4 <testTriangles+0xc0>)
 80018ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f0:	0fda      	lsrs	r2, r3, #31
 80018f2:	4413      	add	r3, r2
 80018f4:	105b      	asrs	r3, r3, #1
 80018f6:	b21b      	sxth	r3, r3
 80018f8:	3b01      	subs	r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 80018fc:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <testTriangles+0xc4>)
 80018fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001902:	0fda      	lsrs	r2, r3, #31
 8001904:	4413      	add	r3, r2
 8001906:	105b      	asrs	r3, r3, #1
 8001908:	b21b      	sxth	r3, r3
 800190a:	3b01      	subs	r3, #1
 800190c:	607b      	str	r3, [r7, #4]

    fillScreen(BLACK);
 800190e:	2000      	movs	r0, #0
 8001910:	f7ff fd4c 	bl	80013ac <fillScreen>
    n     = min(cx, cy);
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	4293      	cmp	r3, r2
 800191a:	bfa8      	it	ge
 800191c:	4613      	movge	r3, r2
 800191e:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	e035      	b.n	8001992 <testTriangles+0xae>
        drawTriangle(
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	b29a      	uxth	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	b29b      	uxth	r3, r3
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	b29b      	uxth	r3, r3
        drawTriangle(
 8001936:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	b29a      	uxth	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	b29b      	uxth	r3, r3
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	b29b      	uxth	r3, r3
        drawTriangle(
 8001944:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	b29a      	uxth	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	b29b      	uxth	r3, r3
 800194e:	4413      	add	r3, r2
 8001950:	b29b      	uxth	r3, r3
        drawTriangle(
 8001952:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	b29a      	uxth	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	b29b      	uxth	r3, r3
 800195c:	4413      	add	r3, r2
 800195e:	b29b      	uxth	r3, r3
        drawTriangle(
 8001960:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	b291      	uxth	r1, r2
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	b292      	uxth	r2, r2
 800196a:	440a      	add	r2, r1
 800196c:	b292      	uxth	r2, r2
        drawTriangle(
 800196e:	b212      	sxth	r2, r2
            color565(0, 0, i));
 8001970:	68f9      	ldr	r1, [r7, #12]
 8001972:	10c9      	asrs	r1, r1, #3
 8001974:	b289      	uxth	r1, r1
        drawTriangle(
 8001976:	f001 011f 	and.w	r1, r1, #31
 800197a:	b289      	uxth	r1, r1
 800197c:	9102      	str	r1, [sp, #8]
 800197e:	9201      	str	r2, [sp, #4]
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	4633      	mov	r3, r6
 8001984:	462a      	mov	r2, r5
 8001986:	4621      	mov	r1, r4
 8001988:	f7ff fb77 	bl	800107a <drawTriangle>
    for (i = 0; i < n; i += 5) {
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	3305      	adds	r3, #5
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	dbc5      	blt.n	8001926 <testTriangles+0x42>
    }

}
 800199a:	bf00      	nop
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a4:	20000038 	.word	0x20000038
 80019a8:	2000003c 	.word	0x2000003c

080019ac <testFilledTriangles>:

void testFilledTriangles() {
 80019ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 80019b2:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <testFilledTriangles+0x154>)
 80019b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b8:	0fda      	lsrs	r2, r3, #31
 80019ba:	4413      	add	r3, r2
 80019bc:	105b      	asrs	r3, r3, #1
 80019be:	b21b      	sxth	r3, r3
 80019c0:	3b01      	subs	r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 80019c4:	4b4f      	ldr	r3, [pc, #316]	; (8001b04 <testFilledTriangles+0x158>)
 80019c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ca:	0fda      	lsrs	r2, r3, #31
 80019cc:	4413      	add	r3, r2
 80019ce:	105b      	asrs	r3, r3, #1
 80019d0:	b21b      	sxth	r3, r3
 80019d2:	3b01      	subs	r3, #1
 80019d4:	607b      	str	r3, [r7, #4]

    fillScreen(BLACK);
 80019d6:	2000      	movs	r0, #0
 80019d8:	f7ff fce8 	bl	80013ac <fillScreen>
    for (i = min(cx, cy); i > 10; i -= 5) {
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	4293      	cmp	r3, r2
 80019e2:	bfa8      	it	ge
 80019e4:	4613      	movge	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	e080      	b.n	8001aec <testFilledTriangles+0x140>
    	fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	b21c      	sxth	r4, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	b21d      	sxth	r5, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	b21e      	sxth	r6, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	fa0f fc83 	sxth.w	ip, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	b291      	uxth	r1, r2
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	b292      	uxth	r2, r2
 8001a30:	440a      	add	r2, r1
 8001a32:	b292      	uxth	r2, r2
 8001a34:	b212      	sxth	r2, r2
    	                         color565(0, i, i));
 8001a36:	68f9      	ldr	r1, [r7, #12]
 8001a38:	00c9      	lsls	r1, r1, #3
 8001a3a:	b209      	sxth	r1, r1
 8001a3c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8001a40:	b208      	sxth	r0, r1
 8001a42:	68f9      	ldr	r1, [r7, #12]
 8001a44:	10c9      	asrs	r1, r1, #3
 8001a46:	b209      	sxth	r1, r1
 8001a48:	f001 011f 	and.w	r1, r1, #31
 8001a4c:	b209      	sxth	r1, r1
 8001a4e:	4301      	orrs	r1, r0
 8001a50:	b209      	sxth	r1, r1
    	fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001a52:	b289      	uxth	r1, r1
 8001a54:	9102      	str	r1, [sp, #8]
 8001a56:	9201      	str	r2, [sp, #4]
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	4663      	mov	r3, ip
 8001a5c:	4632      	mov	r2, r6
 8001a5e:	4629      	mov	r1, r5
 8001a60:	4620      	mov	r0, r4
 8001a62:	f7ff fb44 	bl	80010ee <fillTriangle>
    	drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	b21c      	sxth	r4, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	b21d      	sxth	r5, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	b21e      	sxth	r6, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	4413      	add	r3, r2
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	fa0f fc83 	sxth.w	ip, r3
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	b299      	uxth	r1, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	440b      	add	r3, r1
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	b219      	sxth	r1, r3
    	                         color565(i, i, 0));
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001abc:	f023 0307 	bic.w	r3, r3, #7
 8001ac0:	b218      	sxth	r0, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001acc:	b21b      	sxth	r3, r3
 8001ace:	4303      	orrs	r3, r0
 8001ad0:	b21b      	sxth	r3, r3
    	drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	9302      	str	r3, [sp, #8]
 8001ad6:	9101      	str	r1, [sp, #4]
 8001ad8:	9200      	str	r2, [sp, #0]
 8001ada:	4663      	mov	r3, ip
 8001adc:	4632      	mov	r2, r6
 8001ade:	4629      	mov	r1, r5
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	f7ff faca 	bl	800107a <drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	3b05      	subs	r3, #5
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b0a      	cmp	r3, #10
 8001af0:	f73f af7b 	bgt.w	80019ea <testFilledTriangles+0x3e>
    }
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000038 	.word	0x20000038
 8001b04:	2000003c 	.word	0x2000003c

08001b08 <testRoundRects>:

void testRoundRects() {
 8001b08:	b5b0      	push	{r4, r5, r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 8001b0e:	4b33      	ldr	r3, [pc, #204]	; (8001bdc <testRoundRects+0xd4>)
 8001b10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b14:	0fda      	lsrs	r2, r3, #31
 8001b16:	4413      	add	r3, r2
 8001b18:	105b      	asrs	r3, r3, #1
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 8001b20:	4b2f      	ldr	r3, [pc, #188]	; (8001be0 <testRoundRects+0xd8>)
 8001b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b26:	0fda      	lsrs	r2, r3, #31
 8001b28:	4413      	add	r3, r2
 8001b2a:	105b      	asrs	r3, r3, #1
 8001b2c:	b21b      	sxth	r3, r3
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 8001b32:	2000      	movs	r0, #0
 8001b34:	f7ff fc3a 	bl	80013ac <fillScreen>
    w     = min(_width, _height);
 8001b38:	4b29      	ldr	r3, [pc, #164]	; (8001be0 <testRoundRects+0xd8>)
 8001b3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b3e:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <testRoundRects+0xd4>)
 8001b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b44:	4293      	cmp	r3, r2
 8001b46:	bfa8      	it	ge
 8001b48:	4613      	movge	r3, r2
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	60fb      	str	r3, [r7, #12]
    red = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 8001b52:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b5c:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	e031      	b.n	8001bc8 <testRoundRects+0xc0>
        i2 = i / 2;
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	0fda      	lsrs	r2, r3, #31
 8001b68:	4413      	add	r3, r2
 8001b6a:	105b      	asrs	r3, r3, #1
 8001b6c:	607b      	str	r3, [r7, #4]
        red += step;
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4413      	add	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b218      	sxth	r0, r3
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	b219      	sxth	r1, r3
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	b21c      	sxth	r4, r3
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	b21d      	sxth	r5, r3
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	da00      	bge.n	8001ba2 <testRoundRects+0x9a>
 8001ba0:	3307      	adds	r3, #7
 8001ba2:	10db      	asrs	r3, r3, #3
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	021b      	lsls	r3, r3, #8
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001bb0:	f023 0307 	bic.w	r3, r3, #7
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	9301      	str	r3, [sp, #4]
 8001bb8:	9200      	str	r2, [sp, #0]
 8001bba:	462b      	mov	r3, r5
 8001bbc:	4622      	mov	r2, r4
 8001bbe:	f7ff f916 	bl	8000dee <drawRoundRect>
    for (i = 0; i < w; i += 6) {
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3306      	adds	r3, #6
 8001bc6:	61fb      	str	r3, [r7, #28]
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	dbc9      	blt.n	8001b64 <testRoundRects+0x5c>
    }

}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	3720      	adds	r7, #32
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000038 	.word	0x20000038
 8001be0:	2000003c 	.word	0x2000003c

08001be4 <testFilledRoundRects>:

void testFilledRoundRects() {
 8001be4:	b5b0      	push	{r4, r5, r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 8001bea:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <testFilledRoundRects+0xe0>)
 8001bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf0:	0fda      	lsrs	r2, r3, #31
 8001bf2:	4413      	add	r3, r2
 8001bf4:	105b      	asrs	r3, r3, #1
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 8001bfc:	4b32      	ldr	r3, [pc, #200]	; (8001cc8 <testFilledRoundRects+0xe4>)
 8001bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c02:	0fda      	lsrs	r2, r3, #31
 8001c04:	4413      	add	r3, r2
 8001c06:	105b      	asrs	r3, r3, #1
 8001c08:	b21b      	sxth	r3, r3
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f7ff fbcc 	bl	80013ac <fillScreen>
    green = 256;
 8001c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c18:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 8001c1a:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <testFilledRoundRects+0xe4>)
 8001c1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c20:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <testFilledRoundRects+0xe0>)
 8001c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c26:	4293      	cmp	r3, r2
 8001c28:	bfa8      	it	ge
 8001c2a:	4613      	movge	r3, r2
 8001c2c:	b21b      	sxth	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c34:	fb93 f3f2 	sdiv	r3, r3, r2
 8001c38:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <testFilledRoundRects+0xe4>)
 8001c3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c40:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <testFilledRoundRects+0xe0>)
 8001c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c46:	4293      	cmp	r3, r2
 8001c48:	bfa8      	it	ge
 8001c4a:	4613      	movge	r3, r2
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	e02f      	b.n	8001cb2 <testFilledRoundRects+0xce>
        i2 = i / 2;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	0fda      	lsrs	r2, r3, #31
 8001c56:	4413      	add	r3, r2
 8001c58:	105b      	asrs	r3, r3, #1
 8001c5a:	603b      	str	r3, [r7, #0]
        green -= step;
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	613b      	str	r3, [r7, #16]
        fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	b218      	sxth	r0, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	b219      	sxth	r1, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	b21c      	sxth	r4, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	b21d      	sxth	r5, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	da00      	bge.n	8001c90 <testFilledRoundRects+0xac>
 8001c8e:	3307      	adds	r3, #7
 8001c90:	10db      	asrs	r3, r3, #3
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	00d2      	lsls	r2, r2, #3
 8001c98:	b292      	uxth	r2, r2
 8001c9a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8001c9e:	b292      	uxth	r2, r2
 8001ca0:	9201      	str	r2, [sp, #4]
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	462b      	mov	r3, r5
 8001ca6:	4622      	mov	r2, r4
 8001ca8:	f7ff f96e 	bl	8000f88 <fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	3b06      	subs	r3, #6
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2b14      	cmp	r3, #20
 8001cb6:	dccc      	bgt.n	8001c52 <testFilledRoundRects+0x6e>
    }

}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000038 	.word	0x20000038
 8001cc8:	2000003c 	.word	0x2000003c

08001ccc <testFillScreen>:
void testFillScreen()
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
    fillScreen(BLACK);
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f7ff fb6b 	bl	80013ac <fillScreen>
    fillScreen(RED);
 8001cd6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001cda:	f7ff fb67 	bl	80013ac <fillScreen>
    fillScreen(GREEN);
 8001cde:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001ce2:	f7ff fb63 	bl	80013ac <fillScreen>
    fillScreen(BLUE);
 8001ce6:	201f      	movs	r0, #31
 8001ce8:	f7ff fb60 	bl	80013ac <fillScreen>
    fillScreen(BLACK);
 8001cec:	2000      	movs	r0, #0
 8001cee:	f7ff fb5d 	bl	80013ac <fillScreen>
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <testAll>:

void testAll (void)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	af00      	add	r7, sp, #0
	testFillScreen();
 8001cfa:	f7ff ffe7 	bl	8001ccc <testFillScreen>
	testLines(CYAN);
 8001cfe:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001d02:	f7ff fb6d 	bl	80013e0 <testLines>
	testFastLines(RED, BLUE);
 8001d06:	211f      	movs	r1, #31
 8001d08:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001d0c:	f7ff fc6a 	bl	80015e4 <testFastLines>
	testRects(GREEN);
 8001d10:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001d14:	f7ff fca6 	bl	8001664 <testRects>
	testFilledRects(YELLOW, MAGENTA);
 8001d18:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8001d1c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001d20:	f7ff fcf2 	bl	8001708 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 8001d24:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8001d28:	200a      	movs	r0, #10
 8001d2a:	f7ff fd5b 	bl	80017e4 <testFilledCircles>
	testCircles(10, WHITE);
 8001d2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d32:	200a      	movs	r0, #10
 8001d34:	f7ff fd94 	bl	8001860 <testCircles>
	testTriangles();
 8001d38:	f7ff fdd4 	bl	80018e4 <testTriangles>
	testFilledTriangles();
 8001d3c:	f7ff fe36 	bl	80019ac <testFilledTriangles>
	testRoundRects();
 8001d40:	f7ff fee2 	bl	8001b08 <testRoundRects>
	testFilledRoundRects();
 8001d44:	f7ff ff4e 	bl	8001be4 <testFilledRoundRects>
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2140      	movs	r1, #64	; 0x40
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <ST7735_Select+0x14>)
 8001d56:	f001 f8bb 	bl	8002ed0 <HAL_GPIO_WritePin>
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40020400 	.word	0x40020400

08001d64 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	2140      	movs	r1, #64	; 0x40
 8001d6c:	4802      	ldr	r0, [pc, #8]	; (8001d78 <ST7735_Unselect+0x14>)
 8001d6e:	f001 f8af 	bl	8002ed0 <HAL_GPIO_WritePin>
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40020400 	.word	0x40020400

08001d7c <ST7735_Reset>:

void ST7735_Reset()
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8001d80:	2200      	movs	r2, #0
 8001d82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d86:	4807      	ldr	r0, [pc, #28]	; (8001da4 <ST7735_Reset+0x28>)
 8001d88:	f001 f8a2 	bl	8002ed0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001d8c:	2005      	movs	r0, #5
 8001d8e:	f000 fe11 	bl	80029b4 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8001d92:	2201      	movs	r2, #1
 8001d94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <ST7735_Reset+0x28>)
 8001d9a:	f001 f899 	bl	8002ed0 <HAL_GPIO_WritePin>
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40020800 	.word	0x40020800

08001da8 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001db8:	4806      	ldr	r0, [pc, #24]	; (8001dd4 <ST7735_WriteCommand+0x2c>)
 8001dba:	f001 f889 	bl	8002ed0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001dbe:	1df9      	adds	r1, r7, #7
 8001dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <ST7735_WriteCommand+0x30>)
 8001dc8:	f001 fd39 	bl	800383e <HAL_SPI_Transmit>
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40020000 	.word	0x40020000
 8001dd8:	20000040 	.word	0x20000040

08001ddc <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001de6:	2201      	movs	r2, #1
 8001de8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dec:	4807      	ldr	r0, [pc, #28]	; (8001e0c <ST7735_WriteData+0x30>)
 8001dee:	f001 f86f 	bl	8002ed0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4804      	ldr	r0, [pc, #16]	; (8001e10 <ST7735_WriteData+0x34>)
 8001dfe:	f001 fd1e 	bl	800383e <HAL_SPI_Transmit>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	20000040 	.word	0x20000040

08001e14 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001e26:	e034      	b.n	8001e92 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001e32:	7afb      	ldrb	r3, [r7, #11]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ffb7 	bl	8001da8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001e44:	7abb      	ldrb	r3, [r7, #10]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001e4e:	7abb      	ldrb	r3, [r7, #10]
 8001e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e54:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001e56:	7abb      	ldrb	r3, [r7, #10]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001e5c:	7abb      	ldrb	r3, [r7, #10]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ffbb 	bl	8001ddc <ST7735_WriteData>
            addr += numArgs;
 8001e66:	7abb      	ldrb	r3, [r7, #10]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001e6e:	89bb      	ldrh	r3, [r7, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00e      	beq.n	8001e92 <DisplayInit+0x7e>
            ms = *addr++;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001e7e:	89bb      	ldrh	r3, [r7, #12]
 8001e80:	2bff      	cmp	r3, #255	; 0xff
 8001e82:	d102      	bne.n	8001e8a <DisplayInit+0x76>
 8001e84:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e88:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001e8a:	89bb      	ldrh	r3, [r7, #12]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 fd91 	bl	80029b4 <HAL_Delay>
    while(numCommands--) {
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	1e5a      	subs	r2, r3, #1
 8001e96:	73fa      	strb	r2, [r7, #15]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1c5      	bne.n	8001e28 <DisplayInit+0x14>
        }
    }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001ea8:	b590      	push	{r4, r7, lr}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4604      	mov	r4, r0
 8001eb0:	4608      	mov	r0, r1
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4623      	mov	r3, r4
 8001eb8:	71fb      	strb	r3, [r7, #7]
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71bb      	strb	r3, [r7, #6]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	717b      	strb	r3, [r7, #5]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001ec6:	202a      	movs	r0, #42	; 0x2a
 8001ec8:	f7ff ff6e 	bl	8001da8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8001ecc:	2300      	movs	r3, #0
 8001ece:	733b      	strb	r3, [r7, #12]
 8001ed0:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <ST7735_SetAddressWindow+0x88>)
 8001ed2:	781a      	ldrb	r2, [r3, #0]
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	737b      	strb	r3, [r7, #13]
 8001edc:	2300      	movs	r3, #0
 8001ede:	73bb      	strb	r3, [r7, #14]
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <ST7735_SetAddressWindow+0x88>)
 8001ee2:	781a      	ldrb	r2, [r3, #0]
 8001ee4:	797b      	ldrb	r3, [r7, #5]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	2104      	movs	r1, #4
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff ff72 	bl	8001ddc <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001ef8:	202b      	movs	r0, #43	; 0x2b
 8001efa:	f7ff ff55 	bl	8001da8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <ST7735_SetAddressWindow+0x8c>)
 8001f00:	781a      	ldrb	r2, [r3, #0]
 8001f02:	79bb      	ldrb	r3, [r7, #6]
 8001f04:	4413      	add	r3, r2
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <ST7735_SetAddressWindow+0x8c>)
 8001f0c:	781a      	ldrb	r2, [r3, #0]
 8001f0e:	793b      	ldrb	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001f16:	f107 030c 	add.w	r3, r7, #12
 8001f1a:	2104      	movs	r1, #4
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff5d 	bl	8001ddc <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001f22:	202c      	movs	r0, #44	; 0x2c
 8001f24:	f7ff ff40 	bl	8001da8 <ST7735_WriteCommand>
}
 8001f28:	bf00      	nop
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd90      	pop	{r4, r7, pc}
 8001f30:	20000030 	.word	0x20000030
 8001f34:	20000034 	.word	0x20000034

08001f38 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8001f42:	f7ff ff03 	bl	8001d4c <ST7735_Select>
    ST7735_Reset();
 8001f46:	f7ff ff19 	bl	8001d7c <ST7735_Reset>
    DisplayInit(init_cmds1);
 8001f4a:	480c      	ldr	r0, [pc, #48]	; (8001f7c <ST7735_Init+0x44>)
 8001f4c:	f7ff ff62 	bl	8001e14 <DisplayInit>
    DisplayInit(init_cmds2);
 8001f50:	480b      	ldr	r0, [pc, #44]	; (8001f80 <ST7735_Init+0x48>)
 8001f52:	f7ff ff5f 	bl	8001e14 <DisplayInit>
    DisplayInit(init_cmds3);
 8001f56:	480b      	ldr	r0, [pc, #44]	; (8001f84 <ST7735_Init+0x4c>)
 8001f58:	f7ff ff5c 	bl	8001e14 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <ST7735_Init+0x50>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <ST7735_Init+0x54>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f810 	bl	8001f90 <ST7735_SetRotation>
    ST7735_Unselect();
 8001f70:	f7ff fef8 	bl	8001d64 <ST7735_Unselect>

}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	08003ce0 	.word	0x08003ce0
 8001f80:	08003d18 	.word	0x08003d18
 8001f84:	08003d28 	.word	0x08003d28
 8001f88:	20000031 	.word	0x20000031
 8001f8c:	20000035 	.word	0x20000035

08001f90 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4b33      	ldr	r3, [pc, #204]	; (8002074 <ST7735_SetRotation+0xe4>)
 8001fa8:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8001faa:	4b32      	ldr	r3, [pc, #200]	; (8002074 <ST7735_SetRotation+0xe4>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d84e      	bhi.n	8002050 <ST7735_SetRotation+0xc0>
 8001fb2:	a201      	add	r2, pc, #4	; (adr r2, 8001fb8 <ST7735_SetRotation+0x28>)
 8001fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb8:	08001fc9 	.word	0x08001fc9
 8001fbc:	08001feb 	.word	0x08001feb
 8001fc0:	0800200d 	.word	0x0800200d
 8001fc4:	0800202f 	.word	0x0800202f
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8001fc8:	23c0      	movs	r3, #192	; 0xc0
 8001fca:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001fcc:	4b2a      	ldr	r3, [pc, #168]	; (8002078 <ST7735_SetRotation+0xe8>)
 8001fce:	22a0      	movs	r2, #160	; 0xa0
 8001fd0:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001fd2:	4b2a      	ldr	r3, [pc, #168]	; (800207c <ST7735_SetRotation+0xec>)
 8001fd4:	2280      	movs	r2, #128	; 0x80
 8001fd6:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8001fd8:	4b29      	ldr	r3, [pc, #164]	; (8002080 <ST7735_SetRotation+0xf0>)
 8001fda:	781a      	ldrb	r2, [r3, #0]
 8001fdc:	4b29      	ldr	r3, [pc, #164]	; (8002084 <ST7735_SetRotation+0xf4>)
 8001fde:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8001fe0:	4b29      	ldr	r3, [pc, #164]	; (8002088 <ST7735_SetRotation+0xf8>)
 8001fe2:	781a      	ldrb	r2, [r3, #0]
 8001fe4:	4b29      	ldr	r3, [pc, #164]	; (800208c <ST7735_SetRotation+0xfc>)
 8001fe6:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001fe8:	e032      	b.n	8002050 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001fea:	23a0      	movs	r3, #160	; 0xa0
 8001fec:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8001fee:	4b23      	ldr	r3, [pc, #140]	; (800207c <ST7735_SetRotation+0xec>)
 8001ff0:	22a0      	movs	r2, #160	; 0xa0
 8001ff2:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001ff4:	4b20      	ldr	r3, [pc, #128]	; (8002078 <ST7735_SetRotation+0xe8>)
 8001ff6:	2280      	movs	r2, #128	; 0x80
 8001ff8:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001ffa:	4b21      	ldr	r3, [pc, #132]	; (8002080 <ST7735_SetRotation+0xf0>)
 8001ffc:	781a      	ldrb	r2, [r3, #0]
 8001ffe:	4b23      	ldr	r3, [pc, #140]	; (800208c <ST7735_SetRotation+0xfc>)
 8002000:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8002002:	4b21      	ldr	r3, [pc, #132]	; (8002088 <ST7735_SetRotation+0xf8>)
 8002004:	781a      	ldrb	r2, [r3, #0]
 8002006:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <ST7735_SetRotation+0xf4>)
 8002008:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800200a:	e021      	b.n	8002050 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8002010:	4b19      	ldr	r3, [pc, #100]	; (8002078 <ST7735_SetRotation+0xe8>)
 8002012:	22a0      	movs	r2, #160	; 0xa0
 8002014:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8002016:	4b19      	ldr	r3, [pc, #100]	; (800207c <ST7735_SetRotation+0xec>)
 8002018:	2280      	movs	r2, #128	; 0x80
 800201a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 800201c:	4b18      	ldr	r3, [pc, #96]	; (8002080 <ST7735_SetRotation+0xf0>)
 800201e:	781a      	ldrb	r2, [r3, #0]
 8002020:	4b18      	ldr	r3, [pc, #96]	; (8002084 <ST7735_SetRotation+0xf4>)
 8002022:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8002024:	4b18      	ldr	r3, [pc, #96]	; (8002088 <ST7735_SetRotation+0xf8>)
 8002026:	781a      	ldrb	r2, [r3, #0]
 8002028:	4b18      	ldr	r3, [pc, #96]	; (800208c <ST7735_SetRotation+0xfc>)
 800202a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800202c:	e010      	b.n	8002050 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800202e:	2360      	movs	r3, #96	; 0x60
 8002030:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8002032:	4b12      	ldr	r3, [pc, #72]	; (800207c <ST7735_SetRotation+0xec>)
 8002034:	22a0      	movs	r2, #160	; 0xa0
 8002036:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <ST7735_SetRotation+0xe8>)
 800203a:	2280      	movs	r2, #128	; 0x80
 800203c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <ST7735_SetRotation+0xf0>)
 8002040:	781a      	ldrb	r2, [r3, #0]
 8002042:	4b12      	ldr	r3, [pc, #72]	; (800208c <ST7735_SetRotation+0xfc>)
 8002044:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <ST7735_SetRotation+0xf8>)
 8002048:	781a      	ldrb	r2, [r3, #0]
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <ST7735_SetRotation+0xf4>)
 800204c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800204e:	bf00      	nop
  }
  ST7735_Select();
 8002050:	f7ff fe7c 	bl	8001d4c <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8002054:	2036      	movs	r0, #54	; 0x36
 8002056:	f7ff fea7 	bl	8001da8 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800205a:	f107 030f 	add.w	r3, r7, #15
 800205e:	2101      	movs	r1, #1
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff febb 	bl	8001ddc <ST7735_WriteData>
  ST7735_Unselect();
 8002066:	f7ff fe7d 	bl	8001d64 <ST7735_Unselect>
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000036 	.word	0x20000036
 8002078:	2000003c 	.word	0x2000003c
 800207c:	20000038 	.word	0x20000038
 8002080:	20000031 	.word	0x20000031
 8002084:	20000030 	.word	0x20000030
 8002088:	20000035 	.word	0x20000035
 800208c:	20000034 	.word	0x20000034

08002090 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	80fb      	strh	r3, [r7, #6]
 800209a:	460b      	mov	r3, r1
 800209c:	80bb      	strh	r3, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	4a17      	ldr	r2, [pc, #92]	; (8002104 <ST7735_DrawPixel+0x74>)
 80020a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80020aa:	4293      	cmp	r3, r2
 80020ac:	da26      	bge.n	80020fc <ST7735_DrawPixel+0x6c>
 80020ae:	88bb      	ldrh	r3, [r7, #4]
 80020b0:	4a15      	ldr	r2, [pc, #84]	; (8002108 <ST7735_DrawPixel+0x78>)
 80020b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80020b6:	4293      	cmp	r3, r2
 80020b8:	da20      	bge.n	80020fc <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 80020ba:	f7ff fe47 	bl	8001d4c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	b2d8      	uxtb	r0, r3
 80020c2:	88bb      	ldrh	r3, [r7, #4]
 80020c4:	b2d9      	uxtb	r1, r3
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	3301      	adds	r3, #1
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	88bb      	ldrh	r3, [r7, #4]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	3301      	adds	r3, #1
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	f7ff fee7 	bl	8001ea8 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80020da:	887b      	ldrh	r3, [r7, #2]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	b29b      	uxth	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	733b      	strb	r3, [r7, #12]
 80020e4:	887b      	ldrh	r3, [r7, #2]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 80020ea:	f107 030c 	add.w	r3, r7, #12
 80020ee:	2102      	movs	r1, #2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fe73 	bl	8001ddc <ST7735_WriteData>

    ST7735_Unselect();
 80020f6:	f7ff fe35 	bl	8001d64 <ST7735_Unselect>
 80020fa:	e000      	b.n	80020fe <ST7735_DrawPixel+0x6e>
        return;
 80020fc:	bf00      	nop
}
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000038 	.word	0x20000038
 8002108:	2000003c 	.word	0x2000003c

0800210c <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800210c:	b082      	sub	sp, #8
 800210e:	b590      	push	{r4, r7, lr}
 8002110:	b089      	sub	sp, #36	; 0x24
 8002112:	af00      	add	r7, sp, #0
 8002114:	637b      	str	r3, [r7, #52]	; 0x34
 8002116:	4603      	mov	r3, r0
 8002118:	80fb      	strh	r3, [r7, #6]
 800211a:	460b      	mov	r3, r1
 800211c:	80bb      	strh	r3, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	b2d8      	uxtb	r0, r3
 8002126:	88bb      	ldrh	r3, [r7, #4]
 8002128:	b2d9      	uxtb	r1, r3
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	b2da      	uxtb	r2, r3
 800212e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002132:	4413      	add	r3, r2
 8002134:	b2db      	uxtb	r3, r3
 8002136:	3b01      	subs	r3, #1
 8002138:	b2dc      	uxtb	r4, r3
 800213a:	88bb      	ldrh	r3, [r7, #4]
 800213c:	b2da      	uxtb	r2, r3
 800213e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002142:	4413      	add	r3, r2
 8002144:	b2db      	uxtb	r3, r3
 8002146:	3b01      	subs	r3, #1
 8002148:	b2db      	uxtb	r3, r3
 800214a:	4622      	mov	r2, r4
 800214c:	f7ff feac 	bl	8001ea8 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	e043      	b.n	80021de <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8002156:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	3b20      	subs	r3, #32
 800215c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002160:	fb01 f303 	mul.w	r3, r1, r3
 8002164:	4619      	mov	r1, r3
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	440b      	add	r3, r1
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	e029      	b.n	80021cc <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00e      	beq.n	80021a6 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002188:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	b29b      	uxth	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	743b      	strb	r3, [r7, #16]
 8002192:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002194:	b2db      	uxtb	r3, r3
 8002196:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8002198:	f107 0310 	add.w	r3, r7, #16
 800219c:	2102      	movs	r1, #2
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fe1c 	bl	8001ddc <ST7735_WriteData>
 80021a4:	e00f      	b.n	80021c6 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80021a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80021aa:	0a1b      	lsrs	r3, r3, #8
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	733b      	strb	r3, [r7, #12]
 80021b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80021ba:	f107 030c 	add.w	r3, r7, #12
 80021be:	2102      	movs	r1, #2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fe0b 	bl	8001ddc <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	3301      	adds	r3, #1
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80021d0:	461a      	mov	r2, r3
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d3cf      	bcc.n	8002178 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	3301      	adds	r3, #1
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021e2:	461a      	mov	r2, r3
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d3b5      	bcc.n	8002156 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80021ea:	bf00      	nop
 80021ec:	bf00      	nop
 80021ee:	3724      	adds	r7, #36	; 0x24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80021f6:	b002      	add	sp, #8
 80021f8:	4770      	bx	lr
	...

080021fc <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80021fc:	b082      	sub	sp, #8
 80021fe:	b580      	push	{r7, lr}
 8002200:	b086      	sub	sp, #24
 8002202:	af04      	add	r7, sp, #16
 8002204:	603a      	str	r2, [r7, #0]
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	4603      	mov	r3, r0
 800220a:	80fb      	strh	r3, [r7, #6]
 800220c:	460b      	mov	r3, r1
 800220e:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8002210:	f7ff fd9c 	bl	8001d4c <ST7735_Select>

    while(*str) {
 8002214:	e033      	b.n	800227e <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	7d3a      	ldrb	r2, [r7, #20]
 800221a:	4413      	add	r3, r2
 800221c:	4a1f      	ldr	r2, [pc, #124]	; (800229c <ST7735_WriteString+0xa0>)
 800221e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002222:	4293      	cmp	r3, r2
 8002224:	db16      	blt.n	8002254 <ST7735_WriteString+0x58>
            x = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800222a:	7d7b      	ldrb	r3, [r7, #21]
 800222c:	b29a      	uxth	r2, r3
 800222e:	88bb      	ldrh	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8002234:	88bb      	ldrh	r3, [r7, #4]
 8002236:	7d7a      	ldrb	r2, [r7, #21]
 8002238:	4413      	add	r3, r2
 800223a:	4a19      	ldr	r2, [pc, #100]	; (80022a0 <ST7735_WriteString+0xa4>)
 800223c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002240:	4293      	cmp	r3, r2
 8002242:	da21      	bge.n	8002288 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b20      	cmp	r3, #32
 800224a:	d103      	bne.n	8002254 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	3301      	adds	r3, #1
 8002250:	603b      	str	r3, [r7, #0]
                continue;
 8002252:	e014      	b.n	800227e <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	781a      	ldrb	r2, [r3, #0]
 8002258:	88b9      	ldrh	r1, [r7, #4]
 800225a:	88f8      	ldrh	r0, [r7, #6]
 800225c:	8c3b      	ldrh	r3, [r7, #32]
 800225e:	9302      	str	r3, [sp, #8]
 8002260:	8bbb      	ldrh	r3, [r7, #28]
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f7ff ff4f 	bl	800210c <ST7735_WriteChar>
        x += font.width;
 800226e:	7d3b      	ldrb	r3, [r7, #20]
 8002270:	b29a      	uxth	r2, r3
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	4413      	add	r3, r2
 8002276:	80fb      	strh	r3, [r7, #6]
        str++;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	3301      	adds	r3, #1
 800227c:	603b      	str	r3, [r7, #0]
    while(*str) {
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1c7      	bne.n	8002216 <ST7735_WriteString+0x1a>
 8002286:	e000      	b.n	800228a <ST7735_WriteString+0x8e>
                break;
 8002288:	bf00      	nop
    }

    ST7735_Unselect();
 800228a:	f7ff fd6b 	bl	8001d64 <ST7735_Unselect>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002298:	b002      	add	sp, #8
 800229a:	4770      	bx	lr
 800229c:	20000038 	.word	0x20000038
 80022a0:	2000003c 	.word	0x2000003c

080022a4 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4604      	mov	r4, r0
 80022ac:	4608      	mov	r0, r1
 80022ae:	4611      	mov	r1, r2
 80022b0:	461a      	mov	r2, r3
 80022b2:	4623      	mov	r3, r4
 80022b4:	80fb      	strh	r3, [r7, #6]
 80022b6:	4603      	mov	r3, r0
 80022b8:	80bb      	strh	r3, [r7, #4]
 80022ba:	460b      	mov	r3, r1
 80022bc:	807b      	strh	r3, [r7, #2]
 80022be:	4613      	mov	r3, r2
 80022c0:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	4a38      	ldr	r2, [pc, #224]	; (80023a8 <ST7735_FillRectangle+0x104>)
 80022c6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80022ca:	4293      	cmp	r3, r2
 80022cc:	da67      	bge.n	800239e <ST7735_FillRectangle+0xfa>
 80022ce:	88bb      	ldrh	r3, [r7, #4]
 80022d0:	4a36      	ldr	r2, [pc, #216]	; (80023ac <ST7735_FillRectangle+0x108>)
 80022d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80022d6:	4293      	cmp	r3, r2
 80022d8:	da61      	bge.n	800239e <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 80022da:	88fa      	ldrh	r2, [r7, #6]
 80022dc:	887b      	ldrh	r3, [r7, #2]
 80022de:	4413      	add	r3, r2
 80022e0:	4a31      	ldr	r2, [pc, #196]	; (80023a8 <ST7735_FillRectangle+0x104>)
 80022e2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80022e6:	4293      	cmp	r3, r2
 80022e8:	dd06      	ble.n	80022f8 <ST7735_FillRectangle+0x54>
 80022ea:	4b2f      	ldr	r3, [pc, #188]	; (80023a8 <ST7735_FillRectangle+0x104>)
 80022ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 80022f8:	88ba      	ldrh	r2, [r7, #4]
 80022fa:	883b      	ldrh	r3, [r7, #0]
 80022fc:	4413      	add	r3, r2
 80022fe:	4a2b      	ldr	r2, [pc, #172]	; (80023ac <ST7735_FillRectangle+0x108>)
 8002300:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002304:	4293      	cmp	r3, r2
 8002306:	dd06      	ble.n	8002316 <ST7735_FillRectangle+0x72>
 8002308:	4b28      	ldr	r3, [pc, #160]	; (80023ac <ST7735_FillRectangle+0x108>)
 800230a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800230e:	b29a      	uxth	r2, r3
 8002310:	88bb      	ldrh	r3, [r7, #4]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8002316:	f7ff fd19 	bl	8001d4c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	b2d8      	uxtb	r0, r3
 800231e:	88bb      	ldrh	r3, [r7, #4]
 8002320:	b2d9      	uxtb	r1, r3
 8002322:	88fb      	ldrh	r3, [r7, #6]
 8002324:	b2da      	uxtb	r2, r3
 8002326:	887b      	ldrh	r3, [r7, #2]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	4413      	add	r3, r2
 800232c:	b2db      	uxtb	r3, r3
 800232e:	3b01      	subs	r3, #1
 8002330:	b2dc      	uxtb	r4, r3
 8002332:	88bb      	ldrh	r3, [r7, #4]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	883b      	ldrh	r3, [r7, #0]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	4413      	add	r3, r2
 800233c:	b2db      	uxtb	r3, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	4622      	mov	r2, r4
 8002344:	f7ff fdb0 	bl	8001ea8 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002348:	8c3b      	ldrh	r3, [r7, #32]
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	b29b      	uxth	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	733b      	strb	r3, [r7, #12]
 8002352:	8c3b      	ldrh	r3, [r7, #32]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8002358:	2201      	movs	r2, #1
 800235a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800235e:	4814      	ldr	r0, [pc, #80]	; (80023b0 <ST7735_FillRectangle+0x10c>)
 8002360:	f000 fdb6 	bl	8002ed0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002364:	883b      	ldrh	r3, [r7, #0]
 8002366:	80bb      	strh	r3, [r7, #4]
 8002368:	e013      	b.n	8002392 <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 800236a:	887b      	ldrh	r3, [r7, #2]
 800236c:	80fb      	strh	r3, [r7, #6]
 800236e:	e00a      	b.n	8002386 <ST7735_FillRectangle+0xe2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002370:	f107 010c 	add.w	r1, r7, #12
 8002374:	f04f 33ff 	mov.w	r3, #4294967295
 8002378:	2202      	movs	r2, #2
 800237a:	480e      	ldr	r0, [pc, #56]	; (80023b4 <ST7735_FillRectangle+0x110>)
 800237c:	f001 fa5f 	bl	800383e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	3b01      	subs	r3, #1
 8002384:	80fb      	strh	r3, [r7, #6]
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f1      	bne.n	8002370 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 800238c:	88bb      	ldrh	r3, [r7, #4]
 800238e:	3b01      	subs	r3, #1
 8002390:	80bb      	strh	r3, [r7, #4]
 8002392:	88bb      	ldrh	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1e8      	bne.n	800236a <ST7735_FillRectangle+0xc6>
        }
    }

    ST7735_Unselect();
 8002398:	f7ff fce4 	bl	8001d64 <ST7735_Unselect>
 800239c:	e000      	b.n	80023a0 <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 800239e:	bf00      	nop
}
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd90      	pop	{r4, r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000038 	.word	0x20000038
 80023ac:	2000003c 	.word	0x2000003c
 80023b0:	40020000 	.word	0x40020000
 80023b4:	20000040 	.word	0x20000040

080023b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	; 0x28
 80023bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023be:	f107 0314 	add.w	r3, r7, #20
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	60da      	str	r2, [r3, #12]
 80023cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	4b3b      	ldr	r3, [pc, #236]	; (80024c0 <MX_GPIO_Init+0x108>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a3a      	ldr	r2, [pc, #232]	; (80024c0 <MX_GPIO_Init+0x108>)
 80023d8:	f043 0304 	orr.w	r3, r3, #4
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b38      	ldr	r3, [pc, #224]	; (80024c0 <MX_GPIO_Init+0x108>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b34      	ldr	r3, [pc, #208]	; (80024c0 <MX_GPIO_Init+0x108>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a33      	ldr	r2, [pc, #204]	; (80024c0 <MX_GPIO_Init+0x108>)
 80023f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b31      	ldr	r3, [pc, #196]	; (80024c0 <MX_GPIO_Init+0x108>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <MX_GPIO_Init+0x108>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	4a2c      	ldr	r2, [pc, #176]	; (80024c0 <MX_GPIO_Init+0x108>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6313      	str	r3, [r2, #48]	; 0x30
 8002416:	4b2a      	ldr	r3, [pc, #168]	; (80024c0 <MX_GPIO_Init+0x108>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	4b26      	ldr	r3, [pc, #152]	; (80024c0 <MX_GPIO_Init+0x108>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a25      	ldr	r2, [pc, #148]	; (80024c0 <MX_GPIO_Init+0x108>)
 800242c:	f043 0302 	orr.w	r3, r3, #2
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b23      	ldr	r3, [pc, #140]	; (80024c0 <MX_GPIO_Init+0x108>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|OLED_RST_Pin, GPIO_PIN_RESET);
 800243e:	2200      	movs	r2, #0
 8002440:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002444:	481f      	ldr	r0, [pc, #124]	; (80024c4 <MX_GPIO_Init+0x10c>)
 8002446:	f000 fd43 	bl	8002ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 800244a:	2200      	movs	r2, #0
 800244c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002450:	481d      	ldr	r0, [pc, #116]	; (80024c8 <MX_GPIO_Init+0x110>)
 8002452:	f000 fd3d 	bl	8002ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8002456:	2200      	movs	r2, #0
 8002458:	2140      	movs	r1, #64	; 0x40
 800245a:	481c      	ldr	r0, [pc, #112]	; (80024cc <MX_GPIO_Init+0x114>)
 800245c:	f000 fd38 	bl	8002ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|OLED_RST_Pin;
 8002460:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002466:	2301      	movs	r3, #1
 8002468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246e:	2300      	movs	r3, #0
 8002470:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	4619      	mov	r1, r3
 8002478:	4812      	ldr	r0, [pc, #72]	; (80024c4 <MX_GPIO_Init+0x10c>)
 800247a:	f000 fba5 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 800247e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002484:	2301      	movs	r3, #1
 8002486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	4619      	mov	r1, r3
 8002496:	480c      	ldr	r0, [pc, #48]	; (80024c8 <MX_GPIO_Init+0x110>)
 8002498:	f000 fb96 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 800249c:	2340      	movs	r3, #64	; 0x40
 800249e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a0:	2301      	movs	r3, #1
 80024a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a8:	2300      	movs	r3, #0
 80024aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 80024ac:	f107 0314 	add.w	r3, r7, #20
 80024b0:	4619      	mov	r1, r3
 80024b2:	4806      	ldr	r0, [pc, #24]	; (80024cc <MX_GPIO_Init+0x114>)
 80024b4:	f000 fb88 	bl	8002bc8 <HAL_GPIO_Init>

}
 80024b8:	bf00      	nop
 80024ba:	3728      	adds	r7, #40	; 0x28
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40020800 	.word	0x40020800
 80024c8:	40020000 	.word	0x40020000
 80024cc:	40020400 	.word	0x40020400

080024d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024d6:	f000 f9fb 	bl	80028d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024da:	f000 f87b 	bl	80025d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024de:	f7ff ff6b 	bl	80023b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80024e2:	f000 f8e7 	bl	80026b4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


	 	   ST7735_Init(0);
 80024e6:	2000      	movs	r0, #0
 80024e8:	f7ff fd26 	bl	8001f38 <ST7735_Init>
  	  	   fillScreen(BLACK);
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7fe ff5d 	bl	80013ac <fillScreen>
		   testAll();
 80024f2:	f7ff fc00 	bl	8001cf6 <testAll>
		   HAL_Delay(1000);
 80024f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024fa:	f000 fa5b 	bl	80029b4 <HAL_Delay>

	  /* X and Y = Row and Column (WriteStreang) */



			  ST7735_SetRotation(0);
 80024fe:	2000      	movs	r0, #0
 8002500:	f7ff fd46 	bl	8001f90 <ST7735_SetRotation>
			  ST7735_WriteString(0, 0, "HELLO", Font_11x18, RED,BLACK);
 8002504:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <main+0xf0>)
 8002506:	2200      	movs	r2, #0
 8002508:	9202      	str	r2, [sp, #8]
 800250a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800250e:	9201      	str	r2, [sp, #4]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	9200      	str	r2, [sp, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a2b      	ldr	r2, [pc, #172]	; (80025c4 <main+0xf4>)
 8002518:	2100      	movs	r1, #0
 800251a:	2000      	movs	r0, #0
 800251c:	f7ff fe6e 	bl	80021fc <ST7735_WriteString>
			  HAL_Delay(5000);
 8002520:	f241 3088 	movw	r0, #5000	; 0x1388
 8002524:	f000 fa46 	bl	80029b4 <HAL_Delay>
			  fillScreen(BLACK);
 8002528:	2000      	movs	r0, #0
 800252a:	f7fe ff3f 	bl	80013ac <fillScreen>

			  ST7735_SetRotation(0);
 800252e:	2000      	movs	r0, #0
 8002530:	f7ff fd2e 	bl	8001f90 <ST7735_SetRotation>
			  ST7735_WriteString(0, 20, "WORLD", Font_11x18, GREEN,BLACK);
 8002534:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <main+0xf0>)
 8002536:	2200      	movs	r2, #0
 8002538:	9202      	str	r2, [sp, #8]
 800253a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800253e:	9201      	str	r2, [sp, #4]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	9200      	str	r2, [sp, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a20      	ldr	r2, [pc, #128]	; (80025c8 <main+0xf8>)
 8002548:	2114      	movs	r1, #20
 800254a:	2000      	movs	r0, #0
 800254c:	f7ff fe56 	bl	80021fc <ST7735_WriteString>
			  HAL_Delay(5000);
 8002550:	f241 3088 	movw	r0, #5000	; 0x1388
 8002554:	f000 fa2e 	bl	80029b4 <HAL_Delay>
			  fillScreen(BLACK);
 8002558:	2000      	movs	r0, #0
 800255a:	f7fe ff27 	bl	80013ac <fillScreen>

			  ST7735_SetRotation(0);
 800255e:	2000      	movs	r0, #0
 8002560:	f7ff fd16 	bl	8001f90 <ST7735_SetRotation>
			  ST7735_WriteString(0, 30, "FROM", Font_11x18, BLUE,BLACK);
 8002564:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <main+0xf0>)
 8002566:	2200      	movs	r2, #0
 8002568:	9202      	str	r2, [sp, #8]
 800256a:	221f      	movs	r2, #31
 800256c:	9201      	str	r2, [sp, #4]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	9200      	str	r2, [sp, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a15      	ldr	r2, [pc, #84]	; (80025cc <main+0xfc>)
 8002576:	211e      	movs	r1, #30
 8002578:	2000      	movs	r0, #0
 800257a:	f7ff fe3f 	bl	80021fc <ST7735_WriteString>
			  HAL_Delay(1000);
 800257e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002582:	f000 fa17 	bl	80029b4 <HAL_Delay>
			  fillScreen(BLACK);
 8002586:	2000      	movs	r0, #0
 8002588:	f7fe ff10 	bl	80013ac <fillScreen>

			  ST7735_SetRotation(0);
 800258c:	2000      	movs	r0, #0
 800258e:	f7ff fcff 	bl	8001f90 <ST7735_SetRotation>
			  ST7735_WriteString(0, 40, "GEE-ITC01", Font_11x18, YELLOW,BLACK);
 8002592:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <main+0xf0>)
 8002594:	2200      	movs	r2, #0
 8002596:	9202      	str	r2, [sp, #8]
 8002598:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800259c:	9201      	str	r2, [sp, #4]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	9200      	str	r2, [sp, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <main+0x100>)
 80025a6:	2128      	movs	r1, #40	; 0x28
 80025a8:	2000      	movs	r0, #0
 80025aa:	f7ff fe27 	bl	80021fc <ST7735_WriteString>
			  HAL_Delay(1000);
 80025ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025b2:	f000 f9ff 	bl	80029b4 <HAL_Delay>
			  fillScreen(BLACK);
 80025b6:	2000      	movs	r0, #0
 80025b8:	f7fe fef8 	bl	80013ac <fillScreen>
			  ST7735_SetRotation(0);
 80025bc:	e79f      	b.n	80024fe <main+0x2e>
 80025be:	bf00      	nop
 80025c0:	20000000 	.word	0x20000000
 80025c4:	08003cbc 	.word	0x08003cbc
 80025c8:	08003cc4 	.word	0x08003cc4
 80025cc:	08003ccc 	.word	0x08003ccc
 80025d0:	08003cd4 	.word	0x08003cd4

080025d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b094      	sub	sp, #80	; 0x50
 80025d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025da:	f107 0320 	add.w	r3, r7, #32
 80025de:	2230      	movs	r2, #48	; 0x30
 80025e0:	2100      	movs	r1, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f001 fb56 	bl	8003c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025e8:	f107 030c 	add.w	r3, r7, #12
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f8:	2300      	movs	r3, #0
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <SystemClock_Config+0xcc>)
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	4a27      	ldr	r2, [pc, #156]	; (80026a0 <SystemClock_Config+0xcc>)
 8002602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002606:	6413      	str	r3, [r2, #64]	; 0x40
 8002608:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <SystemClock_Config+0xcc>)
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002614:	2300      	movs	r3, #0
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	4b22      	ldr	r3, [pc, #136]	; (80026a4 <SystemClock_Config+0xd0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002620:	4a20      	ldr	r2, [pc, #128]	; (80026a4 <SystemClock_Config+0xd0>)
 8002622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <SystemClock_Config+0xd0>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002630:	607b      	str	r3, [r7, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002634:	2301      	movs	r3, #1
 8002636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800263e:	2302      	movs	r3, #2
 8002640:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002642:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8002648:	230d      	movs	r3, #13
 800264a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800264c:	2354      	movs	r3, #84	; 0x54
 800264e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002650:	2302      	movs	r3, #2
 8002652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002654:	2304      	movs	r3, #4
 8002656:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002658:	f107 0320 	add.w	r3, r7, #32
 800265c:	4618      	mov	r0, r3
 800265e:	f000 fc51 	bl	8002f04 <HAL_RCC_OscConfig>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002668:	f000 f81e 	bl	80026a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800266c:	230f      	movs	r3, #15
 800266e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002670:	2302      	movs	r3, #2
 8002672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800267c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002682:	f107 030c 	add.w	r3, r7, #12
 8002686:	2102      	movs	r1, #2
 8002688:	4618      	mov	r0, r3
 800268a:	f000 feb3 	bl	80033f4 <HAL_RCC_ClockConfig>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002694:	f000 f808 	bl	80026a8 <Error_Handler>
  }
}
 8002698:	bf00      	nop
 800269a:	3750      	adds	r7, #80	; 0x50
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40007000 	.word	0x40007000

080026a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026ac:	b672      	cpsid	i
}
 80026ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026b0:	e7fe      	b.n	80026b0 <Error_Handler+0x8>
	...

080026b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80026b8:	4b18      	ldr	r3, [pc, #96]	; (800271c <MX_SPI1_Init+0x68>)
 80026ba:	4a19      	ldr	r2, [pc, #100]	; (8002720 <MX_SPI1_Init+0x6c>)
 80026bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026be:	4b17      	ldr	r3, [pc, #92]	; (800271c <MX_SPI1_Init+0x68>)
 80026c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80026c6:	4b15      	ldr	r3, [pc, #84]	; (800271c <MX_SPI1_Init+0x68>)
 80026c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026cc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026ce:	4b13      	ldr	r3, [pc, #76]	; (800271c <MX_SPI1_Init+0x68>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <MX_SPI1_Init+0x68>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <MX_SPI1_Init+0x68>)
 80026dc:	2200      	movs	r2, #0
 80026de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <MX_SPI1_Init+0x68>)
 80026e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <MX_SPI1_Init+0x68>)
 80026ea:	2210      	movs	r2, #16
 80026ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026ee:	4b0b      	ldr	r3, [pc, #44]	; (800271c <MX_SPI1_Init+0x68>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026f4:	4b09      	ldr	r3, [pc, #36]	; (800271c <MX_SPI1_Init+0x68>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026fa:	4b08      	ldr	r3, [pc, #32]	; (800271c <MX_SPI1_Init+0x68>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <MX_SPI1_Init+0x68>)
 8002702:	220a      	movs	r2, #10
 8002704:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002706:	4805      	ldr	r0, [pc, #20]	; (800271c <MX_SPI1_Init+0x68>)
 8002708:	f001 f810 	bl	800372c <HAL_SPI_Init>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002712:	f7ff ffc9 	bl	80026a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20000040 	.word	0x20000040
 8002720:	40013000 	.word	0x40013000

08002724 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	; 0x28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a19      	ldr	r2, [pc, #100]	; (80027a8 <HAL_SPI_MspInit+0x84>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d12b      	bne.n	800279e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	4b18      	ldr	r3, [pc, #96]	; (80027ac <HAL_SPI_MspInit+0x88>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	4a17      	ldr	r2, [pc, #92]	; (80027ac <HAL_SPI_MspInit+0x88>)
 8002750:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002754:	6453      	str	r3, [r2, #68]	; 0x44
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <HAL_SPI_MspInit+0x88>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	4b11      	ldr	r3, [pc, #68]	; (80027ac <HAL_SPI_MspInit+0x88>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a10      	ldr	r2, [pc, #64]	; (80027ac <HAL_SPI_MspInit+0x88>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <HAL_SPI_MspInit+0x88>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800277e:	23a0      	movs	r3, #160	; 0xa0
 8002780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002782:	2302      	movs	r3, #2
 8002784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278a:	2303      	movs	r3, #3
 800278c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800278e:	2305      	movs	r3, #5
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002792:	f107 0314 	add.w	r3, r7, #20
 8002796:	4619      	mov	r1, r3
 8002798:	4805      	ldr	r0, [pc, #20]	; (80027b0 <HAL_SPI_MspInit+0x8c>)
 800279a:	f000 fa15 	bl	8002bc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800279e:	bf00      	nop
 80027a0:	3728      	adds	r7, #40	; 0x28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40013000 	.word	0x40013000
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40020000 	.word	0x40020000

080027b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <HAL_MspInit+0x4c>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	4a0f      	ldr	r2, [pc, #60]	; (8002800 <HAL_MspInit+0x4c>)
 80027c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <HAL_MspInit+0x4c>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d2:	607b      	str	r3, [r7, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_MspInit+0x4c>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4a08      	ldr	r2, [pc, #32]	; (8002800 <HAL_MspInit+0x4c>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_MspInit+0x4c>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40023800 	.word	0x40023800

08002804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002808:	e7fe      	b.n	8002808 <NMI_Handler+0x4>

0800280a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800280e:	e7fe      	b.n	800280e <HardFault_Handler+0x4>

08002810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002814:	e7fe      	b.n	8002814 <MemManage_Handler+0x4>

08002816 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800281a:	e7fe      	b.n	800281a <BusFault_Handler+0x4>

0800281c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002820:	e7fe      	b.n	8002820 <UsageFault_Handler+0x4>

08002822 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002850:	f000 f890 	bl	8002974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}

08002858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <SystemInit+0x20>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002862:	4a05      	ldr	r2, [pc, #20]	; (8002878 <SystemInit+0x20>)
 8002864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800286c:	bf00      	nop
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800287c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002880:	480d      	ldr	r0, [pc, #52]	; (80028b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002882:	490e      	ldr	r1, [pc, #56]	; (80028bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002884:	4a0e      	ldr	r2, [pc, #56]	; (80028c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002888:	e002      	b.n	8002890 <LoopCopyDataInit>

0800288a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800288a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800288c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800288e:	3304      	adds	r3, #4

08002890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002894:	d3f9      	bcc.n	800288a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002896:	4a0b      	ldr	r2, [pc, #44]	; (80028c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002898:	4c0b      	ldr	r4, [pc, #44]	; (80028c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800289a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800289c:	e001      	b.n	80028a2 <LoopFillZerobss>

0800289e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800289e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028a0:	3204      	adds	r2, #4

080028a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a4:	d3fb      	bcc.n	800289e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028a6:	f7ff ffd7 	bl	8002858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028aa:	f001 f9cf 	bl	8003c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028ae:	f7ff fe0f 	bl	80024d0 <main>
  bx  lr    
 80028b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80028b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028bc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80028c0:	08004ad0 	.word	0x08004ad0
  ldr r2, =_sbss
 80028c4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80028c8:	2000009c 	.word	0x2000009c

080028cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028cc:	e7fe      	b.n	80028cc <ADC_IRQHandler>
	...

080028d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <HAL_Init+0x40>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0d      	ldr	r2, [pc, #52]	; (8002910 <HAL_Init+0x40>)
 80028da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_Init+0x40>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a0a      	ldr	r2, [pc, #40]	; (8002910 <HAL_Init+0x40>)
 80028e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028ec:	4b08      	ldr	r3, [pc, #32]	; (8002910 <HAL_Init+0x40>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a07      	ldr	r2, [pc, #28]	; (8002910 <HAL_Init+0x40>)
 80028f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028f8:	2003      	movs	r0, #3
 80028fa:	f000 f931 	bl	8002b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028fe:	2000      	movs	r0, #0
 8002900:	f000 f808 	bl	8002914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002904:	f7ff ff56 	bl	80027b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40023c00 	.word	0x40023c00

08002914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800291c:	4b12      	ldr	r3, [pc, #72]	; (8002968 <HAL_InitTick+0x54>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b12      	ldr	r3, [pc, #72]	; (800296c <HAL_InitTick+0x58>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	4619      	mov	r1, r3
 8002926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800292a:	fbb3 f3f1 	udiv	r3, r3, r1
 800292e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002932:	4618      	mov	r0, r3
 8002934:	f000 f93b 	bl	8002bae <HAL_SYSTICK_Config>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e00e      	b.n	8002960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b0f      	cmp	r3, #15
 8002946:	d80a      	bhi.n	800295e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002948:	2200      	movs	r2, #0
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	f04f 30ff 	mov.w	r0, #4294967295
 8002950:	f000 f911 	bl	8002b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002954:	4a06      	ldr	r2, [pc, #24]	; (8002970 <HAL_InitTick+0x5c>)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	e000      	b.n	8002960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
}
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20000008 	.word	0x20000008
 800296c:	20000010 	.word	0x20000010
 8002970:	2000000c 	.word	0x2000000c

08002974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_IncTick+0x20>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	461a      	mov	r2, r3
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_IncTick+0x24>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4413      	add	r3, r2
 8002984:	4a04      	ldr	r2, [pc, #16]	; (8002998 <HAL_IncTick+0x24>)
 8002986:	6013      	str	r3, [r2, #0]
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	20000010 	.word	0x20000010
 8002998:	20000098 	.word	0x20000098

0800299c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return uwTick;
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <HAL_GetTick+0x14>)
 80029a2:	681b      	ldr	r3, [r3, #0]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	20000098 	.word	0x20000098

080029b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029bc:	f7ff ffee 	bl	800299c <HAL_GetTick>
 80029c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029cc:	d005      	beq.n	80029da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_Delay+0x44>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4413      	add	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029da:	bf00      	nop
 80029dc:	f7ff ffde 	bl	800299c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d8f7      	bhi.n	80029dc <HAL_Delay+0x28>
  {
  }
}
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000010 	.word	0x20000010

080029fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <__NVIC_SetPriorityGrouping+0x44>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a2e:	4a04      	ldr	r2, [pc, #16]	; (8002a40 <__NVIC_SetPriorityGrouping+0x44>)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	60d3      	str	r3, [r2, #12]
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <__NVIC_GetPriorityGrouping+0x18>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	0a1b      	lsrs	r3, r3, #8
 8002a4e:	f003 0307 	and.w	r3, r3, #7
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	6039      	str	r1, [r7, #0]
 8002a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	db0a      	blt.n	8002a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	490c      	ldr	r1, [pc, #48]	; (8002aac <__NVIC_SetPriority+0x4c>)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	0112      	lsls	r2, r2, #4
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	440b      	add	r3, r1
 8002a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a88:	e00a      	b.n	8002aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	4908      	ldr	r1, [pc, #32]	; (8002ab0 <__NVIC_SetPriority+0x50>)
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	3b04      	subs	r3, #4
 8002a98:	0112      	lsls	r2, r2, #4
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	761a      	strb	r2, [r3, #24]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000e100 	.word	0xe000e100
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b089      	sub	sp, #36	; 0x24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f1c3 0307 	rsb	r3, r3, #7
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	bf28      	it	cs
 8002ad2:	2304      	movcs	r3, #4
 8002ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d902      	bls.n	8002ae4 <NVIC_EncodePriority+0x30>
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3b03      	subs	r3, #3
 8002ae2:	e000      	b.n	8002ae6 <NVIC_EncodePriority+0x32>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43da      	mvns	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	401a      	ands	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002afc:	f04f 31ff 	mov.w	r1, #4294967295
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	fa01 f303 	lsl.w	r3, r1, r3
 8002b06:	43d9      	mvns	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	4313      	orrs	r3, r2
         );
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3724      	adds	r7, #36	; 0x24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
	...

08002b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b2c:	d301      	bcc.n	8002b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e00f      	b.n	8002b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b32:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <SysTick_Config+0x40>)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b3a:	210f      	movs	r1, #15
 8002b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b40:	f7ff ff8e 	bl	8002a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <SysTick_Config+0x40>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b4a:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <SysTick_Config+0x40>)
 8002b4c:	2207      	movs	r2, #7
 8002b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	e000e010 	.word	0xe000e010

08002b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff ff47 	bl	80029fc <__NVIC_SetPriorityGrouping>
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b086      	sub	sp, #24
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
 8002b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b88:	f7ff ff5c 	bl	8002a44 <__NVIC_GetPriorityGrouping>
 8002b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68b9      	ldr	r1, [r7, #8]
 8002b92:	6978      	ldr	r0, [r7, #20]
 8002b94:	f7ff ff8e 	bl	8002ab4 <NVIC_EncodePriority>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff ff5d 	bl	8002a60 <__NVIC_SetPriority>
}
 8002ba6:	bf00      	nop
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7ff ffb0 	bl	8002b1c <SysTick_Config>
 8002bbc:	4603      	mov	r3, r0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b089      	sub	sp, #36	; 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	e159      	b.n	8002e98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002be4:	2201      	movs	r2, #1
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	f040 8148 	bne.w	8002e92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d005      	beq.n	8002c1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d130      	bne.n	8002c7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	2203      	movs	r2, #3
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c50:	2201      	movs	r2, #1
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	091b      	lsrs	r3, r3, #4
 8002c66:	f003 0201 	and.w	r2, r3, #1
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d017      	beq.n	8002cb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	2203      	movs	r2, #3
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d123      	bne.n	8002d0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	08da      	lsrs	r2, r3, #3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3208      	adds	r2, #8
 8002ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	220f      	movs	r2, #15
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	08da      	lsrs	r2, r3, #3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3208      	adds	r2, #8
 8002d06:	69b9      	ldr	r1, [r7, #24]
 8002d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	2203      	movs	r2, #3
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0203 	and.w	r2, r3, #3
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 80a2 	beq.w	8002e92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	4b57      	ldr	r3, [pc, #348]	; (8002eb0 <HAL_GPIO_Init+0x2e8>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	4a56      	ldr	r2, [pc, #344]	; (8002eb0 <HAL_GPIO_Init+0x2e8>)
 8002d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5e:	4b54      	ldr	r3, [pc, #336]	; (8002eb0 <HAL_GPIO_Init+0x2e8>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d6a:	4a52      	ldr	r2, [pc, #328]	; (8002eb4 <HAL_GPIO_Init+0x2ec>)
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	089b      	lsrs	r3, r3, #2
 8002d70:	3302      	adds	r3, #2
 8002d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	220f      	movs	r2, #15
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a49      	ldr	r2, [pc, #292]	; (8002eb8 <HAL_GPIO_Init+0x2f0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d019      	beq.n	8002dca <HAL_GPIO_Init+0x202>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a48      	ldr	r2, [pc, #288]	; (8002ebc <HAL_GPIO_Init+0x2f4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_GPIO_Init+0x1fe>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a47      	ldr	r2, [pc, #284]	; (8002ec0 <HAL_GPIO_Init+0x2f8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00d      	beq.n	8002dc2 <HAL_GPIO_Init+0x1fa>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a46      	ldr	r2, [pc, #280]	; (8002ec4 <HAL_GPIO_Init+0x2fc>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d007      	beq.n	8002dbe <HAL_GPIO_Init+0x1f6>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a45      	ldr	r2, [pc, #276]	; (8002ec8 <HAL_GPIO_Init+0x300>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d101      	bne.n	8002dba <HAL_GPIO_Init+0x1f2>
 8002db6:	2304      	movs	r3, #4
 8002db8:	e008      	b.n	8002dcc <HAL_GPIO_Init+0x204>
 8002dba:	2307      	movs	r3, #7
 8002dbc:	e006      	b.n	8002dcc <HAL_GPIO_Init+0x204>
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e004      	b.n	8002dcc <HAL_GPIO_Init+0x204>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e002      	b.n	8002dcc <HAL_GPIO_Init+0x204>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <HAL_GPIO_Init+0x204>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	f002 0203 	and.w	r2, r2, #3
 8002dd2:	0092      	lsls	r2, r2, #2
 8002dd4:	4093      	lsls	r3, r2
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ddc:	4935      	ldr	r1, [pc, #212]	; (8002eb4 <HAL_GPIO_Init+0x2ec>)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	089b      	lsrs	r3, r3, #2
 8002de2:	3302      	adds	r3, #2
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dea:	4b38      	ldr	r3, [pc, #224]	; (8002ecc <HAL_GPIO_Init+0x304>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e0e:	4a2f      	ldr	r2, [pc, #188]	; (8002ecc <HAL_GPIO_Init+0x304>)
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e14:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <HAL_GPIO_Init+0x304>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e38:	4a24      	ldr	r2, [pc, #144]	; (8002ecc <HAL_GPIO_Init+0x304>)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e3e:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <HAL_GPIO_Init+0x304>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	43db      	mvns	r3, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e62:	4a1a      	ldr	r2, [pc, #104]	; (8002ecc <HAL_GPIO_Init+0x304>)
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e68:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <HAL_GPIO_Init+0x304>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e8c:	4a0f      	ldr	r2, [pc, #60]	; (8002ecc <HAL_GPIO_Init+0x304>)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	3301      	adds	r3, #1
 8002e96:	61fb      	str	r3, [r7, #28]
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	2b0f      	cmp	r3, #15
 8002e9c:	f67f aea2 	bls.w	8002be4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	bf00      	nop
 8002ea4:	3724      	adds	r7, #36	; 0x24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40013800 	.word	0x40013800
 8002eb8:	40020000 	.word	0x40020000
 8002ebc:	40020400 	.word	0x40020400
 8002ec0:	40020800 	.word	0x40020800
 8002ec4:	40020c00 	.word	0x40020c00
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40013c00 	.word	0x40013c00

08002ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	807b      	strh	r3, [r7, #2]
 8002edc:	4613      	mov	r3, r2
 8002ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ee0:	787b      	ldrb	r3, [r7, #1]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ee6:	887a      	ldrh	r2, [r7, #2]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002eec:	e003      	b.n	8002ef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eee:	887b      	ldrh	r3, [r7, #2]
 8002ef0:	041a      	lsls	r2, r3, #16
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	619a      	str	r2, [r3, #24]
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e264      	b.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d075      	beq.n	800300e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f22:	4ba3      	ldr	r3, [pc, #652]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d00c      	beq.n	8002f48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f2e:	4ba0      	ldr	r3, [pc, #640]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d112      	bne.n	8002f60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f3a:	4b9d      	ldr	r3, [pc, #628]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f46:	d10b      	bne.n	8002f60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f48:	4b99      	ldr	r3, [pc, #612]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d05b      	beq.n	800300c <HAL_RCC_OscConfig+0x108>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d157      	bne.n	800300c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e23f      	b.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f68:	d106      	bne.n	8002f78 <HAL_RCC_OscConfig+0x74>
 8002f6a:	4b91      	ldr	r3, [pc, #580]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a90      	ldr	r2, [pc, #576]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e01d      	b.n	8002fb4 <HAL_RCC_OscConfig+0xb0>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x98>
 8002f82:	4b8b      	ldr	r3, [pc, #556]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a8a      	ldr	r2, [pc, #552]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	4b88      	ldr	r3, [pc, #544]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a87      	ldr	r2, [pc, #540]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e00b      	b.n	8002fb4 <HAL_RCC_OscConfig+0xb0>
 8002f9c:	4b84      	ldr	r3, [pc, #528]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a83      	ldr	r2, [pc, #524]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	4b81      	ldr	r3, [pc, #516]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a80      	ldr	r2, [pc, #512]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d013      	beq.n	8002fe4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7ff fcee 	bl	800299c <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc4:	f7ff fcea 	bl	800299c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e204      	b.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd6:	4b76      	ldr	r3, [pc, #472]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCC_OscConfig+0xc0>
 8002fe2:	e014      	b.n	800300e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7ff fcda 	bl	800299c <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fec:	f7ff fcd6 	bl	800299c <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	; 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e1f0      	b.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffe:	4b6c      	ldr	r3, [pc, #432]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0xe8>
 800300a:	e000      	b.n	800300e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800300c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d063      	beq.n	80030e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800301a:	4b65      	ldr	r3, [pc, #404]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00b      	beq.n	800303e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003026:	4b62      	ldr	r3, [pc, #392]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800302e:	2b08      	cmp	r3, #8
 8003030:	d11c      	bne.n	800306c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003032:	4b5f      	ldr	r3, [pc, #380]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d116      	bne.n	800306c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800303e:	4b5c      	ldr	r3, [pc, #368]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <HAL_RCC_OscConfig+0x152>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d001      	beq.n	8003056 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e1c4      	b.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003056:	4b56      	ldr	r3, [pc, #344]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4952      	ldr	r1, [pc, #328]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003066:	4313      	orrs	r3, r2
 8003068:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306a:	e03a      	b.n	80030e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d020      	beq.n	80030b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003074:	4b4f      	ldr	r3, [pc, #316]	; (80031b4 <HAL_RCC_OscConfig+0x2b0>)
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7ff fc8f 	bl	800299c <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003082:	f7ff fc8b 	bl	800299c <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e1a5      	b.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003094:	4b46      	ldr	r3, [pc, #280]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a0:	4b43      	ldr	r3, [pc, #268]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4940      	ldr	r1, [pc, #256]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	600b      	str	r3, [r1, #0]
 80030b4:	e015      	b.n	80030e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030b6:	4b3f      	ldr	r3, [pc, #252]	; (80031b4 <HAL_RCC_OscConfig+0x2b0>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030bc:	f7ff fc6e 	bl	800299c <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030c4:	f7ff fc6a 	bl	800299c <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e184      	b.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d6:	4b36      	ldr	r3, [pc, #216]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d030      	beq.n	8003150 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d016      	beq.n	8003124 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030f6:	4b30      	ldr	r3, [pc, #192]	; (80031b8 <HAL_RCC_OscConfig+0x2b4>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fc:	f7ff fc4e 	bl	800299c <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003104:	f7ff fc4a 	bl	800299c <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e164      	b.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003116:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0x200>
 8003122:	e015      	b.n	8003150 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003124:	4b24      	ldr	r3, [pc, #144]	; (80031b8 <HAL_RCC_OscConfig+0x2b4>)
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312a:	f7ff fc37 	bl	800299c <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003132:	f7ff fc33 	bl	800299c <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e14d      	b.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003144:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1f0      	bne.n	8003132 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80a0 	beq.w	800329e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800315e:	2300      	movs	r3, #0
 8003160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003162:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10f      	bne.n	800318e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	4a0e      	ldr	r2, [pc, #56]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800317c:	6413      	str	r3, [r2, #64]	; 0x40
 800317e:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800318a:	2301      	movs	r3, #1
 800318c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318e:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_RCC_OscConfig+0x2b8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d121      	bne.n	80031de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800319a:	4b08      	ldr	r3, [pc, #32]	; (80031bc <HAL_RCC_OscConfig+0x2b8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a07      	ldr	r2, [pc, #28]	; (80031bc <HAL_RCC_OscConfig+0x2b8>)
 80031a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a6:	f7ff fbf9 	bl	800299c <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ac:	e011      	b.n	80031d2 <HAL_RCC_OscConfig+0x2ce>
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800
 80031b4:	42470000 	.word	0x42470000
 80031b8:	42470e80 	.word	0x42470e80
 80031bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c0:	f7ff fbec 	bl	800299c <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e106      	b.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d2:	4b85      	ldr	r3, [pc, #532]	; (80033e8 <HAL_RCC_OscConfig+0x4e4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d106      	bne.n	80031f4 <HAL_RCC_OscConfig+0x2f0>
 80031e6:	4b81      	ldr	r3, [pc, #516]	; (80033ec <HAL_RCC_OscConfig+0x4e8>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ea:	4a80      	ldr	r2, [pc, #512]	; (80033ec <HAL_RCC_OscConfig+0x4e8>)
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	6713      	str	r3, [r2, #112]	; 0x70
 80031f2:	e01c      	b.n	800322e <HAL_RCC_OscConfig+0x32a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b05      	cmp	r3, #5
 80031fa:	d10c      	bne.n	8003216 <HAL_RCC_OscConfig+0x312>
 80031fc:	4b7b      	ldr	r3, [pc, #492]	; (80033ec <HAL_RCC_OscConfig+0x4e8>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003200:	4a7a      	ldr	r2, [pc, #488]	; (80033ec <HAL_RCC_OscConfig+0x4e8>)
 8003202:	f043 0304 	orr.w	r3, r3, #4
 8003206:	6713      	str	r3, [r2, #112]	; 0x70
 8003208:	4b78      	ldr	r3, [pc, #480]	; (80033ec <HAL_RCC_OscConfig+0x4e8>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320c:	4a77      	ldr	r2, [pc, #476]	; (80033ec <HAL_RCC_OscConfig+0x4e8>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6713      	str	r3, [r2, #112]	; 0x70
 8003214:	e00b      	b.n	800322e <HAL_RCC_OscConfig+0x32a>
 8003216:	4b75      	ldr	r3, [pc, #468]	; (80033ec <HAL_RCC_OscConfig+0x4e8>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	4a74      	ldr	r2, [pc, #464]	; (80033ec <HAL_RCC_OscConfig+0x4e8>)
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	6713      	str	r3, [r2, #112]	; 0x70
 8003222:	4b72      	ldr	r3, [pc, #456]	; (80033ec <HAL_RCC_OscConfig+0x4e8>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	4a71      	ldr	r2, [pc, #452]	; (80033ec <HAL_RCC_OscConfig+0x4e8>)
 8003228:	f023 0304 	bic.w	r3, r3, #4
 800322c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d015      	beq.n	8003262 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003236:	f7ff fbb1 	bl	800299c <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323c:	e00a      	b.n	8003254 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800323e:	f7ff fbad 	bl	800299c <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f241 3288 	movw	r2, #5000	; 0x1388
 800324c:	4293      	cmp	r3, r2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e0c5      	b.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003254:	4b65      	ldr	r3, [pc, #404]	; (80033ec <HAL_RCC_OscConfig+0x4e8>)
 8003256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0ee      	beq.n	800323e <HAL_RCC_OscConfig+0x33a>
 8003260:	e014      	b.n	800328c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003262:	f7ff fb9b 	bl	800299c <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7ff fb97 	bl	800299c <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	; 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e0af      	b.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003280:	4b5a      	ldr	r3, [pc, #360]	; (80033ec <HAL_RCC_OscConfig+0x4e8>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1ee      	bne.n	800326a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d105      	bne.n	800329e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003292:	4b56      	ldr	r3, [pc, #344]	; (80033ec <HAL_RCC_OscConfig+0x4e8>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	4a55      	ldr	r2, [pc, #340]	; (80033ec <HAL_RCC_OscConfig+0x4e8>)
 8003298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800329c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 809b 	beq.w	80033de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032a8:	4b50      	ldr	r3, [pc, #320]	; (80033ec <HAL_RCC_OscConfig+0x4e8>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d05c      	beq.n	800336e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d141      	bne.n	8003340 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032bc:	4b4c      	ldr	r3, [pc, #304]	; (80033f0 <HAL_RCC_OscConfig+0x4ec>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c2:	f7ff fb6b 	bl	800299c <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ca:	f7ff fb67 	bl	800299c <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e081      	b.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032dc:	4b43      	ldr	r3, [pc, #268]	; (80033ec <HAL_RCC_OscConfig+0x4e8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f0      	bne.n	80032ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	019b      	lsls	r3, r3, #6
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	085b      	lsrs	r3, r3, #1
 8003300:	3b01      	subs	r3, #1
 8003302:	041b      	lsls	r3, r3, #16
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	061b      	lsls	r3, r3, #24
 800330c:	4937      	ldr	r1, [pc, #220]	; (80033ec <HAL_RCC_OscConfig+0x4e8>)
 800330e:	4313      	orrs	r3, r2
 8003310:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003312:	4b37      	ldr	r3, [pc, #220]	; (80033f0 <HAL_RCC_OscConfig+0x4ec>)
 8003314:	2201      	movs	r2, #1
 8003316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003318:	f7ff fb40 	bl	800299c <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003320:	f7ff fb3c 	bl	800299c <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e056      	b.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003332:	4b2e      	ldr	r3, [pc, #184]	; (80033ec <HAL_RCC_OscConfig+0x4e8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f0      	beq.n	8003320 <HAL_RCC_OscConfig+0x41c>
 800333e:	e04e      	b.n	80033de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003340:	4b2b      	ldr	r3, [pc, #172]	; (80033f0 <HAL_RCC_OscConfig+0x4ec>)
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003346:	f7ff fb29 	bl	800299c <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334e:	f7ff fb25 	bl	800299c <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e03f      	b.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003360:	4b22      	ldr	r3, [pc, #136]	; (80033ec <HAL_RCC_OscConfig+0x4e8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1f0      	bne.n	800334e <HAL_RCC_OscConfig+0x44a>
 800336c:	e037      	b.n	80033de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e032      	b.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800337a:	4b1c      	ldr	r3, [pc, #112]	; (80033ec <HAL_RCC_OscConfig+0x4e8>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d028      	beq.n	80033da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d121      	bne.n	80033da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d11a      	bne.n	80033da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033aa:	4013      	ands	r3, r2
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d111      	bne.n	80033da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	085b      	lsrs	r3, r3, #1
 80033c2:	3b01      	subs	r3, #1
 80033c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d107      	bne.n	80033da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d001      	beq.n	80033de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40007000 	.word	0x40007000
 80033ec:	40023800 	.word	0x40023800
 80033f0:	42470060 	.word	0x42470060

080033f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0cc      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003408:	4b68      	ldr	r3, [pc, #416]	; (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d90c      	bls.n	8003430 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003416:	4b65      	ldr	r3, [pc, #404]	; (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341e:	4b63      	ldr	r3, [pc, #396]	; (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d001      	beq.n	8003430 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0b8      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d020      	beq.n	800347e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003448:	4b59      	ldr	r3, [pc, #356]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4a58      	ldr	r2, [pc, #352]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003452:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003460:	4b53      	ldr	r3, [pc, #332]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	4a52      	ldr	r2, [pc, #328]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800346a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800346c:	4b50      	ldr	r3, [pc, #320]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	494d      	ldr	r1, [pc, #308]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	4313      	orrs	r3, r2
 800347c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d044      	beq.n	8003514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d107      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003492:	4b47      	ldr	r3, [pc, #284]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d119      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e07f      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d003      	beq.n	80034b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d107      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b2:	4b3f      	ldr	r3, [pc, #252]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e06f      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c2:	4b3b      	ldr	r3, [pc, #236]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e067      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034d2:	4b37      	ldr	r3, [pc, #220]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f023 0203 	bic.w	r2, r3, #3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	4934      	ldr	r1, [pc, #208]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e4:	f7ff fa5a 	bl	800299c <HAL_GetTick>
 80034e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ec:	f7ff fa56 	bl	800299c <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e04f      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003502:	4b2b      	ldr	r3, [pc, #172]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 020c 	and.w	r2, r3, #12
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	429a      	cmp	r2, r3
 8003512:	d1eb      	bne.n	80034ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003514:	4b25      	ldr	r3, [pc, #148]	; (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d20c      	bcs.n	800353c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	4b22      	ldr	r3, [pc, #136]	; (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800352a:	4b20      	ldr	r3, [pc, #128]	; (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d001      	beq.n	800353c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e032      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003548:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4916      	ldr	r1, [pc, #88]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003566:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	490e      	ldr	r1, [pc, #56]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800357a:	f000 f821 	bl	80035c0 <HAL_RCC_GetSysClockFreq>
 800357e:	4602      	mov	r2, r0
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	091b      	lsrs	r3, r3, #4
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	490a      	ldr	r1, [pc, #40]	; (80035b4 <HAL_RCC_ClockConfig+0x1c0>)
 800358c:	5ccb      	ldrb	r3, [r1, r3]
 800358e:	fa22 f303 	lsr.w	r3, r2, r3
 8003592:	4a09      	ldr	r2, [pc, #36]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003596:	4b09      	ldr	r3, [pc, #36]	; (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff f9ba 	bl	8002914 <HAL_InitTick>

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40023c00 	.word	0x40023c00
 80035b0:	40023800 	.word	0x40023800
 80035b4:	08004ab0 	.word	0x08004ab0
 80035b8:	20000008 	.word	0x20000008
 80035bc:	2000000c 	.word	0x2000000c

080035c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c0:	b5b0      	push	{r4, r5, r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035c6:	2100      	movs	r1, #0
 80035c8:	6079      	str	r1, [r7, #4]
 80035ca:	2100      	movs	r1, #0
 80035cc:	60f9      	str	r1, [r7, #12]
 80035ce:	2100      	movs	r1, #0
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035d2:	2100      	movs	r1, #0
 80035d4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035d6:	4952      	ldr	r1, [pc, #328]	; (8003720 <HAL_RCC_GetSysClockFreq+0x160>)
 80035d8:	6889      	ldr	r1, [r1, #8]
 80035da:	f001 010c 	and.w	r1, r1, #12
 80035de:	2908      	cmp	r1, #8
 80035e0:	d00d      	beq.n	80035fe <HAL_RCC_GetSysClockFreq+0x3e>
 80035e2:	2908      	cmp	r1, #8
 80035e4:	f200 8094 	bhi.w	8003710 <HAL_RCC_GetSysClockFreq+0x150>
 80035e8:	2900      	cmp	r1, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_RCC_GetSysClockFreq+0x32>
 80035ec:	2904      	cmp	r1, #4
 80035ee:	d003      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0x38>
 80035f0:	e08e      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035f2:	4b4c      	ldr	r3, [pc, #304]	; (8003724 <HAL_RCC_GetSysClockFreq+0x164>)
 80035f4:	60bb      	str	r3, [r7, #8]
       break;
 80035f6:	e08e      	b.n	8003716 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035f8:	4b4b      	ldr	r3, [pc, #300]	; (8003728 <HAL_RCC_GetSysClockFreq+0x168>)
 80035fa:	60bb      	str	r3, [r7, #8]
      break;
 80035fc:	e08b      	b.n	8003716 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035fe:	4948      	ldr	r1, [pc, #288]	; (8003720 <HAL_RCC_GetSysClockFreq+0x160>)
 8003600:	6849      	ldr	r1, [r1, #4]
 8003602:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003606:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003608:	4945      	ldr	r1, [pc, #276]	; (8003720 <HAL_RCC_GetSysClockFreq+0x160>)
 800360a:	6849      	ldr	r1, [r1, #4]
 800360c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003610:	2900      	cmp	r1, #0
 8003612:	d024      	beq.n	800365e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003614:	4942      	ldr	r1, [pc, #264]	; (8003720 <HAL_RCC_GetSysClockFreq+0x160>)
 8003616:	6849      	ldr	r1, [r1, #4]
 8003618:	0989      	lsrs	r1, r1, #6
 800361a:	4608      	mov	r0, r1
 800361c:	f04f 0100 	mov.w	r1, #0
 8003620:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003624:	f04f 0500 	mov.w	r5, #0
 8003628:	ea00 0204 	and.w	r2, r0, r4
 800362c:	ea01 0305 	and.w	r3, r1, r5
 8003630:	493d      	ldr	r1, [pc, #244]	; (8003728 <HAL_RCC_GetSysClockFreq+0x168>)
 8003632:	fb01 f003 	mul.w	r0, r1, r3
 8003636:	2100      	movs	r1, #0
 8003638:	fb01 f102 	mul.w	r1, r1, r2
 800363c:	1844      	adds	r4, r0, r1
 800363e:	493a      	ldr	r1, [pc, #232]	; (8003728 <HAL_RCC_GetSysClockFreq+0x168>)
 8003640:	fba2 0101 	umull	r0, r1, r2, r1
 8003644:	1863      	adds	r3, r4, r1
 8003646:	4619      	mov	r1, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	461a      	mov	r2, r3
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	f7fc fdc0 	bl	80001d4 <__aeabi_uldivmod>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4613      	mov	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	e04a      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800365e:	4b30      	ldr	r3, [pc, #192]	; (8003720 <HAL_RCC_GetSysClockFreq+0x160>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	099b      	lsrs	r3, r3, #6
 8003664:	461a      	mov	r2, r3
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800366e:	f04f 0100 	mov.w	r1, #0
 8003672:	ea02 0400 	and.w	r4, r2, r0
 8003676:	ea03 0501 	and.w	r5, r3, r1
 800367a:	4620      	mov	r0, r4
 800367c:	4629      	mov	r1, r5
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	014b      	lsls	r3, r1, #5
 8003688:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800368c:	0142      	lsls	r2, r0, #5
 800368e:	4610      	mov	r0, r2
 8003690:	4619      	mov	r1, r3
 8003692:	1b00      	subs	r0, r0, r4
 8003694:	eb61 0105 	sbc.w	r1, r1, r5
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	018b      	lsls	r3, r1, #6
 80036a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036a6:	0182      	lsls	r2, r0, #6
 80036a8:	1a12      	subs	r2, r2, r0
 80036aa:	eb63 0301 	sbc.w	r3, r3, r1
 80036ae:	f04f 0000 	mov.w	r0, #0
 80036b2:	f04f 0100 	mov.w	r1, #0
 80036b6:	00d9      	lsls	r1, r3, #3
 80036b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036bc:	00d0      	lsls	r0, r2, #3
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	1912      	adds	r2, r2, r4
 80036c4:	eb45 0303 	adc.w	r3, r5, r3
 80036c8:	f04f 0000 	mov.w	r0, #0
 80036cc:	f04f 0100 	mov.w	r1, #0
 80036d0:	0299      	lsls	r1, r3, #10
 80036d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036d6:	0290      	lsls	r0, r2, #10
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4610      	mov	r0, r2
 80036de:	4619      	mov	r1, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	461a      	mov	r2, r3
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	f7fc fd74 	bl	80001d4 <__aeabi_uldivmod>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4613      	mov	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036f4:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <HAL_RCC_GetSysClockFreq+0x160>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	0c1b      	lsrs	r3, r3, #16
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	3301      	adds	r3, #1
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	fbb2 f3f3 	udiv	r3, r2, r3
 800370c:	60bb      	str	r3, [r7, #8]
      break;
 800370e:	e002      	b.n	8003716 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003710:	4b04      	ldr	r3, [pc, #16]	; (8003724 <HAL_RCC_GetSysClockFreq+0x164>)
 8003712:	60bb      	str	r3, [r7, #8]
      break;
 8003714:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003716:	68bb      	ldr	r3, [r7, #8]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bdb0      	pop	{r4, r5, r7, pc}
 8003720:	40023800 	.word	0x40023800
 8003724:	00f42400 	.word	0x00f42400
 8003728:	018cba80 	.word	0x018cba80

0800372c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e07b      	b.n	8003836 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	2b00      	cmp	r3, #0
 8003744:	d108      	bne.n	8003758 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800374e:	d009      	beq.n	8003764 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	61da      	str	r2, [r3, #28]
 8003756:	e005      	b.n	8003764 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fe ffd0 	bl	8002724 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800379a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e8:	ea42 0103 	orr.w	r1, r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	0c1b      	lsrs	r3, r3, #16
 8003802:	f003 0104 	and.w	r1, r3, #4
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	f003 0210 	and.w	r2, r3, #16
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69da      	ldr	r2, [r3, #28]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003824:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b088      	sub	sp, #32
 8003842:	af00      	add	r7, sp, #0
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	603b      	str	r3, [r7, #0]
 800384a:	4613      	mov	r3, r2
 800384c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_SPI_Transmit+0x22>
 800385c:	2302      	movs	r3, #2
 800385e:	e126      	b.n	8003aae <HAL_SPI_Transmit+0x270>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003868:	f7ff f898 	bl	800299c <HAL_GetTick>
 800386c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b01      	cmp	r3, #1
 800387c:	d002      	beq.n	8003884 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800387e:	2302      	movs	r3, #2
 8003880:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003882:	e10b      	b.n	8003a9c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <HAL_SPI_Transmit+0x52>
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d102      	bne.n	8003896 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003894:	e102      	b.n	8003a9c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2203      	movs	r2, #3
 800389a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	88fa      	ldrh	r2, [r7, #6]
 80038ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	88fa      	ldrh	r2, [r7, #6]
 80038b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038dc:	d10f      	bne.n	80038fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003908:	2b40      	cmp	r3, #64	; 0x40
 800390a:	d007      	beq.n	800391c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800391a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003924:	d14b      	bne.n	80039be <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <HAL_SPI_Transmit+0xf6>
 800392e:	8afb      	ldrh	r3, [r7, #22]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d13e      	bne.n	80039b2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	881a      	ldrh	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	1c9a      	adds	r2, r3, #2
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003958:	e02b      	b.n	80039b2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b02      	cmp	r3, #2
 8003966:	d112      	bne.n	800398e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	881a      	ldrh	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	1c9a      	adds	r2, r3, #2
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	86da      	strh	r2, [r3, #54]	; 0x36
 800398c:	e011      	b.n	80039b2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800398e:	f7ff f805 	bl	800299c <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d803      	bhi.n	80039a6 <HAL_SPI_Transmit+0x168>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d102      	bne.n	80039ac <HAL_SPI_Transmit+0x16e>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d102      	bne.n	80039b2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039b0:	e074      	b.n	8003a9c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1ce      	bne.n	800395a <HAL_SPI_Transmit+0x11c>
 80039bc:	e04c      	b.n	8003a58 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_SPI_Transmit+0x18e>
 80039c6:	8afb      	ldrh	r3, [r7, #22]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d140      	bne.n	8003a4e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	330c      	adds	r3, #12
 80039d6:	7812      	ldrb	r2, [r2, #0]
 80039d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80039f2:	e02c      	b.n	8003a4e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d113      	bne.n	8003a2a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	330c      	adds	r3, #12
 8003a0c:	7812      	ldrb	r2, [r2, #0]
 8003a0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a28:	e011      	b.n	8003a4e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a2a:	f7fe ffb7 	bl	800299c <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d803      	bhi.n	8003a42 <HAL_SPI_Transmit+0x204>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a40:	d102      	bne.n	8003a48 <HAL_SPI_Transmit+0x20a>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d102      	bne.n	8003a4e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a4c:	e026      	b.n	8003a9c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1cd      	bne.n	80039f4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	6839      	ldr	r1, [r7, #0]
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 f8b3 	bl	8003bc8 <SPI_EndRxTxTransaction>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10a      	bne.n	8003a8c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a76:	2300      	movs	r3, #0
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	77fb      	strb	r3, [r7, #31]
 8003a98:	e000      	b.n	8003a9c <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003aac:	7ffb      	ldrb	r3, [r7, #31]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3720      	adds	r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ac8:	f7fe ff68 	bl	800299c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	1a9b      	subs	r3, r3, r2
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ad8:	f7fe ff60 	bl	800299c <HAL_GetTick>
 8003adc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ade:	4b39      	ldr	r3, [pc, #228]	; (8003bc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	015b      	lsls	r3, r3, #5
 8003ae4:	0d1b      	lsrs	r3, r3, #20
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	fb02 f303 	mul.w	r3, r2, r3
 8003aec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aee:	e054      	b.n	8003b9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af6:	d050      	beq.n	8003b9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003af8:	f7fe ff50 	bl	800299c <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	69fa      	ldr	r2, [r7, #28]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d902      	bls.n	8003b0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d13d      	bne.n	8003b8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b26:	d111      	bne.n	8003b4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b30:	d004      	beq.n	8003b3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b3a:	d107      	bne.n	8003b4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b54:	d10f      	bne.n	8003b76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e017      	b.n	8003bba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	bf0c      	ite	eq
 8003baa:	2301      	moveq	r3, #1
 8003bac:	2300      	movne	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d19b      	bne.n	8003af0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3720      	adds	r7, #32
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000008 	.word	0x20000008

08003bc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bd4:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <SPI_EndRxTxTransaction+0x7c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a1b      	ldr	r2, [pc, #108]	; (8003c48 <SPI_EndRxTxTransaction+0x80>)
 8003bda:	fba2 2303 	umull	r2, r3, r2, r3
 8003bde:	0d5b      	lsrs	r3, r3, #21
 8003be0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003be4:	fb02 f303 	mul.w	r3, r2, r3
 8003be8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bf2:	d112      	bne.n	8003c1a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2180      	movs	r1, #128	; 0x80
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f7ff ff5a 	bl	8003ab8 <SPI_WaitFlagStateUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d016      	beq.n	8003c38 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0e:	f043 0220 	orr.w	r2, r3, #32
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e00f      	b.n	8003c3a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c30:	2b80      	cmp	r3, #128	; 0x80
 8003c32:	d0f2      	beq.n	8003c1a <SPI_EndRxTxTransaction+0x52>
 8003c34:	e000      	b.n	8003c38 <SPI_EndRxTxTransaction+0x70>
        break;
 8003c36:	bf00      	nop
  }

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000008 	.word	0x20000008
 8003c48:	165e9f81 	.word	0x165e9f81

08003c4c <__libc_init_array>:
 8003c4c:	b570      	push	{r4, r5, r6, lr}
 8003c4e:	4d0d      	ldr	r5, [pc, #52]	; (8003c84 <__libc_init_array+0x38>)
 8003c50:	4c0d      	ldr	r4, [pc, #52]	; (8003c88 <__libc_init_array+0x3c>)
 8003c52:	1b64      	subs	r4, r4, r5
 8003c54:	10a4      	asrs	r4, r4, #2
 8003c56:	2600      	movs	r6, #0
 8003c58:	42a6      	cmp	r6, r4
 8003c5a:	d109      	bne.n	8003c70 <__libc_init_array+0x24>
 8003c5c:	4d0b      	ldr	r5, [pc, #44]	; (8003c8c <__libc_init_array+0x40>)
 8003c5e:	4c0c      	ldr	r4, [pc, #48]	; (8003c90 <__libc_init_array+0x44>)
 8003c60:	f000 f820 	bl	8003ca4 <_init>
 8003c64:	1b64      	subs	r4, r4, r5
 8003c66:	10a4      	asrs	r4, r4, #2
 8003c68:	2600      	movs	r6, #0
 8003c6a:	42a6      	cmp	r6, r4
 8003c6c:	d105      	bne.n	8003c7a <__libc_init_array+0x2e>
 8003c6e:	bd70      	pop	{r4, r5, r6, pc}
 8003c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c74:	4798      	blx	r3
 8003c76:	3601      	adds	r6, #1
 8003c78:	e7ee      	b.n	8003c58 <__libc_init_array+0xc>
 8003c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c7e:	4798      	blx	r3
 8003c80:	3601      	adds	r6, #1
 8003c82:	e7f2      	b.n	8003c6a <__libc_init_array+0x1e>
 8003c84:	08004ac8 	.word	0x08004ac8
 8003c88:	08004ac8 	.word	0x08004ac8
 8003c8c:	08004ac8 	.word	0x08004ac8
 8003c90:	08004acc 	.word	0x08004acc

08003c94 <memset>:
 8003c94:	4402      	add	r2, r0
 8003c96:	4603      	mov	r3, r0
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d100      	bne.n	8003c9e <memset+0xa>
 8003c9c:	4770      	bx	lr
 8003c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003ca2:	e7f9      	b.n	8003c98 <memset+0x4>

08003ca4 <_init>:
 8003ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca6:	bf00      	nop
 8003ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003caa:	bc08      	pop	{r3}
 8003cac:	469e      	mov	lr, r3
 8003cae:	4770      	bx	lr

08003cb0 <_fini>:
 8003cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb2:	bf00      	nop
 8003cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb6:	bc08      	pop	{r3}
 8003cb8:	469e      	mov	lr, r3
 8003cba:	4770      	bx	lr
