
ADC_LED_Potentiometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ad4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002c68  08002c68  00012c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c78  08002c78  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c78  08002c78  00012c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c80  08002c80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c80  08002c80  00012c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c84  08002c84  00012c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08002c94  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002c94  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f75  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016df  00000000  00000000  00029fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002b690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002c0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016272  00000000  00000000  0002ca68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae6e  00000000  00000000  00042cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000926aa  00000000  00000000  0004db48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e01f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b08  00000000  00000000  000e0248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002c50 	.word	0x08002c50

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002c50 	.word	0x08002c50

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fab4 	bl	8000a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f828 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f958 	bl	800078c <MX_GPIO_Init>
  MX_ADC1_Init();
 80004dc:	f000 f88e 	bl	80005fc <MX_ADC1_Init>
  MX_TIM2_Init();
 80004e0:	f000 f8de 	bl	80006a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004e4:	2100      	movs	r1, #0
 80004e6:	480d      	ldr	r0, [pc, #52]	; (800051c <main+0x50>)
 80004e8:	f001 fe12 	bl	8002110 <HAL_TIM_PWM_Start>
    /* USER CODE BEGIN 3 */

		  /* Configure ADC in Polling Mode */

			  {
				  HAL_ADC_Start(&hadc1);
 80004ec:	480c      	ldr	r0, [pc, #48]	; (8000520 <main+0x54>)
 80004ee:	f000 fb7f 	bl	8000bf0 <HAL_ADC_Start>
				  HAL_ADC_PollForConversion(&hadc1, 1);
 80004f2:	2101      	movs	r1, #1
 80004f4:	480a      	ldr	r0, [pc, #40]	; (8000520 <main+0x54>)
 80004f6:	f000 fc2f 	bl	8000d58 <HAL_ADC_PollForConversion>
				  AD_RES = HAL_ADC_GetValue(&hadc1);
 80004fa:	4809      	ldr	r0, [pc, #36]	; (8000520 <main+0x54>)
 80004fc:	f000 fcb7 	bl	8000e6e <HAL_ADC_GetValue>
 8000500:	4603      	mov	r3, r0
 8000502:	b29a      	uxth	r2, r3
 8000504:	4b07      	ldr	r3, [pc, #28]	; (8000524 <main+0x58>)
 8000506:	801a      	strh	r2, [r3, #0]
				  TIM2->CCR1 = (AD_RES<<4);
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <main+0x58>)
 800050a:	881b      	ldrh	r3, [r3, #0]
 800050c:	011a      	lsls	r2, r3, #4
 800050e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000512:	635a      	str	r2, [r3, #52]	; 0x34
				  HAL_Delay(1);
 8000514:	2001      	movs	r0, #1
 8000516:	f000 fb03 	bl	8000b20 <HAL_Delay>
				  HAL_ADC_Start(&hadc1);
 800051a:	e7e7      	b.n	80004ec <main+0x20>
 800051c:	20000074 	.word	0x20000074
 8000520:	2000002c 	.word	0x2000002c
 8000524:	20000028 	.word	0x20000028

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	; 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	; 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f002 fb82 	bl	8002c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b28      	ldr	r3, [pc, #160]	; (80005f4 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	4a27      	ldr	r2, [pc, #156]	; (80005f4 <SystemClock_Config+0xcc>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	; 0x40
 800055c:	4b25      	ldr	r3, [pc, #148]	; (80005f4 <SystemClock_Config+0xcc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000574:	4a20      	ldr	r2, [pc, #128]	; (80005f8 <SystemClock_Config+0xd0>)
 8000576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000588:	2301      	movs	r3, #1
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000596:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800059c:	2319      	movs	r3, #25
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005a0:	23a8      	movs	r3, #168	; 0xa8
 80005a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005a8:	2304      	movs	r3, #4
 80005aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 f8f1 	bl	8001798 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005bc:	f000 f90e 	bl	80007dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	2302      	movs	r3, #2
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	2102      	movs	r1, #2
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 fb53 	bl	8001c88 <HAL_RCC_ClockConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005e8:	f000 f8f8 	bl	80007dc <Error_Handler>
  }
}
 80005ec:	bf00      	nop
 80005ee:	3750      	adds	r7, #80	; 0x50
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800060e:	4b21      	ldr	r3, [pc, #132]	; (8000694 <MX_ADC1_Init+0x98>)
 8000610:	4a21      	ldr	r2, [pc, #132]	; (8000698 <MX_ADC1_Init+0x9c>)
 8000612:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_ADC1_Init+0x98>)
 8000616:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800061a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061c:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <MX_ADC1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000622:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000628:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_ADC1_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <MX_ADC1_Init+0x98>)
 800063e:	4a17      	ldr	r2, [pc, #92]	; (800069c <MX_ADC1_Init+0xa0>)
 8000640:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_ADC1_Init+0x98>)
 800064a:	2201      	movs	r2, #1
 800064c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_ADC1_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_ADC1_Init+0x98>)
 8000658:	2201      	movs	r2, #1
 800065a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <MX_ADC1_Init+0x98>)
 800065e:	f000 fa83 	bl	8000b68 <HAL_ADC_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000668:	f000 f8b8 	bl	80007dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800066c:	2305      	movs	r3, #5
 800066e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000674:	2301      	movs	r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	4619      	mov	r1, r3
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_ADC1_Init+0x98>)
 800067e:	f000 fc03 	bl	8000e88 <HAL_ADC_ConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000688:	f000 f8a8 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2000002c 	.word	0x2000002c
 8000698:	40012000 	.word	0x40012000
 800069c:	0f000001 	.word	0x0f000001

080006a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08e      	sub	sp, #56	; 0x38
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
 80006cc:	615a      	str	r2, [r3, #20]
 80006ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006d0:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <MX_TIM2_Init+0xe8>)
 80006d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006d8:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <MX_TIM2_Init+0xe8>)
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006de:	4b2a      	ldr	r3, [pc, #168]	; (8000788 <MX_TIM2_Init+0xe8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <MX_TIM2_Init+0xe8>)
 80006e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ec:	4b26      	ldr	r3, [pc, #152]	; (8000788 <MX_TIM2_Init+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f2:	4b25      	ldr	r3, [pc, #148]	; (8000788 <MX_TIM2_Init+0xe8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006f8:	4823      	ldr	r0, [pc, #140]	; (8000788 <MX_TIM2_Init+0xe8>)
 80006fa:	f001 fc61 	bl	8001fc0 <HAL_TIM_Base_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000704:	f000 f86a 	bl	80007dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800070e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000712:	4619      	mov	r1, r3
 8000714:	481c      	ldr	r0, [pc, #112]	; (8000788 <MX_TIM2_Init+0xe8>)
 8000716:	f001 fe6d 	bl	80023f4 <HAL_TIM_ConfigClockSource>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000720:	f000 f85c 	bl	80007dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000724:	4818      	ldr	r0, [pc, #96]	; (8000788 <MX_TIM2_Init+0xe8>)
 8000726:	f001 fc9a 	bl	800205e <HAL_TIM_PWM_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000730:	f000 f854 	bl	80007dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4619      	mov	r1, r3
 8000742:	4811      	ldr	r0, [pc, #68]	; (8000788 <MX_TIM2_Init+0xe8>)
 8000744:	f002 f9ea 	bl	8002b1c <HAL_TIMEx_MasterConfigSynchronization>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800074e:	f000 f845 	bl	80007dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000752:	2360      	movs	r3, #96	; 0x60
 8000754:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	4619      	mov	r1, r3
 8000768:	4807      	ldr	r0, [pc, #28]	; (8000788 <MX_TIM2_Init+0xe8>)
 800076a:	f001 fd81 	bl	8002270 <HAL_TIM_PWM_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000774:	f000 f832 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000778:	4803      	ldr	r0, [pc, #12]	; (8000788 <MX_TIM2_Init+0xe8>)
 800077a:	f000 f8c1 	bl	8000900 <HAL_TIM_MspPostInit>

}
 800077e:	bf00      	nop
 8000780:	3738      	adds	r7, #56	; 0x38
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000074 	.word	0x20000074

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_GPIO_Init+0x4c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <MX_GPIO_Init+0x4c>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <MX_GPIO_Init+0x4c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_GPIO_Init+0x4c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <MX_GPIO_Init+0x4c>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_GPIO_Init+0x4c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <Error_Handler+0x8>
	...

080007e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <HAL_MspInit+0x4c>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	4a0f      	ldr	r2, [pc, #60]	; (8000834 <HAL_MspInit+0x4c>)
 80007f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fc:	6453      	str	r3, [r2, #68]	; 0x44
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <HAL_MspInit+0x4c>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_MspInit+0x4c>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_MspInit+0x4c>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	6413      	str	r3, [r2, #64]	; 0x40
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a17      	ldr	r2, [pc, #92]	; (80008b4 <HAL_ADC_MspInit+0x7c>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d127      	bne.n	80008aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <HAL_ADC_MspInit+0x80>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	4a15      	ldr	r2, [pc, #84]	; (80008b8 <HAL_ADC_MspInit+0x80>)
 8000864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000868:	6453      	str	r3, [r2, #68]	; 0x44
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <HAL_ADC_MspInit+0x80>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_ADC_MspInit+0x80>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <HAL_ADC_MspInit+0x80>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_ADC_MspInit+0x80>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000892:	2320      	movs	r3, #32
 8000894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000896:	2303      	movs	r3, #3
 8000898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	4805      	ldr	r0, [pc, #20]	; (80008bc <HAL_ADC_MspInit+0x84>)
 80008a6:	f000 fdf3 	bl	8001490 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008aa:	bf00      	nop
 80008ac:	3728      	adds	r7, #40	; 0x28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40012000 	.word	0x40012000
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020000 	.word	0x40020000

080008c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008d0:	d10d      	bne.n	80008ee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_TIM_Base_MspInit+0x3c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_TIM_Base_MspInit+0x3c>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_TIM_Base_MspInit+0x3c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008ee:	bf00      	nop
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000920:	d11d      	bne.n	800095e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_TIM_MspPostInit+0x68>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <HAL_TIM_MspPostInit+0x68>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <HAL_TIM_MspPostInit+0x68>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_LED_Pin;
 800093e:	2301      	movs	r3, #1
 8000940:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800094e:	2301      	movs	r3, #1
 8000950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM2_CH1_LED_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	4619      	mov	r1, r3
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <HAL_TIM_MspPostInit+0x6c>)
 800095a:	f000 fd99 	bl	8001490 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800095e:	bf00      	nop
 8000960:	3720      	adds	r7, #32
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800
 800096c:	40020000 	.word	0x40020000

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 f890 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <SystemInit+0x20>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <SystemInit+0x20>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009ec:	480d      	ldr	r0, [pc, #52]	; (8000a24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ee:	490e      	ldr	r1, [pc, #56]	; (8000a28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009f0:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a04:	4c0b      	ldr	r4, [pc, #44]	; (8000a34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a12:	f7ff ffd7 	bl	80009c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a16:	f002 f8ef 	bl	8002bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a1a:	f7ff fd57 	bl	80004cc <main>
  bx  lr    
 8000a1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a20:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a2c:	08002c88 	.word	0x08002c88
  ldr r2, =_sbss
 8000a30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a34:	200000c0 	.word	0x200000c0

08000a38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC_IRQHandler>
	...

08000a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <HAL_Init+0x40>)
 8000a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <HAL_Init+0x40>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_Init+0x40>)
 8000a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_Init+0x40>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <HAL_Init+0x40>)
 8000a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 fcdf 	bl	8001428 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f000 f808 	bl	8000a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a70:	f7ff feba 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023c00 	.word	0x40023c00

08000a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_InitTick+0x54>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_InitTick+0x58>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4619      	mov	r1, r3
 8000a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 fce9 	bl	8001476 <HAL_SYSTICK_Config>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00e      	b.n	8000acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b0f      	cmp	r3, #15
 8000ab2:	d80a      	bhi.n	8000aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	f000 fcbf 	bl	800143e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac0:	4a06      	ldr	r2, [pc, #24]	; (8000adc <HAL_InitTick+0x5c>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e000      	b.n	8000acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000004 	.word	0x20000004

08000ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x20>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_IncTick+0x24>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <HAL_IncTick+0x24>)
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000008 	.word	0x20000008
 8000b04:	200000bc 	.word	0x200000bc

08000b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <HAL_GetTick+0x14>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	200000bc 	.word	0x200000bc

08000b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b28:	f7ff ffee 	bl	8000b08 <HAL_GetTick>
 8000b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b38:	d005      	beq.n	8000b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_Delay+0x44>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4413      	add	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b46:	bf00      	nop
 8000b48:	f7ff ffde 	bl	8000b08 <HAL_GetTick>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d8f7      	bhi.n	8000b48 <HAL_Delay+0x28>
  {
  }
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000008 	.word	0x20000008

08000b68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e033      	b.n	8000be6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d109      	bne.n	8000b9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff fe56 	bl	8000838 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f003 0310 	and.w	r3, r3, #16
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d118      	bne.n	8000bd8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bae:	f023 0302 	bic.w	r3, r3, #2
 8000bb2:	f043 0202 	orr.w	r2, r3, #2
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f000 fa86 	bl	80010cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f023 0303 	bic.w	r3, r3, #3
 8000bce:	f043 0201 	orr.w	r2, r3, #1
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	641a      	str	r2, [r3, #64]	; 0x40
 8000bd6:	e001      	b.n	8000bdc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d101      	bne.n	8000c0a <HAL_ADC_Start+0x1a>
 8000c06:	2302      	movs	r3, #2
 8000c08:	e097      	b.n	8000d3a <HAL_ADC_Start+0x14a>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d018      	beq.n	8000c52 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	689a      	ldr	r2, [r3, #8]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f042 0201 	orr.w	r2, r2, #1
 8000c2e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c30:	4b45      	ldr	r3, [pc, #276]	; (8000d48 <HAL_ADC_Start+0x158>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a45      	ldr	r2, [pc, #276]	; (8000d4c <HAL_ADC_Start+0x15c>)
 8000c36:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3a:	0c9a      	lsrs	r2, r3, #18
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4413      	add	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000c44:	e002      	b.n	8000c4c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d1f9      	bne.n	8000c46 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d15f      	bne.n	8000d20 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c68:	f023 0301 	bic.w	r3, r3, #1
 8000c6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d007      	beq.n	8000c92 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c9e:	d106      	bne.n	8000cae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca4:	f023 0206 	bic.w	r2, r3, #6
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	645a      	str	r2, [r3, #68]	; 0x44
 8000cac:	e002      	b.n	8000cb4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000cbc:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <HAL_ADC_Start+0x160>)
 8000cbe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000cc8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f003 031f 	and.w	r3, r3, #31
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d10f      	bne.n	8000cf6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d129      	bne.n	8000d38 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	689a      	ldr	r2, [r3, #8]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	e020      	b.n	8000d38 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a16      	ldr	r2, [pc, #88]	; (8000d54 <HAL_ADC_Start+0x164>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d11b      	bne.n	8000d38 <HAL_ADC_Start+0x148>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d114      	bne.n	8000d38 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	e00b      	b.n	8000d38 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	f043 0210 	orr.w	r2, r3, #16
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d30:	f043 0201 	orr.w	r2, r3, #1
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	431bde83 	.word	0x431bde83
 8000d50:	40012300 	.word	0x40012300
 8000d54:	40012000 	.word	0x40012000

08000d58 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d74:	d113      	bne.n	8000d9e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d84:	d10b      	bne.n	8000d9e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f043 0220 	orr.w	r2, r3, #32
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e063      	b.n	8000e66 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000d9e:	f7ff feb3 	bl	8000b08 <HAL_GetTick>
 8000da2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000da4:	e021      	b.n	8000dea <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dac:	d01d      	beq.n	8000dea <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d007      	beq.n	8000dc4 <HAL_ADC_PollForConversion+0x6c>
 8000db4:	f7ff fea8 	bl	8000b08 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	683a      	ldr	r2, [r7, #0]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d212      	bcs.n	8000dea <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d00b      	beq.n	8000dea <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f043 0204 	orr.w	r2, r3, #4
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e03d      	b.n	8000e66 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d1d6      	bne.n	8000da6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f06f 0212 	mvn.w	r2, #18
 8000e00:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d123      	bne.n	8000e64 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d11f      	bne.n	8000e64 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d006      	beq.n	8000e40 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d111      	bne.n	8000e64 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d105      	bne.n	8000e64 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	f043 0201 	orr.w	r2, r3, #1
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d101      	bne.n	8000ea4 <HAL_ADC_ConfigChannel+0x1c>
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	e105      	b.n	80010b0 <HAL_ADC_ConfigChannel+0x228>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b09      	cmp	r3, #9
 8000eb2:	d925      	bls.n	8000f00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	68d9      	ldr	r1, [r3, #12]
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	4413      	add	r3, r2
 8000ec8:	3b1e      	subs	r3, #30
 8000eca:	2207      	movs	r2, #7
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43da      	mvns	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	400a      	ands	r2, r1
 8000ed8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	68d9      	ldr	r1, [r3, #12]
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	4603      	mov	r3, r0
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	4403      	add	r3, r0
 8000ef2:	3b1e      	subs	r3, #30
 8000ef4:	409a      	lsls	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	430a      	orrs	r2, r1
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	e022      	b.n	8000f46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6919      	ldr	r1, [r3, #16]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4613      	mov	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	2207      	movs	r2, #7
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	400a      	ands	r2, r1
 8000f22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6919      	ldr	r1, [r3, #16]
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	689a      	ldr	r2, [r3, #8]
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	4618      	mov	r0, r3
 8000f36:	4603      	mov	r3, r0
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4403      	add	r3, r0
 8000f3c:	409a      	lsls	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	430a      	orrs	r2, r1
 8000f44:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d824      	bhi.n	8000f98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	3b05      	subs	r3, #5
 8000f60:	221f      	movs	r2, #31
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	400a      	ands	r2, r1
 8000f6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	4613      	mov	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	3b05      	subs	r3, #5
 8000f8a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	635a      	str	r2, [r3, #52]	; 0x34
 8000f96:	e04c      	b.n	8001032 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b0c      	cmp	r3, #12
 8000f9e:	d824      	bhi.n	8000fea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	3b23      	subs	r3, #35	; 0x23
 8000fb2:	221f      	movs	r2, #31
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43da      	mvns	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	400a      	ands	r2, r1
 8000fc0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	3b23      	subs	r3, #35	; 0x23
 8000fdc:	fa00 f203 	lsl.w	r2, r0, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8000fe8:	e023      	b.n	8001032 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	3b41      	subs	r3, #65	; 0x41
 8000ffc:	221f      	movs	r2, #31
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43da      	mvns	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	400a      	ands	r2, r1
 800100a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	b29b      	uxth	r3, r3
 8001018:	4618      	mov	r0, r3
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	3b41      	subs	r3, #65	; 0x41
 8001026:	fa00 f203 	lsl.w	r2, r0, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	430a      	orrs	r2, r1
 8001030:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001032:	4b22      	ldr	r3, [pc, #136]	; (80010bc <HAL_ADC_ConfigChannel+0x234>)
 8001034:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <HAL_ADC_ConfigChannel+0x238>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d109      	bne.n	8001054 <HAL_ADC_ConfigChannel+0x1cc>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b12      	cmp	r3, #18
 8001046:	d105      	bne.n	8001054 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a19      	ldr	r2, [pc, #100]	; (80010c0 <HAL_ADC_ConfigChannel+0x238>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d123      	bne.n	80010a6 <HAL_ADC_ConfigChannel+0x21e>
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b10      	cmp	r3, #16
 8001064:	d003      	beq.n	800106e <HAL_ADC_ConfigChannel+0x1e6>
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b11      	cmp	r3, #17
 800106c:	d11b      	bne.n	80010a6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b10      	cmp	r3, #16
 8001080:	d111      	bne.n	80010a6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_ADC_ConfigChannel+0x23c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a10      	ldr	r2, [pc, #64]	; (80010c8 <HAL_ADC_ConfigChannel+0x240>)
 8001088:	fba2 2303 	umull	r2, r3, r2, r3
 800108c:	0c9a      	lsrs	r2, r3, #18
 800108e:	4613      	mov	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001098:	e002      	b.n	80010a0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	3b01      	subs	r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f9      	bne.n	800109a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	40012300 	.word	0x40012300
 80010c0:	40012000 	.word	0x40012000
 80010c4:	20000000 	.word	0x20000000
 80010c8:	431bde83 	.word	0x431bde83

080010cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010d4:	4b79      	ldr	r3, [pc, #484]	; (80012bc <ADC_Init+0x1f0>)
 80010d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	431a      	orrs	r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001100:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6859      	ldr	r1, [r3, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	021a      	lsls	r2, r3, #8
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	430a      	orrs	r2, r1
 8001114:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001124:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6859      	ldr	r1, [r3, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	430a      	orrs	r2, r1
 8001136:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001146:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6899      	ldr	r1, [r3, #8]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68da      	ldr	r2, [r3, #12]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115e:	4a58      	ldr	r2, [pc, #352]	; (80012c0 <ADC_Init+0x1f4>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d022      	beq.n	80011aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001172:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6899      	ldr	r1, [r3, #8]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	430a      	orrs	r2, r1
 8001184:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001194:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	6899      	ldr	r1, [r3, #8]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	e00f      	b.n	80011ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 0202 	bic.w	r2, r2, #2
 80011d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6899      	ldr	r1, [r3, #8]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	7e1b      	ldrb	r3, [r3, #24]
 80011e4:	005a      	lsls	r2, r3, #1
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d01b      	beq.n	8001230 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001206:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001216:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6859      	ldr	r1, [r3, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001222:	3b01      	subs	r3, #1
 8001224:	035a      	lsls	r2, r3, #13
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	430a      	orrs	r2, r1
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	e007      	b.n	8001240 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800123e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800124e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	3b01      	subs	r3, #1
 800125c:	051a      	lsls	r2, r3, #20
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	430a      	orrs	r2, r1
 8001264:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001274:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6899      	ldr	r1, [r3, #8]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001282:	025a      	lsls	r2, r3, #9
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800129a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6899      	ldr	r1, [r3, #8]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	029a      	lsls	r2, r3, #10
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	609a      	str	r2, [r3, #8]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	40012300 	.word	0x40012300
 80012c0:	0f000001 	.word	0x0f000001

080012c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f6:	4a04      	ldr	r2, [pc, #16]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	60d3      	str	r3, [r2, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <__NVIC_GetPriorityGrouping+0x18>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	f003 0307 	and.w	r3, r3, #7
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	; (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	; (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
         );
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	; 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f4:	d301      	bcc.n	80013fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00f      	b.n	800141a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <SysTick_Config+0x40>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001402:	210f      	movs	r1, #15
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f7ff ff8e 	bl	8001328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <SysTick_Config+0x40>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <SysTick_Config+0x40>)
 8001414:	2207      	movs	r2, #7
 8001416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	e000e010 	.word	0xe000e010

08001428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff47 	bl	80012c4 <__NVIC_SetPriorityGrouping>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001450:	f7ff ff5c 	bl	800130c <__NVIC_GetPriorityGrouping>
 8001454:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	6978      	ldr	r0, [r7, #20]
 800145c:	f7ff ff8e 	bl	800137c <NVIC_EncodePriority>
 8001460:	4602      	mov	r2, r0
 8001462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff5d 	bl	8001328 <__NVIC_SetPriority>
}
 800146e:	bf00      	nop
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ffb0 	bl	80013e4 <SysTick_Config>
 8001484:	4603      	mov	r3, r0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
 80014aa:	e159      	b.n	8001760 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014ac:	2201      	movs	r2, #1
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	f040 8148 	bne.w	800175a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d005      	beq.n	80014e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d130      	bne.n	8001544 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	2203      	movs	r2, #3
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4013      	ands	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001518:	2201      	movs	r2, #1
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	091b      	lsrs	r3, r3, #4
 800152e:	f003 0201 	and.w	r2, r3, #1
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b03      	cmp	r3, #3
 800154e:	d017      	beq.n	8001580 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	2203      	movs	r2, #3
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d123      	bne.n	80015d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	08da      	lsrs	r2, r3, #3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3208      	adds	r2, #8
 8001594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	220f      	movs	r2, #15
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	691a      	ldr	r2, [r3, #16]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	08da      	lsrs	r2, r3, #3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3208      	adds	r2, #8
 80015ce:	69b9      	ldr	r1, [r7, #24]
 80015d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	2203      	movs	r2, #3
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0203 	and.w	r2, r3, #3
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 80a2 	beq.w	800175a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b57      	ldr	r3, [pc, #348]	; (8001778 <HAL_GPIO_Init+0x2e8>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	4a56      	ldr	r2, [pc, #344]	; (8001778 <HAL_GPIO_Init+0x2e8>)
 8001620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001624:	6453      	str	r3, [r2, #68]	; 0x44
 8001626:	4b54      	ldr	r3, [pc, #336]	; (8001778 <HAL_GPIO_Init+0x2e8>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001632:	4a52      	ldr	r2, [pc, #328]	; (800177c <HAL_GPIO_Init+0x2ec>)
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	3302      	adds	r3, #2
 800163a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	220f      	movs	r2, #15
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a49      	ldr	r2, [pc, #292]	; (8001780 <HAL_GPIO_Init+0x2f0>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d019      	beq.n	8001692 <HAL_GPIO_Init+0x202>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a48      	ldr	r2, [pc, #288]	; (8001784 <HAL_GPIO_Init+0x2f4>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d013      	beq.n	800168e <HAL_GPIO_Init+0x1fe>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a47      	ldr	r2, [pc, #284]	; (8001788 <HAL_GPIO_Init+0x2f8>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d00d      	beq.n	800168a <HAL_GPIO_Init+0x1fa>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a46      	ldr	r2, [pc, #280]	; (800178c <HAL_GPIO_Init+0x2fc>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d007      	beq.n	8001686 <HAL_GPIO_Init+0x1f6>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a45      	ldr	r2, [pc, #276]	; (8001790 <HAL_GPIO_Init+0x300>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d101      	bne.n	8001682 <HAL_GPIO_Init+0x1f2>
 800167e:	2304      	movs	r3, #4
 8001680:	e008      	b.n	8001694 <HAL_GPIO_Init+0x204>
 8001682:	2307      	movs	r3, #7
 8001684:	e006      	b.n	8001694 <HAL_GPIO_Init+0x204>
 8001686:	2303      	movs	r3, #3
 8001688:	e004      	b.n	8001694 <HAL_GPIO_Init+0x204>
 800168a:	2302      	movs	r3, #2
 800168c:	e002      	b.n	8001694 <HAL_GPIO_Init+0x204>
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <HAL_GPIO_Init+0x204>
 8001692:	2300      	movs	r3, #0
 8001694:	69fa      	ldr	r2, [r7, #28]
 8001696:	f002 0203 	and.w	r2, r2, #3
 800169a:	0092      	lsls	r2, r2, #2
 800169c:	4093      	lsls	r3, r2
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016a4:	4935      	ldr	r1, [pc, #212]	; (800177c <HAL_GPIO_Init+0x2ec>)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	089b      	lsrs	r3, r3, #2
 80016aa:	3302      	adds	r3, #2
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b2:	4b38      	ldr	r3, [pc, #224]	; (8001794 <HAL_GPIO_Init+0x304>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016d6:	4a2f      	ldr	r2, [pc, #188]	; (8001794 <HAL_GPIO_Init+0x304>)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016dc:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <HAL_GPIO_Init+0x304>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001700:	4a24      	ldr	r2, [pc, #144]	; (8001794 <HAL_GPIO_Init+0x304>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001706:	4b23      	ldr	r3, [pc, #140]	; (8001794 <HAL_GPIO_Init+0x304>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800172a:	4a1a      	ldr	r2, [pc, #104]	; (8001794 <HAL_GPIO_Init+0x304>)
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001730:	4b18      	ldr	r3, [pc, #96]	; (8001794 <HAL_GPIO_Init+0x304>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001754:	4a0f      	ldr	r2, [pc, #60]	; (8001794 <HAL_GPIO_Init+0x304>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3301      	adds	r3, #1
 800175e:	61fb      	str	r3, [r7, #28]
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	2b0f      	cmp	r3, #15
 8001764:	f67f aea2 	bls.w	80014ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3724      	adds	r7, #36	; 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800
 800177c:	40013800 	.word	0x40013800
 8001780:	40020000 	.word	0x40020000
 8001784:	40020400 	.word	0x40020400
 8001788:	40020800 	.word	0x40020800
 800178c:	40020c00 	.word	0x40020c00
 8001790:	40021000 	.word	0x40021000
 8001794:	40013c00 	.word	0x40013c00

08001798 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e264      	b.n	8001c74 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d075      	beq.n	80018a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017b6:	4ba3      	ldr	r3, [pc, #652]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 030c 	and.w	r3, r3, #12
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d00c      	beq.n	80017dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017c2:	4ba0      	ldr	r3, [pc, #640]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d112      	bne.n	80017f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ce:	4b9d      	ldr	r3, [pc, #628]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017da:	d10b      	bne.n	80017f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017dc:	4b99      	ldr	r3, [pc, #612]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d05b      	beq.n	80018a0 <HAL_RCC_OscConfig+0x108>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d157      	bne.n	80018a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e23f      	b.n	8001c74 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017fc:	d106      	bne.n	800180c <HAL_RCC_OscConfig+0x74>
 80017fe:	4b91      	ldr	r3, [pc, #580]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a90      	ldr	r2, [pc, #576]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 8001804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e01d      	b.n	8001848 <HAL_RCC_OscConfig+0xb0>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0x98>
 8001816:	4b8b      	ldr	r3, [pc, #556]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a8a      	ldr	r2, [pc, #552]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 800181c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b88      	ldr	r3, [pc, #544]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a87      	ldr	r2, [pc, #540]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e00b      	b.n	8001848 <HAL_RCC_OscConfig+0xb0>
 8001830:	4b84      	ldr	r3, [pc, #528]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a83      	ldr	r2, [pc, #524]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 8001836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b81      	ldr	r3, [pc, #516]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a80      	ldr	r2, [pc, #512]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 8001842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d013      	beq.n	8001878 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff f95a 	bl	8000b08 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff f956 	bl	8000b08 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	; 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e204      	b.n	8001c74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	4b76      	ldr	r3, [pc, #472]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0xc0>
 8001876:	e014      	b.n	80018a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7ff f946 	bl	8000b08 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff f942 	bl	8000b08 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	; 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e1f0      	b.n	8001c74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001892:	4b6c      	ldr	r3, [pc, #432]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0xe8>
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d063      	beq.n	8001976 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018ae:	4b65      	ldr	r3, [pc, #404]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00b      	beq.n	80018d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ba:	4b62      	ldr	r3, [pc, #392]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d11c      	bne.n	8001900 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018c6:	4b5f      	ldr	r3, [pc, #380]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d116      	bne.n	8001900 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d2:	4b5c      	ldr	r3, [pc, #368]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_RCC_OscConfig+0x152>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d001      	beq.n	80018ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e1c4      	b.n	8001c74 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ea:	4b56      	ldr	r3, [pc, #344]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4952      	ldr	r1, [pc, #328]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fe:	e03a      	b.n	8001976 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d020      	beq.n	800194a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001908:	4b4f      	ldr	r3, [pc, #316]	; (8001a48 <HAL_RCC_OscConfig+0x2b0>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190e:	f7ff f8fb 	bl	8000b08 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001916:	f7ff f8f7 	bl	8000b08 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e1a5      	b.n	8001c74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001928:	4b46      	ldr	r3, [pc, #280]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001934:	4b43      	ldr	r3, [pc, #268]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4940      	ldr	r1, [pc, #256]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 8001944:	4313      	orrs	r3, r2
 8001946:	600b      	str	r3, [r1, #0]
 8001948:	e015      	b.n	8001976 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194a:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <HAL_RCC_OscConfig+0x2b0>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff f8da 	bl	8000b08 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001958:	f7ff f8d6 	bl	8000b08 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e184      	b.n	8001c74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196a:	4b36      	ldr	r3, [pc, #216]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b00      	cmp	r3, #0
 8001980:	d030      	beq.n	80019e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d016      	beq.n	80019b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800198a:	4b30      	ldr	r3, [pc, #192]	; (8001a4c <HAL_RCC_OscConfig+0x2b4>)
 800198c:	2201      	movs	r2, #1
 800198e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001990:	f7ff f8ba 	bl	8000b08 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001998:	f7ff f8b6 	bl	8000b08 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e164      	b.n	8001c74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019aa:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x200>
 80019b6:	e015      	b.n	80019e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b8:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <HAL_RCC_OscConfig+0x2b4>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019be:	f7ff f8a3 	bl	8000b08 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c6:	f7ff f89f 	bl	8000b08 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e14d      	b.n	8001c74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 80019da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f0      	bne.n	80019c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 80a0 	beq.w	8001b32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10f      	bne.n	8001a22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_RCC_OscConfig+0x2ac>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_RCC_OscConfig+0x2b8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d121      	bne.n	8001a72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_RCC_OscConfig+0x2b8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <HAL_RCC_OscConfig+0x2b8>)
 8001a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3a:	f7ff f865 	bl	8000b08 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a40:	e011      	b.n	8001a66 <HAL_RCC_OscConfig+0x2ce>
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	42470000 	.word	0x42470000
 8001a4c:	42470e80 	.word	0x42470e80
 8001a50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a54:	f7ff f858 	bl	8000b08 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e106      	b.n	8001c74 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a66:	4b85      	ldr	r3, [pc, #532]	; (8001c7c <HAL_RCC_OscConfig+0x4e4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d106      	bne.n	8001a88 <HAL_RCC_OscConfig+0x2f0>
 8001a7a:	4b81      	ldr	r3, [pc, #516]	; (8001c80 <HAL_RCC_OscConfig+0x4e8>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7e:	4a80      	ldr	r2, [pc, #512]	; (8001c80 <HAL_RCC_OscConfig+0x4e8>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6713      	str	r3, [r2, #112]	; 0x70
 8001a86:	e01c      	b.n	8001ac2 <HAL_RCC_OscConfig+0x32a>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d10c      	bne.n	8001aaa <HAL_RCC_OscConfig+0x312>
 8001a90:	4b7b      	ldr	r3, [pc, #492]	; (8001c80 <HAL_RCC_OscConfig+0x4e8>)
 8001a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a94:	4a7a      	ldr	r2, [pc, #488]	; (8001c80 <HAL_RCC_OscConfig+0x4e8>)
 8001a96:	f043 0304 	orr.w	r3, r3, #4
 8001a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a9c:	4b78      	ldr	r3, [pc, #480]	; (8001c80 <HAL_RCC_OscConfig+0x4e8>)
 8001a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa0:	4a77      	ldr	r2, [pc, #476]	; (8001c80 <HAL_RCC_OscConfig+0x4e8>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa8:	e00b      	b.n	8001ac2 <HAL_RCC_OscConfig+0x32a>
 8001aaa:	4b75      	ldr	r3, [pc, #468]	; (8001c80 <HAL_RCC_OscConfig+0x4e8>)
 8001aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aae:	4a74      	ldr	r2, [pc, #464]	; (8001c80 <HAL_RCC_OscConfig+0x4e8>)
 8001ab0:	f023 0301 	bic.w	r3, r3, #1
 8001ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab6:	4b72      	ldr	r3, [pc, #456]	; (8001c80 <HAL_RCC_OscConfig+0x4e8>)
 8001ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aba:	4a71      	ldr	r2, [pc, #452]	; (8001c80 <HAL_RCC_OscConfig+0x4e8>)
 8001abc:	f023 0304 	bic.w	r3, r3, #4
 8001ac0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d015      	beq.n	8001af6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aca:	f7ff f81d 	bl	8000b08 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad0:	e00a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ad2:	f7ff f819 	bl	8000b08 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e0c5      	b.n	8001c74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae8:	4b65      	ldr	r3, [pc, #404]	; (8001c80 <HAL_RCC_OscConfig+0x4e8>)
 8001aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0ee      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x33a>
 8001af4:	e014      	b.n	8001b20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af6:	f7ff f807 	bl	8000b08 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001afc:	e00a      	b.n	8001b14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001afe:	f7ff f803 	bl	8000b08 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e0af      	b.n	8001c74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b14:	4b5a      	ldr	r3, [pc, #360]	; (8001c80 <HAL_RCC_OscConfig+0x4e8>)
 8001b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1ee      	bne.n	8001afe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b20:	7dfb      	ldrb	r3, [r7, #23]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d105      	bne.n	8001b32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b26:	4b56      	ldr	r3, [pc, #344]	; (8001c80 <HAL_RCC_OscConfig+0x4e8>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	4a55      	ldr	r2, [pc, #340]	; (8001c80 <HAL_RCC_OscConfig+0x4e8>)
 8001b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 809b 	beq.w	8001c72 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b3c:	4b50      	ldr	r3, [pc, #320]	; (8001c80 <HAL_RCC_OscConfig+0x4e8>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 030c 	and.w	r3, r3, #12
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d05c      	beq.n	8001c02 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d141      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b50:	4b4c      	ldr	r3, [pc, #304]	; (8001c84 <HAL_RCC_OscConfig+0x4ec>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b56:	f7fe ffd7 	bl	8000b08 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b5e:	f7fe ffd3 	bl	8000b08 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e081      	b.n	8001c74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b70:	4b43      	ldr	r3, [pc, #268]	; (8001c80 <HAL_RCC_OscConfig+0x4e8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f0      	bne.n	8001b5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69da      	ldr	r2, [r3, #28]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	019b      	lsls	r3, r3, #6
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	085b      	lsrs	r3, r3, #1
 8001b94:	3b01      	subs	r3, #1
 8001b96:	041b      	lsls	r3, r3, #16
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	061b      	lsls	r3, r3, #24
 8001ba0:	4937      	ldr	r1, [pc, #220]	; (8001c80 <HAL_RCC_OscConfig+0x4e8>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba6:	4b37      	ldr	r3, [pc, #220]	; (8001c84 <HAL_RCC_OscConfig+0x4ec>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7fe ffac 	bl	8000b08 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb4:	f7fe ffa8 	bl	8000b08 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e056      	b.n	8001c74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc6:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <HAL_RCC_OscConfig+0x4e8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x41c>
 8001bd2:	e04e      	b.n	8001c72 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd4:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <HAL_RCC_OscConfig+0x4ec>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bda:	f7fe ff95 	bl	8000b08 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be2:	f7fe ff91 	bl	8000b08 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e03f      	b.n	8001c74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <HAL_RCC_OscConfig+0x4e8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f0      	bne.n	8001be2 <HAL_RCC_OscConfig+0x44a>
 8001c00:	e037      	b.n	8001c72 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e032      	b.n	8001c74 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <HAL_RCC_OscConfig+0x4e8>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d028      	beq.n	8001c6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d121      	bne.n	8001c6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d11a      	bne.n	8001c6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c3e:	4013      	ands	r3, r2
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c44:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d111      	bne.n	8001c6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c54:	085b      	lsrs	r3, r3, #1
 8001c56:	3b01      	subs	r3, #1
 8001c58:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d001      	beq.n	8001c72 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40007000 	.word	0x40007000
 8001c80:	40023800 	.word	0x40023800
 8001c84:	42470060 	.word	0x42470060

08001c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0cc      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c9c:	4b68      	ldr	r3, [pc, #416]	; (8001e40 <HAL_RCC_ClockConfig+0x1b8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d90c      	bls.n	8001cc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001caa:	4b65      	ldr	r3, [pc, #404]	; (8001e40 <HAL_RCC_ClockConfig+0x1b8>)
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb2:	4b63      	ldr	r3, [pc, #396]	; (8001e40 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0b8      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d020      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cdc:	4b59      	ldr	r3, [pc, #356]	; (8001e44 <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	4a58      	ldr	r2, [pc, #352]	; (8001e44 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ce6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d005      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cf4:	4b53      	ldr	r3, [pc, #332]	; (8001e44 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	4a52      	ldr	r2, [pc, #328]	; (8001e44 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d00:	4b50      	ldr	r3, [pc, #320]	; (8001e44 <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	494d      	ldr	r1, [pc, #308]	; (8001e44 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d044      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d107      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d26:	4b47      	ldr	r3, [pc, #284]	; (8001e44 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d119      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e07f      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d003      	beq.n	8001d46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d107      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d46:	4b3f      	ldr	r3, [pc, #252]	; (8001e44 <HAL_RCC_ClockConfig+0x1bc>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d109      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e06f      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d56:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e067      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d66:	4b37      	ldr	r3, [pc, #220]	; (8001e44 <HAL_RCC_ClockConfig+0x1bc>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f023 0203 	bic.w	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4934      	ldr	r1, [pc, #208]	; (8001e44 <HAL_RCC_ClockConfig+0x1bc>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d78:	f7fe fec6 	bl	8000b08 <HAL_GetTick>
 8001d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	e00a      	b.n	8001d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d80:	f7fe fec2 	bl	8000b08 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e04f      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d96:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <HAL_RCC_ClockConfig+0x1bc>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 020c 	and.w	r2, r3, #12
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d1eb      	bne.n	8001d80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da8:	4b25      	ldr	r3, [pc, #148]	; (8001e40 <HAL_RCC_ClockConfig+0x1b8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d20c      	bcs.n	8001dd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <HAL_RCC_ClockConfig+0x1b8>)
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e032      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d008      	beq.n	8001dee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4916      	ldr	r1, [pc, #88]	; (8001e44 <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d009      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	490e      	ldr	r1, [pc, #56]	; (8001e44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e0e:	f000 f821 	bl	8001e54 <HAL_RCC_GetSysClockFreq>
 8001e12:	4602      	mov	r2, r0
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	490a      	ldr	r1, [pc, #40]	; (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001e20:	5ccb      	ldrb	r3, [r1, r3]
 8001e22:	fa22 f303 	lsr.w	r3, r2, r3
 8001e26:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <HAL_RCC_ClockConfig+0x1c8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fe26 	bl	8000a80 <HAL_InitTick>

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023c00 	.word	0x40023c00
 8001e44:	40023800 	.word	0x40023800
 8001e48:	08002c68 	.word	0x08002c68
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	20000004 	.word	0x20000004

08001e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e54:	b5b0      	push	{r4, r5, r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	6079      	str	r1, [r7, #4]
 8001e5e:	2100      	movs	r1, #0
 8001e60:	60f9      	str	r1, [r7, #12]
 8001e62:	2100      	movs	r1, #0
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e66:	2100      	movs	r1, #0
 8001e68:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e6a:	4952      	ldr	r1, [pc, #328]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e6c:	6889      	ldr	r1, [r1, #8]
 8001e6e:	f001 010c 	and.w	r1, r1, #12
 8001e72:	2908      	cmp	r1, #8
 8001e74:	d00d      	beq.n	8001e92 <HAL_RCC_GetSysClockFreq+0x3e>
 8001e76:	2908      	cmp	r1, #8
 8001e78:	f200 8094 	bhi.w	8001fa4 <HAL_RCC_GetSysClockFreq+0x150>
 8001e7c:	2900      	cmp	r1, #0
 8001e7e:	d002      	beq.n	8001e86 <HAL_RCC_GetSysClockFreq+0x32>
 8001e80:	2904      	cmp	r1, #4
 8001e82:	d003      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0x38>
 8001e84:	e08e      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e86:	4b4c      	ldr	r3, [pc, #304]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x164>)
 8001e88:	60bb      	str	r3, [r7, #8]
       break;
 8001e8a:	e08e      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e8c:	4b4b      	ldr	r3, [pc, #300]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x168>)
 8001e8e:	60bb      	str	r3, [r7, #8]
      break;
 8001e90:	e08b      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e92:	4948      	ldr	r1, [pc, #288]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e94:	6849      	ldr	r1, [r1, #4]
 8001e96:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001e9a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e9c:	4945      	ldr	r1, [pc, #276]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e9e:	6849      	ldr	r1, [r1, #4]
 8001ea0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001ea4:	2900      	cmp	r1, #0
 8001ea6:	d024      	beq.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ea8:	4942      	ldr	r1, [pc, #264]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001eaa:	6849      	ldr	r1, [r1, #4]
 8001eac:	0989      	lsrs	r1, r1, #6
 8001eae:	4608      	mov	r0, r1
 8001eb0:	f04f 0100 	mov.w	r1, #0
 8001eb4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001eb8:	f04f 0500 	mov.w	r5, #0
 8001ebc:	ea00 0204 	and.w	r2, r0, r4
 8001ec0:	ea01 0305 	and.w	r3, r1, r5
 8001ec4:	493d      	ldr	r1, [pc, #244]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x168>)
 8001ec6:	fb01 f003 	mul.w	r0, r1, r3
 8001eca:	2100      	movs	r1, #0
 8001ecc:	fb01 f102 	mul.w	r1, r1, r2
 8001ed0:	1844      	adds	r4, r0, r1
 8001ed2:	493a      	ldr	r1, [pc, #232]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x168>)
 8001ed4:	fba2 0101 	umull	r0, r1, r2, r1
 8001ed8:	1863      	adds	r3, r4, r1
 8001eda:	4619      	mov	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	f7fe f976 	bl	80001d4 <__aeabi_uldivmod>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4613      	mov	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	e04a      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef2:	4b30      	ldr	r3, [pc, #192]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	099b      	lsrs	r3, r3, #6
 8001ef8:	461a      	mov	r2, r3
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f02:	f04f 0100 	mov.w	r1, #0
 8001f06:	ea02 0400 	and.w	r4, r2, r0
 8001f0a:	ea03 0501 	and.w	r5, r3, r1
 8001f0e:	4620      	mov	r0, r4
 8001f10:	4629      	mov	r1, r5
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	014b      	lsls	r3, r1, #5
 8001f1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f20:	0142      	lsls	r2, r0, #5
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	1b00      	subs	r0, r0, r4
 8001f28:	eb61 0105 	sbc.w	r1, r1, r5
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	018b      	lsls	r3, r1, #6
 8001f36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f3a:	0182      	lsls	r2, r0, #6
 8001f3c:	1a12      	subs	r2, r2, r0
 8001f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f42:	f04f 0000 	mov.w	r0, #0
 8001f46:	f04f 0100 	mov.w	r1, #0
 8001f4a:	00d9      	lsls	r1, r3, #3
 8001f4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f50:	00d0      	lsls	r0, r2, #3
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	1912      	adds	r2, r2, r4
 8001f58:	eb45 0303 	adc.w	r3, r5, r3
 8001f5c:	f04f 0000 	mov.w	r0, #0
 8001f60:	f04f 0100 	mov.w	r1, #0
 8001f64:	0299      	lsls	r1, r3, #10
 8001f66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f6a:	0290      	lsls	r0, r2, #10
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4610      	mov	r0, r2
 8001f72:	4619      	mov	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	461a      	mov	r2, r3
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	f7fe f92a 	bl	80001d4 <__aeabi_uldivmod>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4613      	mov	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	0c1b      	lsrs	r3, r3, #16
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	3301      	adds	r3, #1
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa0:	60bb      	str	r3, [r7, #8]
      break;
 8001fa2:	e002      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x164>)
 8001fa6:	60bb      	str	r3, [r7, #8]
      break;
 8001fa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001faa:	68bb      	ldr	r3, [r7, #8]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	00f42400 	.word	0x00f42400
 8001fbc:	017d7840 	.word	0x017d7840

08001fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e041      	b.n	8002056 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d106      	bne.n	8001fec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7fe fc6a 	bl	80008c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4610      	mov	r0, r2
 8002000:	f000 fac0 	bl	8002584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e041      	b.n	80020f4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d106      	bne.n	800208a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f839 	bl	80020fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2202      	movs	r2, #2
 800208e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3304      	adds	r3, #4
 800209a:	4619      	mov	r1, r3
 800209c:	4610      	mov	r0, r2
 800209e:	f000 fa71 	bl	8002584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d109      	bne.n	8002134 <HAL_TIM_PWM_Start+0x24>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b01      	cmp	r3, #1
 800212a:	bf14      	ite	ne
 800212c:	2301      	movne	r3, #1
 800212e:	2300      	moveq	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	e022      	b.n	800217a <HAL_TIM_PWM_Start+0x6a>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2b04      	cmp	r3, #4
 8002138:	d109      	bne.n	800214e <HAL_TIM_PWM_Start+0x3e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b01      	cmp	r3, #1
 8002144:	bf14      	ite	ne
 8002146:	2301      	movne	r3, #1
 8002148:	2300      	moveq	r3, #0
 800214a:	b2db      	uxtb	r3, r3
 800214c:	e015      	b.n	800217a <HAL_TIM_PWM_Start+0x6a>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	2b08      	cmp	r3, #8
 8002152:	d109      	bne.n	8002168 <HAL_TIM_PWM_Start+0x58>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b01      	cmp	r3, #1
 800215e:	bf14      	ite	ne
 8002160:	2301      	movne	r3, #1
 8002162:	2300      	moveq	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	e008      	b.n	800217a <HAL_TIM_PWM_Start+0x6a>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b01      	cmp	r3, #1
 8002172:	bf14      	ite	ne
 8002174:	2301      	movne	r3, #1
 8002176:	2300      	moveq	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e068      	b.n	8002254 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d104      	bne.n	8002192 <HAL_TIM_PWM_Start+0x82>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002190:	e013      	b.n	80021ba <HAL_TIM_PWM_Start+0xaa>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b04      	cmp	r3, #4
 8002196:	d104      	bne.n	80021a2 <HAL_TIM_PWM_Start+0x92>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021a0:	e00b      	b.n	80021ba <HAL_TIM_PWM_Start+0xaa>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d104      	bne.n	80021b2 <HAL_TIM_PWM_Start+0xa2>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021b0:	e003      	b.n	80021ba <HAL_TIM_PWM_Start+0xaa>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2202      	movs	r2, #2
 80021b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2201      	movs	r2, #1
 80021c0:	6839      	ldr	r1, [r7, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fc84 	bl	8002ad0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a23      	ldr	r2, [pc, #140]	; (800225c <HAL_TIM_PWM_Start+0x14c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d107      	bne.n	80021e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1d      	ldr	r2, [pc, #116]	; (800225c <HAL_TIM_PWM_Start+0x14c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d018      	beq.n	800221e <HAL_TIM_PWM_Start+0x10e>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f4:	d013      	beq.n	800221e <HAL_TIM_PWM_Start+0x10e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a19      	ldr	r2, [pc, #100]	; (8002260 <HAL_TIM_PWM_Start+0x150>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d00e      	beq.n	800221e <HAL_TIM_PWM_Start+0x10e>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a17      	ldr	r2, [pc, #92]	; (8002264 <HAL_TIM_PWM_Start+0x154>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d009      	beq.n	800221e <HAL_TIM_PWM_Start+0x10e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a16      	ldr	r2, [pc, #88]	; (8002268 <HAL_TIM_PWM_Start+0x158>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d004      	beq.n	800221e <HAL_TIM_PWM_Start+0x10e>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a14      	ldr	r2, [pc, #80]	; (800226c <HAL_TIM_PWM_Start+0x15c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d111      	bne.n	8002242 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b06      	cmp	r3, #6
 800222e:	d010      	beq.n	8002252 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0201 	orr.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002240:	e007      	b.n	8002252 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0201 	orr.w	r2, r2, #1
 8002250:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40010000 	.word	0x40010000
 8002260:	40000400 	.word	0x40000400
 8002264:	40000800 	.word	0x40000800
 8002268:	40000c00 	.word	0x40000c00
 800226c:	40014000 	.word	0x40014000

08002270 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800228a:	2302      	movs	r3, #2
 800228c:	e0ae      	b.n	80023ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b0c      	cmp	r3, #12
 800229a:	f200 809f 	bhi.w	80023dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800229e:	a201      	add	r2, pc, #4	; (adr r2, 80022a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80022a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a4:	080022d9 	.word	0x080022d9
 80022a8:	080023dd 	.word	0x080023dd
 80022ac:	080023dd 	.word	0x080023dd
 80022b0:	080023dd 	.word	0x080023dd
 80022b4:	08002319 	.word	0x08002319
 80022b8:	080023dd 	.word	0x080023dd
 80022bc:	080023dd 	.word	0x080023dd
 80022c0:	080023dd 	.word	0x080023dd
 80022c4:	0800235b 	.word	0x0800235b
 80022c8:	080023dd 	.word	0x080023dd
 80022cc:	080023dd 	.word	0x080023dd
 80022d0:	080023dd 	.word	0x080023dd
 80022d4:	0800239b 	.word	0x0800239b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f9d0 	bl	8002684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699a      	ldr	r2, [r3, #24]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0208 	orr.w	r2, r2, #8
 80022f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699a      	ldr	r2, [r3, #24]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0204 	bic.w	r2, r2, #4
 8002302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6999      	ldr	r1, [r3, #24]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	691a      	ldr	r2, [r3, #16]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	619a      	str	r2, [r3, #24]
      break;
 8002316:	e064      	b.n	80023e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fa16 	bl	8002750 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699a      	ldr	r2, [r3, #24]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6999      	ldr	r1, [r3, #24]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	021a      	lsls	r2, r3, #8
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	619a      	str	r2, [r3, #24]
      break;
 8002358:	e043      	b.n	80023e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68b9      	ldr	r1, [r7, #8]
 8002360:	4618      	mov	r0, r3
 8002362:	f000 fa61 	bl	8002828 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	69da      	ldr	r2, [r3, #28]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f042 0208 	orr.w	r2, r2, #8
 8002374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	69da      	ldr	r2, [r3, #28]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0204 	bic.w	r2, r2, #4
 8002384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	69d9      	ldr	r1, [r3, #28]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	61da      	str	r2, [r3, #28]
      break;
 8002398:	e023      	b.n	80023e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68b9      	ldr	r1, [r7, #8]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 faab 	bl	80028fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	69da      	ldr	r2, [r3, #28]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	69da      	ldr	r2, [r3, #28]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	69d9      	ldr	r1, [r3, #28]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	021a      	lsls	r2, r3, #8
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	61da      	str	r2, [r3, #28]
      break;
 80023da:	e002      	b.n	80023e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	75fb      	strb	r3, [r7, #23]
      break;
 80023e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_TIM_ConfigClockSource+0x1c>
 800240c:	2302      	movs	r3, #2
 800240e:	e0b4      	b.n	800257a <HAL_TIM_ConfigClockSource+0x186>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800242e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002436:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002448:	d03e      	beq.n	80024c8 <HAL_TIM_ConfigClockSource+0xd4>
 800244a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800244e:	f200 8087 	bhi.w	8002560 <HAL_TIM_ConfigClockSource+0x16c>
 8002452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002456:	f000 8086 	beq.w	8002566 <HAL_TIM_ConfigClockSource+0x172>
 800245a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800245e:	d87f      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x16c>
 8002460:	2b70      	cmp	r3, #112	; 0x70
 8002462:	d01a      	beq.n	800249a <HAL_TIM_ConfigClockSource+0xa6>
 8002464:	2b70      	cmp	r3, #112	; 0x70
 8002466:	d87b      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x16c>
 8002468:	2b60      	cmp	r3, #96	; 0x60
 800246a:	d050      	beq.n	800250e <HAL_TIM_ConfigClockSource+0x11a>
 800246c:	2b60      	cmp	r3, #96	; 0x60
 800246e:	d877      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x16c>
 8002470:	2b50      	cmp	r3, #80	; 0x50
 8002472:	d03c      	beq.n	80024ee <HAL_TIM_ConfigClockSource+0xfa>
 8002474:	2b50      	cmp	r3, #80	; 0x50
 8002476:	d873      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x16c>
 8002478:	2b40      	cmp	r3, #64	; 0x40
 800247a:	d058      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x13a>
 800247c:	2b40      	cmp	r3, #64	; 0x40
 800247e:	d86f      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x16c>
 8002480:	2b30      	cmp	r3, #48	; 0x30
 8002482:	d064      	beq.n	800254e <HAL_TIM_ConfigClockSource+0x15a>
 8002484:	2b30      	cmp	r3, #48	; 0x30
 8002486:	d86b      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x16c>
 8002488:	2b20      	cmp	r3, #32
 800248a:	d060      	beq.n	800254e <HAL_TIM_ConfigClockSource+0x15a>
 800248c:	2b20      	cmp	r3, #32
 800248e:	d867      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x16c>
 8002490:	2b00      	cmp	r3, #0
 8002492:	d05c      	beq.n	800254e <HAL_TIM_ConfigClockSource+0x15a>
 8002494:	2b10      	cmp	r3, #16
 8002496:	d05a      	beq.n	800254e <HAL_TIM_ConfigClockSource+0x15a>
 8002498:	e062      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6899      	ldr	r1, [r3, #8]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f000 faf1 	bl	8002a90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	609a      	str	r2, [r3, #8]
      break;
 80024c6:	e04f      	b.n	8002568 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	6899      	ldr	r1, [r3, #8]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f000 fada 	bl	8002a90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024ea:	609a      	str	r2, [r3, #8]
      break;
 80024ec:	e03c      	b.n	8002568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	6859      	ldr	r1, [r3, #4]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	461a      	mov	r2, r3
 80024fc:	f000 fa4e 	bl	800299c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2150      	movs	r1, #80	; 0x50
 8002506:	4618      	mov	r0, r3
 8002508:	f000 faa7 	bl	8002a5a <TIM_ITRx_SetConfig>
      break;
 800250c:	e02c      	b.n	8002568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6859      	ldr	r1, [r3, #4]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	461a      	mov	r2, r3
 800251c:	f000 fa6d 	bl	80029fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2160      	movs	r1, #96	; 0x60
 8002526:	4618      	mov	r0, r3
 8002528:	f000 fa97 	bl	8002a5a <TIM_ITRx_SetConfig>
      break;
 800252c:	e01c      	b.n	8002568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	6859      	ldr	r1, [r3, #4]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	461a      	mov	r2, r3
 800253c:	f000 fa2e 	bl	800299c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2140      	movs	r1, #64	; 0x40
 8002546:	4618      	mov	r0, r3
 8002548:	f000 fa87 	bl	8002a5a <TIM_ITRx_SetConfig>
      break;
 800254c:	e00c      	b.n	8002568 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4619      	mov	r1, r3
 8002558:	4610      	mov	r0, r2
 800255a:	f000 fa7e 	bl	8002a5a <TIM_ITRx_SetConfig>
      break;
 800255e:	e003      	b.n	8002568 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
      break;
 8002564:	e000      	b.n	8002568 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002566:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002578:	7bfb      	ldrb	r3, [r7, #15]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a34      	ldr	r2, [pc, #208]	; (8002668 <TIM_Base_SetConfig+0xe4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d00f      	beq.n	80025bc <TIM_Base_SetConfig+0x38>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a2:	d00b      	beq.n	80025bc <TIM_Base_SetConfig+0x38>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a31      	ldr	r2, [pc, #196]	; (800266c <TIM_Base_SetConfig+0xe8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d007      	beq.n	80025bc <TIM_Base_SetConfig+0x38>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a30      	ldr	r2, [pc, #192]	; (8002670 <TIM_Base_SetConfig+0xec>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d003      	beq.n	80025bc <TIM_Base_SetConfig+0x38>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a2f      	ldr	r2, [pc, #188]	; (8002674 <TIM_Base_SetConfig+0xf0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d108      	bne.n	80025ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a25      	ldr	r2, [pc, #148]	; (8002668 <TIM_Base_SetConfig+0xe4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d01b      	beq.n	800260e <TIM_Base_SetConfig+0x8a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025dc:	d017      	beq.n	800260e <TIM_Base_SetConfig+0x8a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a22      	ldr	r2, [pc, #136]	; (800266c <TIM_Base_SetConfig+0xe8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d013      	beq.n	800260e <TIM_Base_SetConfig+0x8a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a21      	ldr	r2, [pc, #132]	; (8002670 <TIM_Base_SetConfig+0xec>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00f      	beq.n	800260e <TIM_Base_SetConfig+0x8a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a20      	ldr	r2, [pc, #128]	; (8002674 <TIM_Base_SetConfig+0xf0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00b      	beq.n	800260e <TIM_Base_SetConfig+0x8a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a1f      	ldr	r2, [pc, #124]	; (8002678 <TIM_Base_SetConfig+0xf4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d007      	beq.n	800260e <TIM_Base_SetConfig+0x8a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a1e      	ldr	r2, [pc, #120]	; (800267c <TIM_Base_SetConfig+0xf8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d003      	beq.n	800260e <TIM_Base_SetConfig+0x8a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a1d      	ldr	r2, [pc, #116]	; (8002680 <TIM_Base_SetConfig+0xfc>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d108      	bne.n	8002620 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a08      	ldr	r2, [pc, #32]	; (8002668 <TIM_Base_SetConfig+0xe4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d103      	bne.n	8002654 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	615a      	str	r2, [r3, #20]
}
 800265a:	bf00      	nop
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40010000 	.word	0x40010000
 800266c:	40000400 	.word	0x40000400
 8002670:	40000800 	.word	0x40000800
 8002674:	40000c00 	.word	0x40000c00
 8002678:	40014000 	.word	0x40014000
 800267c:	40014400 	.word	0x40014400
 8002680:	40014800 	.word	0x40014800

08002684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	f023 0201 	bic.w	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f023 0303 	bic.w	r3, r3, #3
 80026ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f023 0302 	bic.w	r3, r3, #2
 80026cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a1c      	ldr	r2, [pc, #112]	; (800274c <TIM_OC1_SetConfig+0xc8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d10c      	bne.n	80026fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f023 0308 	bic.w	r3, r3, #8
 80026e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f023 0304 	bic.w	r3, r3, #4
 80026f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a13      	ldr	r2, [pc, #76]	; (800274c <TIM_OC1_SetConfig+0xc8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d111      	bne.n	8002726 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	621a      	str	r2, [r3, #32]
}
 8002740:	bf00      	nop
 8002742:	371c      	adds	r7, #28
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	40010000 	.word	0x40010000

08002750 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002750:	b480      	push	{r7}
 8002752:	b087      	sub	sp, #28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	f023 0210 	bic.w	r2, r3, #16
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800277e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	021b      	lsls	r3, r3, #8
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f023 0320 	bic.w	r3, r3, #32
 800279a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a1e      	ldr	r2, [pc, #120]	; (8002824 <TIM_OC2_SetConfig+0xd4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d10d      	bne.n	80027cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a15      	ldr	r2, [pc, #84]	; (8002824 <TIM_OC2_SetConfig+0xd4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d113      	bne.n	80027fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	621a      	str	r2, [r3, #32]
}
 8002816:	bf00      	nop
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40010000 	.word	0x40010000

08002828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0303 	bic.w	r3, r3, #3
 800285e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	021b      	lsls	r3, r3, #8
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	4313      	orrs	r3, r2
 800287c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a1d      	ldr	r2, [pc, #116]	; (80028f8 <TIM_OC3_SetConfig+0xd0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d10d      	bne.n	80028a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800288c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	4313      	orrs	r3, r2
 8002898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a14      	ldr	r2, [pc, #80]	; (80028f8 <TIM_OC3_SetConfig+0xd0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d113      	bne.n	80028d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	621a      	str	r2, [r3, #32]
}
 80028ec:	bf00      	nop
 80028ee:	371c      	adds	r7, #28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	40010000 	.word	0x40010000

080028fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800292a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	031b      	lsls	r3, r3, #12
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a10      	ldr	r2, [pc, #64]	; (8002998 <TIM_OC4_SetConfig+0x9c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d109      	bne.n	8002970 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002962:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	019b      	lsls	r3, r3, #6
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4313      	orrs	r3, r2
 800296e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	621a      	str	r2, [r3, #32]
}
 800298a:	bf00      	nop
 800298c:	371c      	adds	r7, #28
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40010000 	.word	0x40010000

0800299c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	f023 0201 	bic.w	r2, r3, #1
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f023 030a 	bic.w	r3, r3, #10
 80029d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	4313      	orrs	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	621a      	str	r2, [r3, #32]
}
 80029ee:	bf00      	nop
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b087      	sub	sp, #28
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	f023 0210 	bic.w	r2, r3, #16
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	031b      	lsls	r3, r3, #12
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	621a      	str	r2, [r3, #32]
}
 8002a4e:	bf00      	nop
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b085      	sub	sp, #20
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f043 0307 	orr.w	r3, r3, #7
 8002a7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	609a      	str	r2, [r3, #8]
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	021a      	lsls	r2, r3, #8
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	609a      	str	r2, [r3, #8]
}
 8002ac4:	bf00      	nop
 8002ac6:	371c      	adds	r7, #28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a1a      	ldr	r2, [r3, #32]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	401a      	ands	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a1a      	ldr	r2, [r3, #32]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	fa01 f303 	lsl.w	r3, r1, r3
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	621a      	str	r2, [r3, #32]
}
 8002b0e:	bf00      	nop
 8002b10:	371c      	adds	r7, #28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
	...

08002b1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e050      	b.n	8002bd6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a1c      	ldr	r2, [pc, #112]	; (8002be4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d018      	beq.n	8002baa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b80:	d013      	beq.n	8002baa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a18      	ldr	r2, [pc, #96]	; (8002be8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d00e      	beq.n	8002baa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a16      	ldr	r2, [pc, #88]	; (8002bec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d009      	beq.n	8002baa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a15      	ldr	r2, [pc, #84]	; (8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d004      	beq.n	8002baa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a13      	ldr	r2, [pc, #76]	; (8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40010000 	.word	0x40010000
 8002be8:	40000400 	.word	0x40000400
 8002bec:	40000800 	.word	0x40000800
 8002bf0:	40000c00 	.word	0x40000c00
 8002bf4:	40014000 	.word	0x40014000

08002bf8 <__libc_init_array>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	4d0d      	ldr	r5, [pc, #52]	; (8002c30 <__libc_init_array+0x38>)
 8002bfc:	4c0d      	ldr	r4, [pc, #52]	; (8002c34 <__libc_init_array+0x3c>)
 8002bfe:	1b64      	subs	r4, r4, r5
 8002c00:	10a4      	asrs	r4, r4, #2
 8002c02:	2600      	movs	r6, #0
 8002c04:	42a6      	cmp	r6, r4
 8002c06:	d109      	bne.n	8002c1c <__libc_init_array+0x24>
 8002c08:	4d0b      	ldr	r5, [pc, #44]	; (8002c38 <__libc_init_array+0x40>)
 8002c0a:	4c0c      	ldr	r4, [pc, #48]	; (8002c3c <__libc_init_array+0x44>)
 8002c0c:	f000 f820 	bl	8002c50 <_init>
 8002c10:	1b64      	subs	r4, r4, r5
 8002c12:	10a4      	asrs	r4, r4, #2
 8002c14:	2600      	movs	r6, #0
 8002c16:	42a6      	cmp	r6, r4
 8002c18:	d105      	bne.n	8002c26 <__libc_init_array+0x2e>
 8002c1a:	bd70      	pop	{r4, r5, r6, pc}
 8002c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c20:	4798      	blx	r3
 8002c22:	3601      	adds	r6, #1
 8002c24:	e7ee      	b.n	8002c04 <__libc_init_array+0xc>
 8002c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c2a:	4798      	blx	r3
 8002c2c:	3601      	adds	r6, #1
 8002c2e:	e7f2      	b.n	8002c16 <__libc_init_array+0x1e>
 8002c30:	08002c80 	.word	0x08002c80
 8002c34:	08002c80 	.word	0x08002c80
 8002c38:	08002c80 	.word	0x08002c80
 8002c3c:	08002c84 	.word	0x08002c84

08002c40 <memset>:
 8002c40:	4402      	add	r2, r0
 8002c42:	4603      	mov	r3, r0
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d100      	bne.n	8002c4a <memset+0xa>
 8002c48:	4770      	bx	lr
 8002c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c4e:	e7f9      	b.n	8002c44 <memset+0x4>

08002c50 <_init>:
 8002c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c52:	bf00      	nop
 8002c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c56:	bc08      	pop	{r3}
 8002c58:	469e      	mov	lr, r3
 8002c5a:	4770      	bx	lr

08002c5c <_fini>:
 8002c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5e:	bf00      	nop
 8002c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c62:	bc08      	pop	{r3}
 8002c64:	469e      	mov	lr, r3
 8002c66:	4770      	bx	lr
